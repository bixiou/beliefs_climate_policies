# s <<- s[-which(is.element(s$id, s$id[duplicated(s$id)]) & !duplicated(s$id) & is.na(s$revenu)),] # TODO: check duplicates
s$weight <<- weighting_s(s)
if (exclude_screened) { s <<- s[is.na(s$exclu),] } # remove Screened
if (exclude_speeder) { s <<- s[s$duree > 420,] } # remove speedest /!\ was 540 before 22-02-11:00 (EST Coast time)
# if (exclude_quotas_full) { s <<- s[s[101][[1]] %in% c(1:5),]  } # remove those with a problem for the taille d'agglo
# if (exclude_quotas_full) { s <<- s[s$Q_TerminateFlag=="",]  } # remove those with a problem for the taille d'agglo
if (only_finished) { s <<- s[s$finished=="True",] }
}
prepare_s(exclude_screened=FALSE, exclude_speeder=FALSE, only_finished=FALSE)
sa <- s
# prepare_s(exclude_screened=FALSE, exclude_speeder=FALSE)
# se <- s
# prepare_s(exclude_screened=FALSE)
# sp <- s
prepare_s()
tail(s$en_position_0)
j <- s$en_position_0[1238]
j
is.na(j)
convert_s <- function() {
# lab <- label(s$csp)
# s$csp <<- factor(s$csp, levels=c(levels(s$csp), "Cadres", "Indépendants", "Ouvriers", 'Inactifs', "Professions intermédiaires", "Retraités", "Employés", "Agriculteurs"))
# s$csp <<- as.character(s$csp)
s$csp[grepl("cadre",s$csp)] <<- "Cadre"
s$csp[grepl("Artisan",s$csp)] <<- "Indépendant"
s$csp[grepl("iaire",s$csp)] <<- "Intermédiaire"
s$csp[grepl("etrait",s$csp)] <<- "Retraité"
s$csp[grepl("Employ",s$csp)] <<- "Employé"
s$csp[grepl("Agricul",s$csp)] <<- "Agriculteur"
s$csp[grepl("Ouvrier",s$csp)] <<- "Ouvrier"
s$csp[grepl("Inactif",s$csp)] <<- "Inactif"
# label(s$csp) <<- lab
# s$csp <<- as.factor(s$csp)
for (i in 1:length(s)) {
# levels(s[[i]]) <<- c(levels(s[[i]]), "NSP")
s[[i]][s[[i]] == "NSP (Ne sais pas, ne se prononce pas)"] <<- "NSP"
s[[i]][s[[i]] == "NSP (Ne sait pas, ne se prononce pas)"] <<- "NSP"
s[[i]][s[[i]] == "NSP (Ne sais pas, ne se prononce pas)."] <<- "NSP"
s[[i]][s[[i]] == "NSP (Ne sait pas, ne se prononce pas)."] <<- "NSP"
s[[i]][s[[i]] == "NSP (Ne sais pas, ne souhaite pas répondre)"] <<- "NSP"
s[[i]][s[[i]] == "NSP (Ne sait pas, ne veut pas répondre)"] <<- "NSP"
s[[i]][s[[i]] == "NSP (Ne veut pas répondre)"] <<- "NSP"
}
s$variante_transferts_inter[!is.na(s$transferts_inter_a) | !is.na(s$transferts_inter_a_info)] <<- "a"
s$transferts_inter <<- NA
s$transferts_inter_info[!is.na(s$transferts_inter_a_info)] <<- TRUE
s$transferts_inter_info[!is.na(s$transferts_inter_a)] <<- FALSE
s$transferts_inter[!is.na(s$transferts_inter_a_info)] <<- s$transferts_inter_a_info[!is.na(s$transferts_inter_a_info)]
s$transferts_inter[!is.na(s$transferts_inter_a)] <<- s$transferts_inter_a[!is.na(s$transferts_inter_a)]
label(s$variante_transferts_inter) <<- "variante_transferts_inter: Variante dans la formulation de transferts_inter; s/i/c/a: simple/intermédiaire/complète/approbation: (argument pauvreté,esponsabilité climatique des pays riches)/complète (i+ argument colonisation, esclavage)/pour ou contre un transfert de 5% des revenus des pays riches vers les pays pauvres (seulement en vague 2); Vague 1: curseur/NSP, Vague 2: champ de saisie (quelques données manquantes) - Q5,Q6,Q78"
label(s$transferts_inter) <<- "transferts_inter: Approbation d'un transfert de 5% des revenus des pays riches vers les pays pauvres"
# s$transferts_inter <<- as.item(as.numeric(s$transferts_inter), missing.values=-1, annotation="transferts_inter: Transferts internationaux, variantes (simple) avec curseur 0-20% (s) ou champ (Quelle % des revenus des pays riches devrait être transférée aux pays pauvres ?) - Q73,91")
s$revenu <<- clean_number(s$revenu, high_numbers='divide')
s$rev_tot <<- clean_number(s$rev_tot, high_numbers='divide')
for (i in c( # TODO: check number outliers
"revenu", "rev_tot", "taille_menage", "nb_adultes", "nb_14_et_plus", "duree", "variation_aide", "depense_aide", "km_0", "km_1", "km_2", "conso_1", "conso_2", "surface", "emission_cible",
"depense_totale", "depense_sante", "depense_retraites", "depense_protection", "depense_education", "depense_recherche", "depense_loisirs",
"depense_infrastructures", "depense_justice", "depense_armee", "depense_securite", "depense_aide", "variation_totale", "variation_aide",
"variation_sante", "variation_retraites", "variation_protection", "recette_totale", "variation_recette", "budget_equilibre", "regle_or",
"variation_education", "variation_recherche", "variation_loisirs", "variation_infrastructures", "variation_justice", "variation_armee", "variation_securite",
"transports_distance", "duree_info_CC", "duree_info_CC_PM", "duree_info_PM", "duree_no_info", "duree_depenses", "duree_champ_libre",
"hausse_chauffage", "hausse_depenses", "hausse_diesel", "hausse_essence", "nb_vehicules", "en_position_0", "en_position_1", "en_position_2", "en_position_3",
"en_position_4", "en_position_5", "en_position_6", "en_position_7", "en_position_8", "en_position_9", "en_position_10"
)) {
lab <- label(s[[i]])
s[[i]] <<- as.numeric(as.vector(s[[i]]))
label(s[[i]]) <<- lab
}
for (j in c("taxe_efficace", "rattrapage_diesel", "enfant_CC", "mode_vie_ecolo", "schiste_approbation",
"transferts_inter_a", "transferts_inter_a_info", "transferts_inter", "taxe_approbation",
"taxe_feedback_approbation", "taxe_progressif_approbation", "taxe__20_approbation", "taxe_20_30_approbation",
"taxe_30_40_approbation", "taxe_40_50_approbation", "taxe_50_70_approbation", "taxe_70__approbation"
)) {
s[j][[1]] <<- as.item(as.character(s[j][[1]]),
labels = structure(c("","Non","NSP","Oui"), names = c("NA","Non","NSP","Oui")),
missing.values = c("","NSP"), annotation=attr(s[j][[1]], "label"))
}
for (j in c("mode_chauffage", "chauffage", "parle_CC", "cause_CC", "effets_CC", "transports_frequence",
"schiste_CC", "transports_avis", "transports_travail_actif", "transports_travail_commun", "interet_politique",
"perte_tva", "perte_fuel", "perte_chauffage"
)) {
s[j][[1]] <<- as.item(as.character(s[j][[1]]),
labels = structure(levels(factor(s[j][[1]])), names = levels(factor(s[j][[1]]))),
missing.values = c("","NSP"), annotation=paste(attr(s[j][[1]], "label"), "(char)")) # TODO: pb
}
# TODO: as.item region_CC, gain_taxe_fuel, gain_taxe_chauffage, gain_taxe, gain_taxe_feedback, gain_taxe_progressif, gain_taxe_cible, interet politique, gilets jaunes, transports_travail_commun, transports_travail_actif?
for (j in names(s)) {
if (grepl('_perdant_|_gagnant_|_benefices_|_problemes_|ges_|responsable_|generation_CC|enfant_CC_pour|changer_|gilets_jaunes_', j)) {
s[[j]][s[[j]]!=""] <<- TRUE
s[[j]][is.na(s[[j]])] <<- FALSE
}
}
for (k in c("perte_tva", "perte_fuel", "perte_chauffage")) {
temp <-  2 * (s[[k]]=="Oui, beaucoup plus") + (s[[k]]=="Oui, un peu plus") - (s[[k]]=="Non, un peu moins") - 2 * (s[[k]]=="Non, beaucoup moins")
s[[k]] <<- as.item(temp, labels = structure(c(-2:2),
names = c("Beaucoup moins","Un peu moins","= Moyenne","Un peu plus","Beaucoup plus")),
# names = c("Non, beaucoup moins","Non, un peu moins","Autant que la moyenne","Oui, un peu plus","Oui, beaucoup plus")),
annotation=Label(s[[k]]))
}
for (k in c(131:139,141:148)) {
temp <-  2 * (s[k][[1]]=="Oui, tout à fait") + (s[k][[1]]=="Oui, plutôt") - (s[k][[1]]=="Non, pas vraiment") - 2 * (s[k][[1]]=="Non, pas du tout")
s[k][[1]] <<- as.item(temp, labels = structure(c(-2:2),
names = c("Pas du tout","Pas vraiment","Indifférent/NSP","Plutôt","Tout à fait")),
# names = c("Non, pas du tout","Non, pas vraiment","Indifférent ou Ne sais pas","Oui, plutôt","Oui, tout à fait")),
annotation=Label(s[k][[1]]))
}
temp <- (s$parle_CC=='Plusieurs fois par an') + 2*(s$parle_CC=='Plusieurs fois par mois') - (s$parle_CC=="NSP")
s$parle_CC <<- as.item(temp, labels = structure(c(-1:2),
names = c("NSP","Presque jamais","Plusieurs fois par an","Plusieurs fois par mois")),
missing.values = -1, annotation=Label(s$parle_CC))
temp <- grepl("Faibles", s$effets_CC) + 2*grepl("Graves", s$effets_CC) + 3*grepl("Désastreux", s$effets_CC) + 4*grepl("Cataclysmiques", s$effets_CC) - (s$effets_CC=="NSP")
s$effets_CC <<- as.item(temp, labels = structure(c(-1:4),
names = c("NSP","Insignifiants","Faibles","Graves","Désastreux","Cataclysmiques")),
# names = c("NSP","Insignifiants, voire bénéfiques","Faibles, car les humains sauraient vivre avec","Graves, car il y aurait plus de catastrophes naturelles","Désastreux, les modes de vie seraient largement altérés","Cataclysmiques, l'humanité disparaîtrait")),
missing.values = -1, annotation=Label(s$effets_CC))
temp <- (s$transports_frequence=="Entre quatre fois par jour et une fois par heure") + 2*(s$transports_frequence=="Une ou deux fois par heure") + 3*(s$transports_frequence=="Plus que trois fois par heure") - (s$transports_frequence=="NSP")
s$transports_frequence <<- as.item(temp, labels = structure(c(-1:3),
names = c("NSP","< 3/jour","1/h - 4/jour","1/h - 2/h","> 3/heure")),
# names = c("NSP","Moins de trois fois par jour","Entre quatre fois par jour et une fois par heure","Une ou deux fois par heure","Plus que trois fois par heure")),
missing.values = -1, annotation=Label(s$transports_frequence))
temp <- (s$transports_avis=="Limitée, mais suffisante") + 2*(s$transports_avis=="Convenable, mais devrait être accrue") + 3*(s$transports_avis=="Satisfaisante") - (s$transports_avis=="NSP")
s$transports_avis <<- as.item(temp, labels = structure(c(-1:3),
names = c("NSP","Insuffisante","Limitée","Convenable","Satisfaisante")),
# names = c("NSP","Insuffisante","Limitée, mais suffisante","Convenable, mais devrait être accrue","Satisfaisante")),
missing.values = -1, annotation=Label(s$transports_avis))
# s$compris_depenses <<- as.item(as.character(s$compris_depenses),
s$compris_depenses <<- as.item(as.character(s$compris_depenses),
labels = structure(c("","Oui","Non","Bug: le graphique ne s'est pas affiché correctement."), names = c("NA","Oui","Non","Bug")), annotation=attr(s$compris_depenses, "label"))
s$mode_chauffage <<- as.item(s$mode_chauffage,
labels = structure(c("","Chauffage individuel","Chauffage collectif", "NSP"), names = c("NA","individuel","collectif","NSP")), missing.values='NSP', annotation=Label(s$mode_chauffage))
s$chauffage <<- as.item(s$chauffage,
labels = structure(c("Gaz de ville", "Butane, propane, gaz en citerne", "Fioul, mazout, pétrole", "Électricité", "Bois, solaire, géothermie, aérothermie (pompe à chaleur)", "Autre","NSP"), names = c("Gaz réseau", "Gaz bouteille", "Fioul", "Électricité", "Bois, solaire...", "Autre", "NSP")), missing.values='NSP', annotation=Label(s$chauffage))
s$schiste_CC <<- as.item(s$schiste_CC,
labels = structure(c("","Elle est malvenue : il faudrait mettre fin aux émissions, pas seulement les ralentir","Elle est valable : toute baisse des émissions va dans la bonne direction", "NSP"), names = c("NA","malvenue","valable","NSP")), missing.values='NSP', annotation=Label(s$schiste_CC))
s$cause_CC <<- as.item(s$cause_CC,
labels = structure(c("n'est pas une réalité","est principalement dû à la variabilité naturelle du climat", "est principalement dû à l'activité humaine", "NSP"), names = c("n'existe pas","naturel","anthropique","NSP")), missing.values='NSP', annotation=Label(s$cause_CC))
s$gauche_droite <<- pmax(-2,pmin(2,-2 * grepl("extrême gauche", s$extr_gauche) - grepl("De gauche", s$gauche) + grepl("De droite", s$droite) + 2 * grepl("extrême droite", s$extr_droite)))
is.na(s$gauche_droite) <<- (s$gauche_droite == 0) & !grepl("centre", s$centre)
s$Gauche_droite <<- as.factor(s$gauche_droite)
s$gauche_droite <<- as.item(as.numeric(as.vector(s$gauche_droite)), labels = structure(c(-2:2),
names = c("Extrême gauche","Gauche","Centre","Droite","Extrême droite")), annotation=attr(s$gauche_droite, "label"))
levels(s$Gauche_droite) <<- c("Extreme-left", "Left", "Center", "Right", "Extreme-right", "Indeterminate")
s$Gauche_droite[is.na(s$Gauche_droite)] <<- "Indeterminate"
# temp <- label(s$diplome)
# s$diplome <<- factor(s$diplome, c("","Aucun diplôme","Brevet des collèges","CAP ou BEP","Baccalauréat","Bac +2 (BTS, DUT, DEUG, écoles de formation sanitaires et sociales...)","Bac +3 (licence...)","Bac +5 ou plus (master, école d'ingénieur ou de commerce, doctorat, médecine, maîtrise, DEA, DESS...)","NSP (Ne se prononce pas)") )
# label(s$diplome) <<- temp
# temp <- label(s$interet_politique)
# s$interet_politique <<- factor(s$interet_politique, c("","Beaucoup","Un peu","Presque pas (ou pas du tout)","NSP","NSP (Je ne veux pas répondre)","Q20 - À quel point êtes-vous intéressé·e par la politique ?"))
# label(s$interet_politique) <<- temp
s$revenu_conjoint <<- s$rev_tot - s$revenu
s$revdisp <<- round((s$rev_tot -  irpp(s$rev_tot, s$nb_adultes, s$taille_menage)))
s$uc <<- uc(s$taille_menage, s$nb_14_et_plus)
s$niveau_vie <<- s$revdisp / s$uc
s$Age <<- (s$age == "18 à 24 ans") + 2*(s$age == "25 à 34 ans") + 3.3*(s$age == "35 à 49 ans") + 4.6*(s$age == "50 à 64 ans") + 7*(s$age == "65 ans ou plus")
# s$age <<- as.factor(as.character(s$age))
s$Diplome <<- (s$diplome == "Brevet des collèges") + 2*(s$diplome=="CAP ou BEP") + 3*(s$diplome=="Baccalauréat") + 4*(s$diplome=="Bac +2 (BTS, DUT, DEUG, écoles de formation sanitaires et sociales...)") + 5*(s$diplome=="Bac +3 (licence...)") + 6*(s$diplome=="Bac +5 ou plus (master, école d'ingénieur ou de commerce, doctorat, médecine, maîtrise, DEA, DESS...)") - (s$diplome=="NSP (Ne se prononce pas)")
s$diplome4 <<- as.character(s$diplome)
s$diplome4[s$Diplome<2] <<- "Aucun diplôme ou brevet"
s$diplome4[s$Diplome>3] <<- "Supérieur"
# s$Region <<- as.factor(as.character(s$region))
# s$taille_agglo <<- as.factor(gsub("[[:alpha:] ]", "", s$taille_agglo))
# s <<- s[s$taille_agglo!="%1%",] # TODO: taille_agglo as.item
s$nb_vehicules <<- (s$nb_vehicules_texte=='Un') + 2*(s$nb_vehicules_texte=='Deux ou plus')
s$variante_partielle <<- 'NA'
s$variante_partielle[!is.na(s$gain_taxe_chauffage)] <<- 'c'
s$variante_partielle[!is.na(s$gain_taxe_fuel)] <<- 'f'
label(s$variante_partielle) <<- "variante_partielle: Variante aléatoire (c/f) de la taxe partielle sur le chauffage ou les carburants (=fuel)"
# s$gain_fuel <- NA
s$gain_fuel[s$gain_taxe_fuel=='Non affecté' & s$variante_partielle=='f'] <<- 0
s$gain_fuel[s$gain_taxe_fuel=='Gagnant' & s$variante_partielle=='f'] <<- 1 + as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$gain_taxe_fuel_hausse[s$gain_taxe_fuel=='Gagnant' & s$variante_partielle=='f']))))/25
s$gain_fuel[s$gain_taxe_fuel=='Perdant' & s$variante_partielle=='f'] <<- - 1 - as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$gain_taxe_fuel_baisse[s$gain_taxe_fuel=='Perdant' & s$variante_partielle=='f']))))/25
label(s$gain_fuel) <<- "gain_fuel: Catégorie de gain-perte de pouvoir d'achat par UC, suite à hausse taxe carburants compensée, dans [-6;5] (seuils: -160/-110/-70/-40/-15/0/10/20/30/40)"
s$gain_chauffage[s$gain_taxe_chauffage=='Non affecté' & s$variante_partielle=='c'] <<- 0
s$gain_chauffage[s$gain_taxe_chauffage=='Gagnant' & s$variante_partielle=='c'] <<- 1 + as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$gain_taxe_chauffage_hausse[s$gain_taxe_chauffage=='Gagnant' & s$variante_partielle=='c']))))/25
s$gain_chauffage[s$gain_taxe_chauffage=='Perdant' & s$variante_partielle=='c'] <<- - 1 - as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$gain_taxe_chauffage_baisse[s$gain_taxe_chauffage=='Perdant' & s$variante_partielle=='c']))))/25
label(s$gain_chauffage) <<- "gain_fuel: Catégorie de gain-perte de pouvoir d'achat par UC, suite à hausse taxe chauffage compensée, dans [-6;5] (seuils: -160/-110/-70/-40/-15/0/10/20/30/40)"
s$gain[s$gain_taxe=='Non affecté' & s$variante_partielle!='NA'] <<- 0
s$gain[s$gain_taxe=='Gagnant' & s$variante_partielle!='NA'] <<- 1 + as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$gain_taxe_hausse[s$gain_taxe=='Gagnant' & s$variante_partielle!='NA']))))/50
s$gain[s$gain_taxe=='Perdant' & s$variante_partielle!='NA'] <<- - 1 - as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$gain_taxe_baisse[s$gain_taxe=='Perdant' & s$variante_partielle!='NA']))))/50
label(s$gain) <<- "gain: Catégorie de gain-perte de pouvoir d'achat par UC, suite à hausse taxe carbone compensée, dans [-6;5] (seuils: -280/-190/-120/-70/-30/0/20/40/60/80)"
s$Elasticite_chauffage <<- as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$elasticite_chauffage))))
s$Elasticite_chauffage <<- (s$Elasticite_chauffage==0)*1.5 + (s$Elasticite_chauffage==3)*6.5 + (s$Elasticite_chauffage>3)*(s$Elasticite_chauffage + 5) # Take the average of thresholds, take 40% for >30%
s$Elasticite_chauffage <<- - round(s$Elasticite_chauffage / 30, 2) # converts into elasticity
label(s$Elasticite_chauffage) <<- "Elasticite_chauffage: Élasticité-prix des dépenses de chauffage des Français, calculée en prenant la valeur moyenne des intervalles proposées (seuils à 0/3/10/20/30% pour une hausse de 30%)"
s$Elasticite_chauffage_perso <<- as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$elasticite_chauffage_perso))))
s$Elasticite_chauffage_perso <<- (s$Elasticite_chauffage_perso==0)*1.5 + (s$Elasticite_chauffage_perso==3)*6.5 + (s$Elasticite_chauffage_perso>3)*(s$Elasticite_chauffage_perso + 5) # Take the average of thresholds, take 40% for >30%
s$Elasticite_chauffage_perso <<- - round(s$Elasticite_chauffage_perso / 30, 2) # converts into elasticity
label(s$Elasticite_chauffage_perso) <<- "Elasticite_chauffage_perso: Élasticité-prix des dépenses de chauffage du ménage, calculée en prenant la valeur moyenne des intervalles proposées (seuils à 0/3/10/20/30% pour une hausse de 30%)"
s$Elasticite_fuel <<- as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$elasticite_fuel))))
s$Elasticite_fuel <<- (s$Elasticite_fuel==0)*1.5 + (s$Elasticite_fuel==3)*6.5 + (s$Elasticite_fuel>3)*(s$Elasticite_fuel + 5) # Take the average of thresholds, take 40% for >30%
s$Elasticite_fuel <<- - round(s$Elasticite_fuel / 30, 2) # converts into elasticity
label(s$Elasticite_fuel) <<- "Elasticite_fuel: Élasticité-prix des dépenses de carburants des Français, calculée en prenant la valeur moyenne des intervalles proposées (seuils à 0/3/10/20/30% pour une hausse de 0.5€/L)"
s$Elasticite_fuel_perso <<- as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$elasticite_fuel_perso))))
s$Elasticite_fuel_perso <<- (s$Elasticite_fuel_perso==0)*1.5 + (s$Elasticite_fuel_perso==3)*6.5 + (s$Elasticite_fuel_perso>3)*(s$Elasticite_fuel_perso + 5) # Take the average of thresholds, take 40% for >30%
s$Elasticite_fuel_perso <<- - round(s$Elasticite_fuel_perso / 30, 2) # converts into elasticity
label(s$Elasticite_fuel_perso) <<- "Elasticite_fuel_perso: Élasticité-prix des dépenses de carburants du ménage, calculée en prenant la valeur moyenne des intervalles proposées (seuils à 0/3/10/20/30% pour une hausse de 0.5€/L)"
s$variante_taxe_info <<- "p"
s$variante_taxe_info[s$gain_taxe_feedback!=""] <<- "f"
label(s$variante_taxe_info) <<- "variante_taxe_info: (f/p) Variante aléatoire entre f: feedback (=simulation, 2/3) et p: progressivité (1/3), dans l'information donnée sur la taxe compensée avant de demander à nouveau le gain et l'approbation, ainsi que les bénéfices et problèmes"
for (v in c('CC', 'sante', 'circulation', 'revenu', 'pauvres', 'independance', 'enjeu', 'aucun', 'autre_choix', 'autre')) {
s[[paste('taxe_benefices_', v, sep="")]] <<- s[paste('taxe_benefices_', v, '_p', sep="")][[1]]
s[[paste('taxe_benefices_', v, sep="")]][s$variante_taxe_info=='f'] <<- s[paste('taxe_benefices_', v, '_f', sep="")][[1]][s$variante_taxe_info=='f']
label(s[[paste('taxe_benefices_', v, sep="")]]) <<- sub("_f: \\* ", ": ", label(s[paste('taxe_benefices_', v, '_f', sep="")][[1]]))
}
for (v in c('inefficace', 'alternatives', 'ruraux', 'revenu', 'pauvres', 'economie', 'pretexte', 'aucun', 'autre_choix', 'autre')) {
s[[paste('taxe_problemes_', v, sep="")]] <<- s[paste('taxe_problemes_', v, '_p', sep="")][[1]]
s[[paste('taxe_problemes_', v, sep="")]][s$variante_taxe_info=='f'] <<- s[paste('taxe_problemes_', v, '_f', sep="")][[1]][s$variante_taxe_info=='f']
label(s[[paste('taxe_problemes_', v, sep="")]]) <<- sub("_f: \\* ", ": ", label(s[paste('taxe_problemes_', v, '_f', sep="")][[1]]))
}
s$cible[s$cible20==1] <<- 20
s$cible[s$cible30==1] <<- 30
s$cible[s$cible40==1] <<- 40
s$cible[s$cible50==1] <<- 50
label(s$cible) <<- "cible: Ciblage du recyclage de la hausse de la taxe carbone, attribué en fonction du revenu du répondant et de son ménage (20/30/40/50% les plus modestes)"
# TODO: manage to use tidyverse without erasing observations
# s <<- merge(s, s %>% gather(key = temp, value = gain_cible, c(gain_taxe__20, gain_taxe_20_30, gain_taxe_30_40, gain_taxe_40_50, gain_taxe_50_70, gain_taxe_70_)) %>% filter(gain_cible != "") %>% select(-temp), sort=FALSE) # Warning: attributes are not identical across measure variables; they will be dropped
# label(s$gain_cible) <<- "gain_cible: Ménage Gagnant/Non affecté/Perdant avec hausse taxe carbone à recyclage ciblé (cible: 20/30/40/50% les plus modestes)"
# s <<- merge(s, s %>% gather(key = temp, value = taxe_cible_approbation, c(taxe__20_approbation, taxe_20_30_approbation, taxe_30_40_approbation, taxe_40_50_approbation, taxe_50_70_approbation, taxe_70__approbation)) %>% filter(taxe_cible_approbation != "") %>% select(-temp), sort=FALSE)
# label(s$taxe_cible_approbation) <<- "taxe_cible_approbation: Approbation d'une hausse de la taxe carbone compensée par recyclage ciblé (cible: 20/30/40/50% les plus modestes)"
#
#   # s <<- s %>% gather(key = temp, value = km, c(km_0, km_1, km_2)) %>% filter(km != "") %>% select(-temp) # erases km_0, km_1, km_2
# s <<- merge(s, s %>% gather(key = temp, value = km, c(km_0, km_1, km_2)) %>% filter(km != "") %>% select(-temp), sort=FALSE) # Warning: attributes are not identical across measure variables; they will be dropped
# label(s$km) <<- "km: Nombre de kilomètres parcourus lors des 12 derniers mois en voiture ou moto (par le répondant pour nb_vehicules=0, par les véhicules sinon)"
#
# s <<- merge(s, s %>% gather(key = temp, value = conso, c(conso_1, conso_2)) %>% filter(conso != "") %>% select(-temp), sort=FALSE)
# label(s$conso) <<- "conso:  Consommation moyenne du véhicule (en litres aux 100 km)"
s$gain_cible[!is.na(s$gain_taxe__20)] <<- s$gain_taxe__20[!is.na(s$gain_taxe__20)]
s$gain_cible[!is.na(s$gain_taxe_20_30)] <<- s$gain_taxe_20_30[!is.na(s$gain_taxe_20_30)]
s$gain_cible[!is.na(s$gain_taxe_30_40)] <<- s$gain_taxe_30_40[!is.na(s$gain_taxe_30_40)]
s$gain_cible[!is.na(s$gain_taxe_40_50)] <<- s$gain_taxe_40_50[!is.na(s$gain_taxe_40_50)]
s$gain_cible[!is.na(s$gain_taxe_50_70)] <<- s$gain_taxe_50_70[!is.na(s$gain_taxe_50_70)]
s$gain_cible[!is.na(s$gain_taxe_70_)] <<- s$gain_taxe_70_[!is.na(s$gain_taxe_70_)]
label(s$gain_cible) <<- "gain_cible: Ménage Gagnant/Non affecté/Perdant avec hausse taxe carbone à recyclage ciblé (cible: 20/30/40/50% les plus modestes)"
s$taxe_cible_approbation[!is.na(s$taxe__20_approbation)] <<- s$taxe__20_approbation[!is.na(s$taxe__20_approbation)]
s$taxe_cible_approbation[!is.na(s$taxe_20_30_approbation)] <<- s$taxe_20_30_approbation[!is.na(s$taxe_20_30_approbation)]
s$taxe_cible_approbation[!is.na(s$taxe_30_40_approbation)] <<- s$taxe_30_40_approbation[!is.na(s$taxe_30_40_approbation)]
s$taxe_cible_approbation[!is.na(s$taxe_40_50_approbation)] <<- s$taxe_40_50_approbation[!is.na(s$taxe_40_50_approbation)]
s$taxe_cible_approbation[!is.na(s$taxe_50_70_approbation)] <<- s$taxe_50_70_approbation[!is.na(s$taxe_50_70_approbation)]
s$taxe_cible_approbation[!is.na(s$taxe_70__approbation)] <<- s$taxe_70__approbation[!is.na(s$taxe_70__approbation)]
label(s$taxe_cible_approbation) <<- "taxe_cible_approbation: Approbation d'une hausse de la taxe carbone compensée par recyclage ciblé (cible: 20/30/40/50% les plus modestes)"
s$categorie_cible[!is.na(s$taxe__20_approbation)] <<- '_20'
s$categorie_cible[!is.na(s$taxe_20_30_approbation)] <<- '20_30'
s$categorie_cible[!is.na(s$taxe_30_40_approbation)] <<- '30_40'
s$categorie_cible[!is.na(s$taxe_40_50_approbation)] <<- '40_50'
s$categorie_cible[!is.na(s$taxe_50_70_approbation)] <<- '50_70'
s$categorie_cible[!is.na(s$taxe_70__approbation)] <<- '70_'
label(s$categorie_cible) <<- "categorie_cible: Catégorie de revenu du répondant (et de son ménage) taxe à recyclage ciblé - Catégories: percentile <20/20-30/30-40/40-50/50-70/>70, sachant que revenu_conjoint détermine la catégorie quand percentile de revenu > 70 (780/1140/1430/1670/2220)"
s$km[!is.na(s$km_0)] <<- s$km_0[!is.na(s$km_0)]
s$km[!is.na(s$km_1)] <<- s$km_1[!is.na(s$km_1)]
s$km[!is.na(s$km_2)] <<- s$km_2[!is.na(s$km_2)]
label(s$km) <<- "km: Nombre de kilomètres parcourus lors des 12 derniers mois en voiture ou moto (par le répondant pour nb_vehicules=0, par les véhicules sinon)"
s$conso[!is.na(s$conso_1)] <<- s$conso_1[!is.na(s$conso_1)]
s$conso[!is.na(s$conso_2)] <<- s$conso_2[!is.na(s$conso_2)]
label(s$conso) <<- "conso:  Consommation moyenne du véhicule (en litres aux 100 km)"
s$hausse_diesel[s$nb_vehicules == 0] <<- 0.5*6.39/100 * s$km * 1.4 * (1 - 0.4) * 0.090922 # share_diesel * conso * km * price * (1-elasticite) * price_increase
s$hausse_diesel[s$nb_vehicules == 1] <<- (s$fuel_1=='Diesel') * s$conso * s$km * 1.4 * (1 - 0.4) * 0.090922
s$hausse_diesel[s$nb_vehicules == 1] <<- ((s$fuel_2_1=='Diesel')*2/3 + (s$fuel_2_2=='Diesel')/3) * s$conso * s$km * 1.4 * (1 - 0.4) * 0.090922
for (i in 0:10) s[[paste('dep', i, 'en_position', sep='_')]] <<- NA
for (i in 0:10) {
for (o in 1:nrow(s)) {
j <- s[[paste('en_position', i, sep='_')]][o]
if (!is.na(j)) s[[paste('dep', j, 'en_position', sep='_')]][o] <<- i
}
}
# TODO: remove useless colonnes, such as _f/_p
# TODO: qualité, connaissances CC, opinions CC, gilets jaunes, duree_info, perte_tva/fuel, si_/non_, gaz-fioul -> T/F, transferts_inter/variante, enfant
}
prepare_s(exclude_screened=FALSE, exclude_speeder=FALSE, only_finished=FALSE)
sa <- s
# prepare_s(exclude_screened=FALSE, exclude_speeder=FALSE)
# se <- s
# prepare_s(exclude_screened=FALSE)
# sp <- s
prepare_s()
##### Transferts inter #####
decrit(s$transferts_inter, weights = s$weight)
load('p_data.RData')
t <- merge(s, t_transferts_inter_a, all=T)
t$transferts_inter[!is.na(t$taille_foyer)] <- t$transferts_inter_a[!is.na(t$taille_foyer)]
summary(lm((transferts_inter=='Oui') ~ transferts_inter_info, data = t)) # 0
decrit(t$transferts_inter, weights = t$weight)
decrit(t$transferts_inter)
decrit(t$transferts_inter, weights = t$weight, miss=T)
decrit(t$transferts_inter, miss=T)
CImedian(t$transferts_inter=='Oui')
CImedian <- function(vec) { # 95% confidence interval
res <- tryCatch(unlist(ci.median(vec[!is.na(vec) & vec!=-1])), error=function(e) {print('NA')})
return(paste(res[paste('ci.lower')], res[paste('ci.median')], res[paste('ci.upper')], length(which(!is.na(vec) & vec!=-1)))) }
CImedian(t$transferts_inter=='Oui')
CImedian((t$transferts_inter=='Oui'))
binconf(transferts_inter=='Oui')
binconf(t$transferts_inter=='Oui')
binconf(t$transferts_inter=='Oui', !is.missing(t$transferts_inter))
binconf(sum(t$weight[t$transferts_inter=='Oui']), sum(t$weight[!is.missing(t$transferts_inter)]))
sum(t$weight[t$transferts_inter=='Oui'])
binconf(sum(t$weight[!is.na(t$transferts_inter) & t$transferts_inter=='Oui']), sum(t$weight[!is.missing(t$transferts_inter)]))
decrit(t$transferts_inter, weights = t$weight, miss=T)
decrit(t$transferts_inter, weights = t$weight)
binconf(sum(t$weight[!is.na(t$transferts_inter) & t$transferts_inter=='Oui']), sum(t$weight[!is.na(t$transferts_inter)]))
categories_depenses <- c("sante", "education", "retraites", "securite", "recherche", "justice", "armee", "protection", "infrastructures", "loisirs", "aide")
i <- 0
for (v in categories_depenses) {
print(summary(lm(s[[paste('variation', v, sep='_')]] ~ s[[paste('dep', i, 'en_position', sep='_')]], weights=s$weight)))
i <- i+1 }
# *** pour justice, loisirs, éducation
t_depenses$aleatoire <- FALSE
s$aleatoire <- TRUE
d <- merge(s, t_depenses, all=T)
for (v in categories_depenses) {  print(summary(lm(d[[paste('variation', v, sep='_')]] ~ d$aleatoire))) } # * -: armee, securite, aide,
decrit(d$variation_aide)
decrit(s$variation_aide)
decrit(s$depenses_confiant)
decrit(s$depenses_confiant[is.na(s$variation_aide)])
decrit(t_depenses$variation_aide)
for (v in categories_depenses) { # why not use tidyverse's gather?
temp <- d[, c(paste('variation', v, sep='_'), 'weight')]
temp$categorie <- v
temp$variation <- temp[[paste('variation', v, sep='_')]]
if (exists('dep')) dep <- merge(dep, temp, all=T)
else dep <- temp
}
dep$categorie <- relevel(as.factor(dep$categorie), "infrastructures")
summary(lm(variation ~ categorie, data=dep)) # answers are not random, i.e. average depends significantly on category
package("memisc")
package("Hmisc")
package("DT")
package("pastecs")
package("lsr")
package("ggplot2")
package("stringr")
package("survey")
package("plotly")
package("plyr")
package("quantreg")
package("asbio")
package("corrplot")
package("spatstat")
package("quantreg")
# R tips: library(pastecs) stat.desc(mydata)
#         ordered(mydata) instead of as.item for likert-scale
#         scatterplot(SAT~Age|Gender, id.method="identify", data=mydata)
#         jitter instead of rnorm
#         read_csv instead of read.csv
package("foreign")
Sys.setenv("plotly_username" = "bixiou")
Sys.setenv("plotly_api_key" = "701bafmnv9")
oui_non(margin_l=430, en=TRUE, title="<b>Opinions of French people on global policies</b><br>", file="bars_world", c("humanisme","taxe_mondiale_riches", "revenu_base_mondial", "taxe_mondiale_capital", "cap_and_share", "assemblee_climat", "transferts_inter_a", "assemblee_finance"),
c("<b>I want that humans insure to themselves the necessary conditions</b>  <br><b>for well-being:</b> access to drinkable water, food, healthcare, <br>a clean environment, security, housing, an education, information",
"Establishment of a <b>global tax on the richest 1%</b> <br>to finance the development of low-income countries <br>(vaccination, access to drinkable water, healthcare, education...)",
"Establishment of a <b>global basic income</b>. <br>Around 20€/month would be allocated to each adult,<br>which would double the income of the poorest billion of humans",
"Establishment of a <b>global tax on wealth</b>",
"<b>Cap and Share</b> system: a global tax on emissions <br> of greenhouse gas emissions funding a global basic income <br> of about 20€/month for each adult",
"Establishment of a <b>global assembly</b> (elected proportionally <br>on global lists) whose only role would be to take <br>measures needed to <b>tackle climate change</b>",
"<b>Transferring 5% of the income of rich countries to poor countries</b>",
"Establishment of a <b>global assembly</b> (elected proportionally <br>on global lists) whose only role would be to <b>regulate</b> <br><b>the financial system</b> (notably to avoid financial crises)"))
package("foreign")
package("memisc")
package("Hmisc")
package("DT")
package("pastecs")
package("lsr")
package("ggplot2")
package("stringr")
package("survey")
package("plotly")
package("plyr")
package("quantreg")
package("asbio")
package("corrplot")
package("spatstat")
package("quantreg")
oui_non(margin_l = 480, data=f, en=TRUE, file="choix_impot_en", vars=c("choix_impot_repartition", "choix_impot_satisfaisant", "choix_impot_sondage", "choix_impot_deliberation", "choix_impot_referendum"),
labels=c("Should the State determine income tax rates<br> to target a given distribution?",
"Currently, income tax rates are proposed <br>by the government and adopted by the Parliament. <br>Is this process satisfactory?",
"Should tax reforms respect typical preferences<br> obtained by a poll?",
"Should tax reforms respect typical preferences <br> obtained by a national vote preceded by local deliberations?",
"Should tax reforms be adopted by referendum?"))
setwd("/var/www/beliefs_climate_policies/code")
package('pwr')
package("foreign")
package("memisc")
package("DT")
package("pastecs")
package("lsr")
package("ggplot2")
package("stringr")
package("survey")
package("plotly")
package('gdata')
package('tidyverse')
package("Hmisc")
prepare_s(exclude_screened=FALSE, exclude_speeder=FALSE, only_finished=FALSE)
sa <- s
# prepare_s(exclude_screened=FALSE, exclude_speeder=FALSE)
# se <- s
# prepare_s(exclude_screened=FALSE)
# sp <- s
prepare_s()
load('p_data.RData')
t <- merge(s, t_transferts_inter_a, all=T)
t$transferts_inter[!is.na(t$taille_foyer)] <- t$transferts_inter_a[!is.na(t$taille_foyer)]
decrit(t$transferts_inter, weights = t$weight)
decrit(t$transferts_inter, weights = t$weight, miss=T)
decrit(t$transferts_inter, miss=T)
1179-233
binconf(sum(t$weight[!is.na(t$transferts_inter) & t$transferts_inter=='Oui']), sum(t$weight[!is.missing(t$transferts_inter)]))
binconf(sum(t$weight[!is.na(t$transferts_inter) & t$transferts_inter=='Oui']), sum(t$weight[!is.na(t$transferts_inter)]))
summary(lm((transferts_inter=='Oui') ~ transferts_inter_info, data = t)) # 0
summary(lm((transferts_inter=='Oui') ~ transferts_inter_info, data = t, subset = transferts_inter!='NSP')) # 0
summary(lm((transferts_inter=='Oui') ~ transferts_inter_info, data = t, weights = t$weight)) # 0
summary(lm((transferts_inter=='Oui') ~ transferts_inter_info, data = t, subset = transferts_inter!='NSP', weights = t$weight)) # 0
##### Dépenses publiques #####
categories_depenses <- c("sante", "education", "retraites", "securite", "recherche", "justice", "armee", "protection", "infrastructures", "loisirs", "aide")
categories_depenses <- c("sante", "education", "retraites", "securite", "recherche", "justice", "armee", "protection", "infrastructures", "loisirs", "aide")
i <- 0
for (v in categories_depenses) {
print(summary(lm(s[[paste('variation', v, sep='_')]] ~ s[[paste('dep', i, 'en_position', sep='_')]], weights=s$weight)))
i <- i+1 }
# *** pour justice, loisirs, éducation
t_depenses$aleatoire <- FALSE
s$aleatoire <- TRUE
d <- merge(s, t_depenses, all=T)
summary(lm(d$variation_aide ~ d$aleatoire))
summary(lm(d$variation_aide ~ d$aleatoire, weights = d$weight))
summary(rq(d$variation_aide ~ d$aleatoire, weights = d$weight))
package("quantreg")
summary(rq(d$variation_aide ~ d$aleatoire, weights = d$weight))
summary(lm(d$variation_aide ~ d$aleatoire, weights = d$weight))
decrit(d$variation_aide)
decrit(s$variation_aide)
summary(lm((transferts_inter=='Oui') ~ transferts_inter_info, data = t)) # 0
summary(lm((transferts_inter=='Oui') ~ transferts_inter_info, data = t, subset = transferts_inter!='NSP')) # 0
summary(lm((transferts_inter=='Oui') ~ transferts_inter_info, data = t, weights = t$weight)) # 0
summary(lm((transferts_inter=='Oui') ~ transferts_inter_info, data = t, subset = transferts_inter!='NSP', weights = t$weight)) # 0
summary(lm((transferts_inter=='Oui') ~ transferts_inter_info, data = t, subset = transferts_inter!='NSP')) # 0
length(which(!is.na(s$depenses_confiant)))/nrow(s) # 27%
package('pwr')
package("foreign")
package("memisc")
package("DT")
package("pastecs")
package("lsr")
package("ggplot2")
package("stringr")
package("survey")
package("plotly")
package('gdata')
package('tidyverse')
package("Hmisc")
prepare_s()
categories_depenses <- c("sante", "education", "retraites", "securite", "recherche", "justice", "armee", "protection", "infrastructures", "loisirs", "aide")
i <- 0
for (v in categories_depenses) {
print(summary(lm(s[[paste('variation', v, sep='_')]] ~ s[[paste('dep', i, 'en_position', sep='_')]], weights=s$weight)))
i <- i+1 }
# *** pour justice, loisirs, éducation
t_depenses$aleatoire <- FALSE
s$aleatoire <- TRUE
d <- merge(s, t_depenses, all=T)
decrit(d$variation_aide)
prepare_s(exclude_screened=FALSE, exclude_speeder=FALSE, only_finished=FALSE)
sa <- s
prepare_s()
prepare_s <- function(exclude_speeder=TRUE, exclude_screened=TRUE, only_finished=TRUE) { # , exclude_quotas_full=TRUE
# setwd("/home/adrien/Google Drive/Economie/Travail/enquete/codes")
# setwd("C:/Users/a.fabre/Google Drive/Economie/Travail/enquete/codes")
# pes <<- read.csv("fin.csv", sep=";")
# s <<- read.delim("politique.tsv", fileEncoding="UTF-16")
# f_data <- read.delim("fin.tsv", fileEncoding="UTF-16")
s <<- read_csv("survey.csv")
for (i in 1:length(s)) { label(s[[i]]) <<- toString(s[i][[1]][1]) } # Use the first line to create variable names labels then remove it - to run only once
s <<- s[-c(1,2),]
# if (exclude_screened) { s <<- s[s$Q_TerminateFlag=="",] } # remove Screened
# if (exclude_speeder) { s <<- s[n(s$`Duration (in seconds)`) > 540,] } # remove speedest
# if (exclude_quotas_full) { s <<- s[s[101][[1]] %in% c(1:5),]  } # remove those with a problem for the taille d'agglo
# if (exclude_quotas_full) { s <<- s[s$Q_TerminateFlag=="",]  } # remove those with a problem for the taille d'agglo
# if (only_finished) { s <<- s[as.vector(s$Finished)=="True",] }
relabel_and_rename_s()
print(paste(length(which(is.na(s$taille_agglo))), "tailles d'agglo sont manquantes"))
s <<- s[!is.na(s$taille_agglo),]
convert_s() # TODO: check the Warnings, why s is empty when exclude_screened?
s$sample <<- "a"
s$sample[s$finished=="True"] <<- "e"
s$sample[s$finished=="True" & n(s$duree) > 540] <<- "p"
s$sample[s$finished=="True" & n(s$duree) > 540 & s$test_qualite=='Un peu'] <<- "f" # TODO:"q"? excluded because out of quotas
s$sample[s$finished=="True" & n(s$duree) > 540 & s$exclu==""] <<- "r"
# s <<- s[-which(is.element(s$id, s$id[duplicated(s$id)]) & !duplicated(s$id) & is.na(s$revenu)),] # TODO: check duplicates
if (exclude_screened) { s <<- s[is.na(s$exclu),] } # remove Screened
if (exclude_speeder) { s <<- s[s$duree > 420,] } # remove speedest /!\ was 540 before 22-02-11:00 (EST Coast time)
# if (exclude_quotas_full) { s <<- s[s[101][[1]] %in% c(1:5),]  } # remove those with a problem for the taille d'agglo
# if (exclude_quotas_full) { s <<- s[s$Q_TerminateFlag=="",]  } # remove those with a problem for the taille d'agglo
if (only_finished) { s <<- s[s$finished=="True",] }
s$weight <<- weighting_s(s)
}
prepare_s(exclude_screened=FALSE, exclude_speeder=FALSE, only_finished=FALSE)
sa <- s
# prepare_s(exclude_screened=FALSE, exclude_speeder=FALSE)
# se <- s
# prepare_s(exclude_screened=FALSE)
# sp <- s
prepare_s()
categories_depenses <- c("sante", "education", "retraites", "securite", "recherche", "justice", "armee", "protection", "infrastructures", "loisirs", "aide")
i <- 0
for (v in categories_depenses) {
print(summary(lm(s[[paste('variation', v, sep='_')]] ~ s[[paste('dep', i, 'en_position', sep='_')]], weights=s$weight)))
i <- i+1 }
# *** pour justice, loisirs, éducation
t_depenses$aleatoire <- FALSE
s$aleatoire <- TRUE
d <- merge(s, t_depenses, all=T)
decrit(d$variation_aide, weights = d$weight)
decrit(d$variation_aide)
