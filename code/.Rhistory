G_F_by_simule_gain <- c()
for (i in 1:nb_bins) G_F_by_simule_gain <- c(G_F_by_simule_gain, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & s$bin_simule_gain==i])/sum(s$weight[s$variante_taxe_info=='f' & s$bin_simule_gain==i]))
plot(1:nb_bins, G_F_by_simule_gain, type='l', xlab='deciles of simule_gain', ylab="Probability that G^F ≠ 'Perdant'") + grid()
nb_bins <- 8
s$bin_simule_gain <- binning(s$simule_gain, bins=nb_bins, method="wtd.quantile", labels=1:10, ordered=FALSE, weights=s$weight)
G_F_by_simule_gain <- c()
for (i in 1:nb_bins) G_F_by_simule_gain <- c(G_F_by_simule_gain, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & s$bin_simule_gain==i])/sum(s$weight[s$variante_taxe_info=='f' & s$bin_simule_gain==i]))
plot(1:nb_bins, G_F_by_simule_gain, type='l', xlab='deciles of simule_gain', ylab="Probability that G^F ≠ 'Perdant'") + grid()
hat_g_F_by_simule_gain <- f_inv(G_F_by_simule_gain)
hat_g_F_by_simule_gain
plot(-6:(-7+length(G_F_by_gain_echelle)), G_F_by_gain_echelle, type='l', xlab='min(gain_echelle, 1)', ylab="Probability that G^F ≠ 'Perdant'") + grid()
G_F_by_gain_echelle <- c()
imax <- 1
for (i in -6:imax) G_F_by_gain_echelle <- c(G_F_by_gain_echelle, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & pmin(s$gain_echelle, imax)==i])/sum(s$weight[s$variante_taxe_info=='f' & pmin(s$gain_echelle, imax)==i]))
plot(-6:(-7+length(G_F_by_gain_echelle)), G_F_by_gain_echelle, type='l', xlab='min(gain_echelle, 1)', ylab="Probability that G^F ≠ 'Perdant'") + grid()
nb_bins <- 8 # higher values yield non monotonic functions
s$bin_gain <- binning(s$gain, bins=nb_bins, method="wtd.quantile", labels=1:nb_bins, ordered=FALSE, weights=s$weight)
nb_bins <- 8 # higher values yield non monotonic functions
s$bin_gain <- binning(s$gain, bins=nb_bins, method="wtd.quantile", labels=1:nb_bins, ordered=FALSE, weights=s$weight)
G_F_by_gain <- c()
for (i in 1:nb_bins) G_F_by_gain <- c(G_F_by_gain, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & s$bin_gain==i])/sum(s$weight[s$variante_taxe_info=='f' & s$bin_gain==i]))
plot(1:nb_bins, G_F_by_gain, type='l', xlab='bins of gain (lowest to highest)', ylab="Probability that G^F ≠ 'Perdant'") + grid()
nb_bins <- 11 # higher values yield non monotonic functions
s$bin_gain <- binning(s$gain, bins=nb_bins, method="wtd.quantile", labels=1:nb_bins, ordered=FALSE, weights=s$weight)
G_F_by_gain <- c()
for (i in 1:nb_bins) G_F_by_gain <- c(G_F_by_gain, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & s$bin_gain==i])/sum(s$weight[s$variante_taxe_info=='f' & s$bin_gain==i]))
plot(1:nb_bins, G_F_by_gain, type='l', xlab='bins of gain (lowest to highest)', ylab="Probability that G^F ≠ 'Perdant'") + grid()
s$bin_gain <- binning(s$gain, bins=nb_bins, method="wtd.quantile", labels=1:nb_bins, ordered=FALSE, weights=s$weight)
s$bin_gain <- binning(s$gain, bins=nb_bins, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
s$bin_gain <- binning(s$gain, bins=nb_bins, method="wtd.quantile", ordered=FALSE, weights=s$weight)
G_F_by_gain <- c()
for (i in 1:nb_bins) G_F_by_gain <- c(G_F_by_gain, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & s$bin_gain==i])/sum(s$weight[s$variante_taxe_info=='f' & s$bin_gain==i]))
plot(1:nb_bins, G_F_by_gain, type='l', xlab='bins of gain (lowest to highest)', ylab="Probability that G^F ≠ 'Perdant'") + grid()
G_F_by_gain
decrit(s$bin_gain)
nb_bins <- 11 # higher values yield non monotonic functions
s$bin_gain <- binning(s$gain, bins=nb_bins, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
G_F_by_gain <- c()
nb_bins
s$bin_gain <- binning(s$gain, bins=nb_bins, method="wtd.quantile", ordered=FALSE, weights=s$weight)
decrit(s$bin_gain)
s$bin_gain <- binning(s$gain, bins=nb_bins, method="quantile", ordered=FALSE, weights=s$weight)
decrit(s$bin_gain)
nb_bins
s$bin_gain <- binning(s$gain, bins=11, method="wtd.quantile", ordered=FALSE, weights=s$weight)
decrit(s$bin_gain)
s$bin_gain <- binning(s$gain, bins=4, method="wtd.quantile", ordered=FALSE, weights=s$weight)
decrit(s$bin_gain)
s$bin_gain <- binning(s$gain, bins=4, method="quantile", ordered=FALSE, weights=s$weight)
decrit(s$bin_gain)
nb_bins <- 11 # higher values yield non monotonic functions
nb_bins <- length(levels(binning(s$gain, bins=nb_bins, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
s$bin_gain <- binning(s$gain, bins=nb_bins, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
G_F_by_gain <- c()
for (i in 1:nb_bins) G_F_by_gain <- c(G_F_by_gain, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & s$bin_gain==i])/sum(s$weight[s$variante_taxe_info=='f' & s$bin_gain==i]))
plot(1:nb_bins, G_F_by_gain, type='l', xlab='bins of gain (lowest to highest)', ylab="Probability that G^F ≠ 'Perdant'") + grid()
nb_bins <- 15 # higher values yield non monotonic functions
nb_bins <- length(levels(binning(s$gain, bins=nb_bins, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
s$bin_gain <- binning(s$gain, bins=nb_bins, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
G_F_by_gain <- c()
for (i in 1:nb_bins) G_F_by_gain <- c(G_F_by_gain, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & s$bin_gain==i])/sum(s$weight[s$variante_taxe_info=='f' & s$bin_gain==i]))
plot(1:nb_bins, G_F_by_gain, type='l', xlab='bins of gain (lowest to highest)', ylab="Probability that G^F ≠ 'Perdant'") + grid()
nb_bins <- 7 # higher values yield non monotonic functions
nb_bins <- length(levels(binning(s$gain, bins=nb_bins, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
s$bin_gain <- binning(s$gain, bins=nb_bins, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
G_F_by_gain <- c()
for (i in 1:nb_bins) G_F_by_gain <- c(G_F_by_gain, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & s$bin_gain==i])/sum(s$weight[s$variante_taxe_info=='f' & s$bin_gain==i]))
plot(1:nb_bins, G_F_by_gain, type='l', xlab='bins of gain (lowest to highest)', ylab="Probability that G^F ≠ 'Perdant'") + grid()
plot(-6:(-7+length(G_F_by_gain_echelle)), G_F_by_gain_echelle, type='l', xlab='min(gain_echelle, 1)', ylab="Probability that G^F ≠ 'Perdant'") + grid()
plot(1:nb_bins, G_F_by_simule_gain, type='l', xlab='deciles of simule_gain', ylab="Probability that G^F ≠ 'Perdant'") + grid()
nb_bins <- 8 # higher values yield non monotonic functions
s$bin_simule_gain <- binning(s$simule_gain, bins=nb_bins, method="wtd.quantile", labels=1:nb_bins, ordered=FALSE, weights=s$weight)
G_F_by_simule_gain <- c()
for (i in 1:nb_bins) G_F_by_simule_gain <- c(G_F_by_simule_gain, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & s$bin_simule_gain==i])/sum(s$weight[s$variante_taxe_info=='f' & s$bin_simule_gain==i]))
plot(1:nb_bins, G_F_by_simule_gain, type='l', xlab='deciles of simule_gain', ylab="Probability that G^F ≠ 'Perdant'") + grid()
nb_bins <- 7 # higher values yield non monotonic functions
nb_bins <- length(levels(binning(s$gain, bins=nb_bins, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
s$bin_gain <- binning(s$gain, bins=nb_bins, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
G_F_by_gain <- c()
for (i in 1:nb_bins) G_F_by_gain <- c(G_F_by_gain, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & s$bin_gain==i])/sum(s$weight[s$variante_taxe_info=='f' & s$bin_gain==i]))
plot(1:nb_bins, G_F_by_gain, type='l', xlab='bins of gain (lowest to highest)', ylab="Probability that G^F ≠ 'Perdant'") + grid()
f <- function(x, xmin=-500, xmax=300, by=10) approxfun(seq(xmin, xmax, by=by), predict(loess_gains, newdata = seq(xmin, xmax, by=by)), rule=2)(x)
f_inv <- function(x, xmin=-500, xmax=300, by=10) approxfun(predict(loess_gains, newdata = seq(xmin, xmax, by=by)), seq(xmin, xmax, by=by), rule=2)(x) # imputes extremal values when outside bonds
hat_g_F_by_gain <- f_inv(G_F_by_gain)
hat_g_F_by_gain
hat_g_F_by_simule_gai <- f_inv(G_F_by_simule_gain)
hat_g_F_by_simule_gai
hat_g_F_by_gain_echelle <- f_inv(G_F_by_gain_echelle)
hat_g_F_by_gain_echelle
G_F_by_gain_echelle <- c()
gain_by_gain_echelle <- c()
imax <- 1
for (i in -6:imax) {
G_F_by_gain_echelle <- c(G_F_by_gain_echelle, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & pmin(s$gain_echelle, imax)==i])/sum(s$weight[s$variante_taxe_info=='f' & pmin(s$gain_echelle, imax)==i]))
gain_by_gain_echelle <- c(gain_by_gain_echelle, wtd.mean(s$gain[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & pmin(s$gain_echelle, imax)==i], weights = s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & pmin(s$gain_echelle, imax)==i])) }
plot(-6:(-7+length(G_F_by_gain_echelle)), G_F_by_gain_echelle, type='l', xlab='min(gain_echelle, 1)', ylab="Probability that G^F ≠ 'Perdant'") + grid()
gain_by_gain_echelle
hat_alpha_i <- 1 + (gain_by_gain_echelle - hat_g_F_by_gain_echelle)/b
decrit(hat_alpha_i)
hat_g_F_by_simule_gain <- f_inv(G_F_by_simule_gain)
confirmation_bias <- function(by_variable = 'gain', nb_bins = 8, local_b = TRUE, return='all') { # return = c('all', '', 'alpha', 'hat_alpha_i', 'b_i')
nb_bins <- length(levels(binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
bins <- binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
gain_i <- G_F_i <- b_i <- c()
for (i in 1:nb_bins) {
G_F_i <- c(G_F_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.mean(s$gain[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.mean((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i])) }
plot(1:nb_bins, G_F_i, type='l', xlab=paste('bins of', var, '(lowest to highest)'), ylab="Probability that G^F ≠ 'Perdant'") + grid()
hat_g_F_i <- f_inv(G_F_i)
hat_alpha_i <- 1 + (gain_i - hat_g_F_i)/(b_i*local_b + (!local_b)*wtd.mean(s$simule_gain - s$gain, weights = s$weight))
if (return=='all') return(list('alpha'=mean(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
else if (return=='alpha') return(mean(hat_alpha_i))
else if (return=='hat_alpha_i') return(hat_alpha_i)
else if (return=='b_i') return(b_i)
else return(list('alpha'=mean(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
}
confirmation_bias()
confirmation_bias <- function(by_variable = 'gain', nb_bins = 8, local_b = TRUE, return='all') { # return = c('all', '', 'alpha', 'hat_alpha_i', 'b_i')
nb_bins <- length(levels(binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
bins <- binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
gain_i <- G_F_i <- b_i <- c()
for (i in 1:nb_bins) {
G_F_i <- c(G_F_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.mean(s$gain[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.mean((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i])) }
plot(1:nb_bins, G_F_i, type='l', xlab=paste('bins of', by_variable, '(lowest to highest)'), ylab="Probability that G^F ≠ 'Perdant'") + grid()
hat_g_F_i <- f_inv(G_F_i)
hat_alpha_i <- 1 + (gain_i - hat_g_F_i)/(b_i*local_b + (!local_b)*wtd.mean(s$simule_gain - s$gain, weights = s$weight))
if (return=='all') return(list('alpha'=mean(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
else if (return=='alpha') return(mean(hat_alpha_i))
else if (return=='hat_alpha_i') return(hat_alpha_i)
else if (return=='b_i') return(b_i)
else return(list('alpha'=mean(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
}
confirmation_bias()
confirmation_bias()
confirmation_bias('simule_gain')
confirmation_bias('gain_echelle')
confirmation_bias <- function(by_variable = 'gain', nb_bins = 8, local_b = TRUE, return='all') { # return = c('all', '', 'alpha', 'hat_alpha_i', 'b_i')
nb_bins <- length(levels(binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
bins <- binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
gain_i <- G_F_i <- b_i <- c()
for (i in 1:nb_bins) {
G_F_i <- c(G_F_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.mean(s$gain[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.mean((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i])) }
plot(1:nb_bins, G_F_i, type='l', xlab=paste('bins of', by_variable, '(lowest to highest)'), ylab="Probability that G^F ≠ 'Perdant'") + grid()
hat_g_F_i <- f_inv(G_F_i)
hat_alpha_i <- 1 + (gain_i - hat_g_F_i)/(b_i*local_b + (!local_b)*wtd.mean(s$simule_gain - s$gain, weights = s$weight))
if (return=='all') return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
else if (return=='alpha') return(median(hat_alpha_i))
else if (return=='hat_alpha_i') return(hat_alpha_i)
else if (return=='b_i') return(b_i)
else return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
}
confirmation_bias('gain_echelle')
nb_bins <- 7 # higher values yield non monotonic functions
nb_bins <- length(levels(binning(s$gain, bins=nb_bins, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
s$bin_gain <- binning(s$gain, bins=nb_bins, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
G_F_by_gain <- c()
gain_by_gain <- c()
for (i in 1:nb_bins) {
G_F_by_gain <- c(G_F_by_gain, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & s$bin_gain==i])/sum(s$weight[s$variante_taxe_info=='f' & s$bin_gain==i]))
gain_by_simule_gain <- c(gain_by_simule_gain, wtd.mean(s$gain[s$variante_taxe_info=='f' & s$bin_gain==i], weights = s$weight[s$variante_taxe_info=='f' & s$bin_gain==i])) }
plot(1:nb_bins, G_F_by_gain, type='l', xlab='bins of gain (lowest to highest)', ylab="Probability that G^F ≠ 'Perdant'") + grid()
hat_g_F_by_gain <- f_inv(G_F_by_gain)
hat_alpha_i_by_gain <- 1 + (gain_by_gain - hat_g_F_by_gain)/b
decrit(hat_alpha_i_by_gain)
nb_bins <- 7 # higher values yield non monotonic functions
nb_bins <- length(levels(binning(s$gain, bins=nb_bins, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
s$bin_gain <- binning(s$gain, bins=nb_bins, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
G_F_by_gain <- c()
gain_by_gain <- c()
for (i in 1:nb_bins) {
G_F_by_gain <- c(G_F_by_gain, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & s$bin_gain==i])/sum(s$weight[s$variante_taxe_info=='f' & s$bin_gain==i]))
gain_by_gain <- c(gain_by_gain, wtd.mean(s$gain[s$variante_taxe_info=='f' & s$bin_gain==i], weights = s$weight[s$variante_taxe_info=='f' & s$bin_gain==i])) }
plot(1:nb_bins, G_F_by_gain, type='l', xlab='bins of gain (lowest to highest)', ylab="Probability that G^F ≠ 'Perdant'") + grid()
hat_g_F_by_gain <- f_inv(G_F_by_gain)
hat_alpha_i_by_gain <- 1 + (gain_by_gain - hat_g_F_by_gain)/b
decrit(hat_alpha_i_by_gain)
confirmation_bias('gain', 7, FALSE)
confirmation_bias <- function(by_variable = 'gain', nb_bins = 8, local_b = TRUE, return='all') { # return = c('all', '', 'alpha', 'hat_alpha_i', 'b_i')
nb_bins <- length(levels(binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
bins <- binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
gain_i <- G_F_i <- b_i <- c()
for (i in 1:nb_bins) {
G_F_i <- c(G_F_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.mean(s[[v]][s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.mean((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i])) }
plot(1:nb_bins, G_F_i, type='l', xlab=paste('bins of', by_variable, '(lowest to highest)'), ylab="Probability that G^F ≠ 'Perdant'") + grid()
hat_g_F_i <- f_inv(G_F_i)
hat_alpha_i <- 1 + (gain_i - hat_g_F_i)/(b_i*local_b + (!local_b)*wtd.mean(s$simule_gain - s$gain, weights = s$weight))
if (return=='all') return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
else if (return=='alpha') return(median(hat_alpha_i))
else if (return=='hat_alpha_i') return(hat_alpha_i)
else if (return=='b_i') return(b_i)
else return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
}
confirmation_bias('gain', 7, FALSE)
confirmation_bias <- function(by_variable = 'gain', nb_bins = 8, local_b = TRUE, return='all') { # return = c('all', '', 'alpha', 'hat_alpha_i', 'b_i')
nb_bins <- length(levels(binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
bins <- binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
gain_i <- G_F_i <- b_i <- c()
for (i in 1:nb_bins) {
G_F_i <- c(G_F_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.mean(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.mean((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i])) }
plot(1:nb_bins, G_F_i, type='l', xlab=paste('bins of', by_variable, '(lowest to highest)'), ylab="Probability that G^F ≠ 'Perdant'") + grid()
hat_g_F_i <- f_inv(G_F_i)
hat_alpha_i <- 1 + (gain_i - hat_g_F_i)/(b_i*local_b + (!local_b)*wtd.mean(s$simule_gain - s$gain, weights = s$weight))
if (return=='all') return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
else if (return=='alpha') return(median(hat_alpha_i))
else if (return=='hat_alpha_i') return(hat_alpha_i)
else if (return=='b_i') return(b_i)
else return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
}
confirmation_bias('gain', 7, FALSE)
decrit(hat_alpha_i_by_gain)
confirmation_bias('gain', 7, FALSE, 'all')
confirmation_bias <- function(by_variable = 'gain', nb_bins = 8, local_b = TRUE, return='all') { # return = c('all', '', 'alpha', 'hat_alpha_i', 'b_i')
nb_bins <- length(levels(binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
bins <- binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
gain_i <- G_F_i <- b_i <- c()
for (i in 1:nb_bins) {
G_F_i <- c(G_F_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.mean(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.mean((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i])) }
plot(1:nb_bins, G_F_i, type='l', xlab=paste('bins of', by_variable, '(lowest to highest)'), ylab="Probability that G^F ≠ 'Perdant'") + grid()
hat_g_F_i <- f_inv(G_F_i)
hat_alpha_i <- 1 + (gain_i - hat_g_F_i)/(b_i*local_b + (!local_b)*wtd.mean(s$simule_gain - s$gain, weights = s$weight))
if (return=='all') return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i, 'hat_g_F_i'=hat_g_F_i, 'G_F_i'=G_F_i))
else if (return=='alpha') return(median(hat_alpha_i))
else if (return=='hat_alpha_i') return(hat_alpha_i)
else if (return=='b_i') return(b_i)
else return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
}
confirmation_bias('gain', 7, FALSE, 'all')
hat_g_F_by_gain
G_F_by_gain
hat_alpha_i_by_gain
decrit(hat_alpha_i_by_gain)
confirmation_bias <- function(by_variable = 'gain', nb_bins = 8, local_b = TRUE, return='all') { # return = c('all', '', 'alpha', 'hat_alpha_i', 'b_i')
nb_bins <- length(levels(binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
bins <- binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
gain_i <- G_F_i <- b_i <- c()
for (i in 1:nb_bins) {
G_F_i <- c(G_F_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.mean(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.mean((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i])) }
plot(1:nb_bins, G_F_i, type='l', xlab=paste('bins of', by_variable, '(lowest to highest)'), ylab="Probability that G^F ≠ 'Perdant'") + grid()
hat_g_F_i <- f_inv(G_F_i)
hat_alpha_i <- 1 + (gain_i - hat_g_F_i)/(b_i*local_b + (!local_b)*wtd.mean(s$simule_gain - s$gain, weights = s$weight))
if (return=='all') return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i, 'hat_g_F_i'=hat_g_F_i, 'G_F_i'=G_F_i))
else if (return=='alpha') return(median(hat_alpha_i))
else if (return=='hat_alpha_i') return(hat_alpha_i)
else if (return=='b_i') return(b_i)
else return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
}
decrit(hat_alpha_i_by_gain)
confirmation_bias('gain', 7, FALSE, 'all')
hat_alpha_i_by_gain
hat_alpha_i_by_gain$b_i*FALSE + (!FALSE)*wtd.mean(s$simule_gain - s$gain, weights = s$weight)
hat_alpha_i_by_gain['b_i']*FALSE + (!FALSE)*wtd.mean(s$simule_gain - s$gain, weights = s$weight)
confirmation_bias('gain', 7, FALSE, 'all')$b_i*FALSE + (!FALSE)*wtd.mean(s$simule_gain - s$gain, weights = s$weight)
b
##### Adaptation Bayesienne: nouveau modèle #####
b <- wtd.mean(s$simule_gain - s$gain, weights = s$weight) # 143
hat_alpha_i_by_gain <- 1 + (gain_by_gain - hat_g_F_by_gain)/b
hat_alpha_i_by_gain
confirmation_bias('gain', 7, FALSE, 'all')
confirmation_bias <- function(by_variable = 'gain', nb_bins = 8, local_b = TRUE, return='all') { # return = c('all', '', 'alpha', 'hat_alpha_i', 'b_i')
nb_bins <- length(levels(binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
bins <- binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
gain_i <- G_F_i <- b_i <- c()
for (i in 1:nb_bins) {
G_F_i <- c(G_F_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.mean(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.mean((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i])) }
plot(1:nb_bins, G_F_i, type='l', xlab=paste('bins of', by_variable, '(lowest to highest)'), ylab="Probability that G^F ≠ 'Perdant'") + grid()
hat_g_F_i <- f_inv(G_F_i)
hat_alpha_i <- 1 + (gain_i - hat_g_F_i)/(b_i*local_b + (!local_b)*wtd.mean(s$simule_gain - s$gain, weights = s$weight))
if (return=='all') return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i, 'hat_g_F_i'=hat_g_F_i, 'G_F_i'=G_F_i, 'gain_i'=gain_i))
else if (return=='alpha') return(median(hat_alpha_i))
else if (return=='hat_alpha_i') return(hat_alpha_i)
else if (return=='b_i') return(b_i)
else return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
}
confirmation_bias('gain', 7, FALSE, 'all')
confirmation_bias <- function(by_variable = 'gain', nb_bins = 8, local_b = TRUE, return='all') { # return = c('all', '', 'alpha', 'hat_alpha_i', 'b_i')
nb_bins <- length(levels(binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
bins <- binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
gain_i <- G_F_i <- b_i <- c()
for (i in 1:nb_bins) {
G_F_i <- c(G_F_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.mean(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.mean((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i])) }
plot(1:nb_bins, G_F_i, type='l', xlab=paste('bins of', by_variable, '(lowest to highest)'), ylab="Probability that G^F ≠ 'Perdant'") + grid()
hat_g_F_i <- f_inv(G_F_i)
hat_alpha_i <- 1 + (gain_i - hat_g_F_i)/(b_i*local_b + (!local_b)*wtd.mean(s$simule_gain - s$gain, weights = s$weight))
if (return=='all') return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'gain_i'=gain_i, 'b_i'=b_i, 'G_F_i'=G_F_i, 'hat_g_F_i'=hat_g_F_i))
else if (return=='alpha') return(median(hat_alpha_i))
else if (return=='hat_alpha_i') return(hat_alpha_i)
else if (return=='b_i') return(b_i)
else return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
}
confirmation_bias('gain', 7, FALSE, 'all')
confirmation_bias <- function(by_variable = 'gain', nb_bins = 8, local_b = TRUE, return='all') { # return = c('all', '', 'alpha', 'hat_alpha_i', 'b_i')
nb_bins <- length(levels(binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
bins <- binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
gain_i <- G_F_i <- b_i <- c()
for (i in 1:nb_bins) {
G_F_i <- c(G_F_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.mean(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.mean((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i])) }
plot(1:nb_bins, G_F_i, type='l', xlab=paste('bins of', by_variable, '(lowest to highest)'), ylab="Probability that G^F ≠ 'Perdant'") + grid()
hat_g_F_i <- f_inv(G_F_i)
hat_alpha_i <- 1 + (gain_i - hat_g_F_i)/(b_i*local_b + (!local_b)*wtd.mean(s$simule_gain - s$gain, weights = s$weight))
if (return=='all') return(list('alpha'=median(hat_alpha_i), 'gain_i'=gain_i, 'b_i'=b_i, 'G_F_i'=G_F_i, 'hat_g_F_i'=hat_g_F_i, 'hat_alpha_i'=hat_alpha_i))
else if (return=='alpha') return(median(hat_alpha_i))
else if (return=='hat_alpha_i') return(hat_alpha_i)
else if (return=='b_i') return(b_i)
else return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
}
confirmation_bias('gain', 7, FALSE, 'all')
confirmation_bias <- function(by_variable = 'gain', nb_bins = 8, local_b = TRUE, return='all') { # return = c('all', '', 'alpha', 'hat_alpha_i', 'b_i')
nb_bins <- length(levels(binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
bins <- binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
gain_i <- G_F_i <- b_i <- G_i <- c()
for (i in 1:nb_bins) {
G_i <- c(G_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
G_F_i <- c(G_F_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.mean(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.mean((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i])) }
plot(1:nb_bins, G_F_i, type='l', xlab=paste('bins of', by_variable, '(lowest to highest)'), ylab="Probability that G^F ≠ 'Perdant'") + grid()
hat_g_F_i <- f_inv(G_F_i)
hat_alpha_i <- 1 + (gain_i - hat_g_F_i)/(b_i*local_b + (!local_b)*wtd.mean(s$simule_gain - s$gain, weights = s$weight))
if (return=='all') return(list('alpha'=median(hat_alpha_i), 'gain_i'=gain_i, 'b_i'=b_i, 'G_F_i'=G_F_i, 'hat_g_F_i'=hat_g_F_i, 'hat_alpha_i'=hat_alpha_i))
else if (return=='alpha') return(median(hat_alpha_i))
else if (return=='hat_alpha_i') return(hat_alpha_i)
else if (return=='b_i') return(b_i)
else return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
}
confirmation_bias <- function(by_variable = 'gain', nb_bins = 8, local_b = TRUE, return='all') { # return = c('all', '', 'alpha', 'hat_alpha_i', 'b_i')
nb_bins <- length(levels(binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
bins <- binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
gain_i <- G_F_i <- b_i <- G_i <- c()
for (i in 1:nb_bins) {
G_i <- c(G_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
G_F_i <- c(G_F_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.mean(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.mean((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i])) }
plot(1:nb_bins, G_F_i, type='l', xlab=paste('bins of', by_variable, '(lowest to highest)'), ylab="Probability that G^F ≠ 'Perdant'") + grid()
hat_g_F_i <- f_inv(G_F_i)
hat_alpha_i <- 1 + (gain_i - hat_g_F_i)/(b_i*local_b + (!local_b)*wtd.mean(s$simule_gain - s$gain, weights = s$weight))
if (return=='all') return(list('alpha'=median(hat_alpha_i), 'gain_i'=gain_i, 'b_i'=b_i, 'G_i'=G_i ,'G_F_i'=G_F_i, 'hat_g_F_i'=hat_g_F_i, 'hat_alpha_i'=hat_alpha_i))
else if (return=='alpha') return(median(hat_alpha_i))
else if (return=='hat_alpha_i') return(hat_alpha_i)
else if (return=='b_i') return(b_i)
else return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
}
confirmation_bias('gain', 7, FALSE, 'all')
confirmation_bias <- function(by_variable = 'gain', nb_bins = 8, local_b = TRUE, return='all') { # return = c('all', '', 'alpha', 'hat_alpha_i', 'b_i')
nb_bins <- length(levels(binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
bins <- binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
gain_i <- G_F_i <- b_i <- G_i <- c()
for (i in 1:nb_bins) {
G_i <- c(G_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
G_F_i <- c(G_F_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.mean(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.mean((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i])) }
plot(1:nb_bins, G_F_i, type='l', xlab=paste('bins of', by_variable, '(lowest to highest)'), ylab="Probability that G^F ≠ 'Perdant'") + grid()
hat_g_F_i <- f_inv(G_F_i)
hat_alpha_i <- 1 + (gain_i - hat_g_F_i)/(b_i*local_b + (!local_b)*wtd.mean(s$simule_gain - s$gain, weights = s$weight))
if (return=='all') return(list('alpha'=median(hat_alpha_i), 'G_i'=G_i, 'gain_i'=gain_i, 'b_i'=b_i ,'G_F_i'=G_F_i, 'hat_g_F_i'=hat_g_F_i, 'hat_alpha_i'=hat_alpha_i))
else if (return=='alpha') return(median(hat_alpha_i))
else if (return=='hat_alpha_i') return(hat_alpha_i)
else if (return=='b_i') return(b_i)
else return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
}
confirmation_bias('gain', 7, FALSE, 'all')
ggplot(data=s, aes(simule_gain, 1*(s$gagnant_categorie!='Perdant'))) + ylim(0,1) + xlim(-500, 300) + # xlim(-500, 400) +
xlab("Simulated gain") + ylab("Probability of thinking not to loose") + geom_smooth(method='loess') #  + geom_point()
confirmation_bias('simule_gain', 7, FALSE, 'all')
decrit(s$simule_gain)
confirmation_bias <- function(by_variable = 'gain', nb_bins = 8, local_b = TRUE, return='all') { # return = c('all', '', 'alpha', 'hat_alpha_i', 'b_i')
nb_bins <- length(levels(binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
bins <- binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
gain_i <- G_F_i <- b_i <- G_i <- c()
for (i in 1:nb_bins) {
G_i <- c(G_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
G_F_i <- c(G_F_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.median(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.median((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i])) }
plot(1:nb_bins, G_F_i, type='l', xlab=paste('bins of', by_variable, '(lowest to highest)'), ylab="Probability that G^F ≠ 'Perdant'") + grid()
hat_g_F_i <- f_inv(G_F_i)
hat_alpha_i <- 1 + (gain_i - hat_g_F_i)/(b_i*local_b + (!local_b)*wtd.mean(s$simule_gain - s$gain, weights = s$weight))
if (return=='all') return(list('alpha'=median(hat_alpha_i), 'G_i'=G_i, 'gain_i'=gain_i, 'b_i'=b_i ,'G_F_i'=G_F_i, 'hat_g_F_i'=hat_g_F_i, 'hat_alpha_i'=hat_alpha_i))
else if (return=='alpha') return(median(hat_alpha_i))
else if (return=='hat_alpha_i') return(hat_alpha_i)
else if (return=='b_i') return(b_i)
else return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
}
confirmation_bias('simule_gain', 7, FALSE, 'all')
package("ergm")
confirmation_bias <- function(by_variable = 'gain', nb_bins = 8, local_b = TRUE, return='all') { # return = c('all', '', 'alpha', 'hat_alpha_i', 'b_i')
nb_bins <- length(levels(binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
bins <- binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
gain_i <- G_F_i <- b_i <- G_i <- c()
for (i in 1:nb_bins) {
G_i <- c(G_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
G_F_i <- c(G_F_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.median(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.median((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i])) }
plot(1:nb_bins, G_F_i, type='l', xlab=paste('bins of', by_variable, '(lowest to highest)'), ylab="Probability that G^F ≠ 'Perdant'") + grid()
hat_g_F_i <- f_inv(G_F_i)
hat_alpha_i <- 1 + (gain_i - hat_g_F_i)/(b_i*local_b + (!local_b)*wtd.mean(s$simule_gain - s$gain, weights = s$weight))
if (return=='all') return(list('alpha'=median(hat_alpha_i), 'G_i'=G_i, 'gain_i'=gain_i, 'b_i'=b_i ,'G_F_i'=G_F_i, 'hat_g_F_i'=hat_g_F_i, 'hat_alpha_i'=hat_alpha_i))
else if (return=='alpha') return(median(hat_alpha_i))
else if (return=='hat_alpha_i') return(hat_alpha_i)
else if (return=='b_i') return(b_i)
else return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
}
confirmation_bias('simule_gain', 7, FALSE, 'all')
confirmation_bias <- function(by_variable = 'gain', nb_bins = 8, local_b = TRUE, return='all') { # return = c('all', '', 'alpha', 'hat_alpha_i', 'b_i')
nb_bins <- length(levels(binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
bins <- binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
gain_i <- G_F_i <- b_i <- G_i <- c()
for (i in 1:nb_bins) {
G_i <- c(G_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
G_F_i <- c(G_F_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.median(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weight = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.median((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weight = s$weight[s$variante_taxe_info=='f' & bins==i])) }
plot(1:nb_bins, G_F_i, type='l', xlab=paste('bins of', by_variable, '(lowest to highest)'), ylab="Probability that G^F ≠ 'Perdant'") + grid()
hat_g_F_i <- f_inv(G_F_i)
hat_alpha_i <- 1 + (gain_i - hat_g_F_i)/(b_i*local_b + (!local_b)*wtd.mean(s$simule_gain - s$gain, weights = s$weight))
if (return=='all') return(list('alpha'=median(hat_alpha_i), 'G_i'=G_i, 'gain_i'=gain_i, 'b_i'=b_i ,'G_F_i'=G_F_i, 'hat_g_F_i'=hat_g_F_i, 'hat_alpha_i'=hat_alpha_i))
else if (return=='alpha') return(median(hat_alpha_i))
else if (return=='hat_alpha_i') return(hat_alpha_i)
else if (return=='b_i') return(b_i)
else return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
}
confirmation_bias('simule_gain', 7, FALSE, 'all')
decrit(s$gagnant_feedback_categorie)
decrit(s$gagnant_categorie)
ggplot(data=s, aes(simule_gain, 1*(s$gagnant_categorie!='Perdant'))) + ylim(0,1) + xlim(-500, 300) + # xlim(-500, 400) +
xlab("Simulated gain") + ylab("Probability of thinking not to loose") + geom_smooth(method='loess') #  + geom_point()
confirmation_bias <- function(by_variable = 'gain', nb_bins = 8, local_b = TRUE, return='all') { # return = c('all', '', 'alpha', 'hat_alpha_i', 'b_i')
nb_bins <- length(levels(binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
bins <- binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
gain_i <- G_F_i <- b_i <- G_i <- p_i <- c()
for (i in 1:nb_bins) {
p_i <- c(p_i, sum(s$weight[s$variante_taxe_info=='f' & bins==i])/sum(s$weight[s$variante_taxe_info=='f']))
G_i <- c(G_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
G_F_i <- c(G_F_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.median(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weight = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.median((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weight = s$weight[s$variante_taxe_info=='f' & bins==i])) }
plot(1:nb_bins, G_F_i, type='l', xlab=paste('bins of', by_variable, '(lowest to highest)'), ylab="Probability that G^F ≠ 'Perdant'") + grid()
hat_g_F_i <- f_inv(G_F_i)
hat_alpha_i <- 1 + (gain_i - hat_g_F_i)/(b_i*local_b + (!local_b)*wtd.mean(s$simule_gain - s$gain, weights = s$weight))
if (return=='all') return(list('alpha'=median(hat_alpha_i), 'p_i'=p_i, 'G_i'=G_i, 'gain_i'=gain_i, 'b_i'=b_i ,'G_F_i'=G_F_i, 'hat_g_F_i'=hat_g_F_i, 'hat_alpha_i'=hat_alpha_i))
else if (return=='alpha') return(median(hat_alpha_i))
else if (return=='hat_alpha_i') return(hat_alpha_i)
else if (return=='b_i') return(b_i)
else return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
}
confirmation_bias('simule_gain', 7, FALSE, 'all')
confirmation_bias <- function(by_variable = 'gain', nb_bins = 8, local_b = TRUE, return='all') { # return = c('all', '', 'alpha', 'hat_alpha_i', 'b_i')
nb_bins <- length(levels(binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
bins <- binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
gain_i <- G_F_i <- b_i <- G_i <- p_i <- c()
for (i in 1:nb_bins) {
p_i <- c(p_i, sum(s$weight[s$variante_taxe_info=='f' & bins==i])/sum(s$weight[s$variante_taxe_info=='f']))
G_i <- c(G_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
G_F_i <- c(G_F_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.median(s$gain[s$variante_taxe_info=='f' & bins==i], weight = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.median((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weight = s$weight[s$variante_taxe_info=='f' & bins==i])) }
plot(1:nb_bins, G_F_i, type='l', xlab=paste('bins of', by_variable, '(lowest to highest)'), ylab="Probability that G^F ≠ 'Perdant'") + grid()
hat_g_F_i <- f_inv(G_F_i)
hat_alpha_i <- 1 + (gain_i - hat_g_F_i)/(b_i*local_b + (!local_b)*wtd.mean(s$simule_gain - s$gain, weights = s$weight))
if (return=='all') return(list('alpha'=median(hat_alpha_i), 'p_i'=p_i, 'G_i'=G_i, 'gain_i'=gain_i, 'b_i'=b_i ,'G_F_i'=G_F_i, 'hat_g_F_i'=hat_g_F_i, 'hat_alpha_i'=hat_alpha_i))
else if (return=='alpha') return(median(hat_alpha_i))
else if (return=='hat_alpha_i') return(hat_alpha_i)
else if (return=='b_i') return(b_i)
else return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
}
confirmation_bias('simule_gain', 7, FALSE, 'all')
confirmation_bias <- function(by_variable = 'gain', nb_bins = 8, local_b = TRUE, return='all', method='median') { # return = c('all', '', 'alpha', 'hat_alpha_i', 'b_i')
nb_bins <- length(levels(binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
bins <- binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
gain_i <- G_F_i <- b_i <- G_i <- p_i <- c()
for (i in 1:nb_bins) {
p_i <- c(p_i, sum(s$weight[s$variante_taxe_info=='f' & bins==i])/sum(s$weight[s$variante_taxe_info=='f']))
G_i <- c(G_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
G_F_i <- c(G_F_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
if (method=='median') {
gain_i <- c(gain_i, wtd.median(s$gain[s$variante_taxe_info=='f' & bins==i], weight = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.median((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weight = s$weight[s$variante_taxe_info=='f' & bins==i]))
} else if (method=='mean') {
gain_i <- c(gain_i, wtd.mean(s$gain[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.mean((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
}    }
plot(1:nb_bins, G_F_i, type='l', xlab=paste('bins of', by_variable, '(lowest to highest)'), ylab="Probability that G^F ≠ 'Perdant'") + grid()
hat_g_F_i <- f_inv(G_F_i)
hat_alpha_i <- 1 + (gain_i - hat_g_F_i)/(b_i*local_b + (!local_b)*wtd.mean(s$simule_gain - s$gain, weights = s$weight))
if (return=='all') return(list('alpha'=median(hat_alpha_i), 'p_i'=p_i, 'G_i'=G_i, 'gain_i'=gain_i, 'b_i'=b_i ,'G_F_i'=G_F_i, 'hat_g_F_i'=hat_g_F_i, 'hat_alpha_i'=hat_alpha_i))
else if (return=='alpha') return(median(hat_alpha_i))
else if (return=='hat_alpha_i') return(hat_alpha_i)
else if (return=='b_i') return(b_i)
else return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
}
confirmation_bias('simule_gain', 7, FALSE, 'all', 'mean')
