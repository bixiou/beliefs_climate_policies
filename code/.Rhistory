else if (return=='all') return(list('alpha'=median(hat_alpha_i), paste(by_variable, 'i', sep='_') = variable_i, 'G_i'=G_i, 'gain_i'=gain_i, 'b_i'=b_i ,'G_F_i'=G_F_i, 'hat_g_F_i'=hat_g_F_i, 'hat_alpha_i'=hat_alpha_i)) #
else if (return=='hat_alpha_i') return(hat_alpha_i)
else if (return=='b_i') return(b_i)
else return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
}
confirmation_bias <- function(by_variable = 'gain', nb_bins = 8, local_b = TRUE, return='all', method='median') { # return = c('all', '', 'alpha', 'hat_alpha_i', 'b_i')
nb_bins <- length(levels(binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
bins <- binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
gain_i <- G_F_i <- b_i <- G_i <- p_i <- variable_i <- c()
for (i in 1:nb_bins) {
p_i <- c(p_i, sum(s$weight[s$variante_taxe_info=='f' & bins==i])/sum(s$weight[s$variante_taxe_info=='f']))
G_i <- c(G_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
G_F_i <- c(G_F_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
if (method=='median') {
variable_i <- c(variable_i, wtd.median(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weight=s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.median(s$gain[s$variante_taxe_info=='f' & bins==i], weight = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.median((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weight = s$weight[s$variante_taxe_info=='f' & bins==i]))
} else if (method=='mean') {
variable_i <- c(variable_i, wtd.mean(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weights=s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.mean(s$gain[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.mean((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
}
s$b_i[s$variante_taxe_info=='f' & bins==i] <<- b_i }
plot(1:nb_bins, G_F_i, type='l', xlab=paste('bins of', by_variable, '(lowest to highest)'), ylab="Probability that G^F ≠ 'Perdant'") + grid()
lowess_gains <- loess((gagnant_categorie!='Perdant') ~ I(simule_gain - b_i), data=s)
f__1 <- function(x, xmin=-500, xmax=300, by=10) approxfun(predict(lowess_gains, newdata = seq(xmin, xmax, by=by)), seq(xmin, xmax, by=by), rule=2)(x) # imputes extremal values when outside bonds
ggplot(data=s, aes(simule_gain-b_i, 1*(s$gagnant_categorie!='Perdant'))) + ylim(0,1) + xlim(-500, 300) + # xlim(-500, 400) +
xlab("Simulated gain") + ylab("Probability of thinking not to loose") + geom_smooth(method='loess') #  + geom_point()
hat_g_F_i <- f__1(G_F_i)
hat_alpha_i <- 1 + (gain_i - hat_g_F_i)/(b_i*local_b + (!local_b)*wtd.mean(s$simule_gain - s$gain, weights = s$weight))
name_by_var <- paste(by_variable, 'i', sep='_')
if (return=='alpha') return(median(hat_alpha_i))
else if (return=='all') return(list('alpha'=median(hat_alpha_i),  name_by_var=variable_i, 'G_i'=G_i, 'gain_i'=gain_i, 'b_i'=b_i ,'G_F_i'=G_F_i, 'hat_g_F_i'=hat_g_F_i, 'hat_alpha_i'=hat_alpha_i)) #
else if (return=='hat_alpha_i') return(hat_alpha_i)
else if (return=='b_i') return(b_i)
else return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
}
# alpha n'est presque jamais entre 0 et 1 ! i.e. les répondants n'updatent pas correctement
# me semble le plus pertinent car repose sur une variable objective
confirmation_bias('simule_gain', 8, TRUE, 'all', 'mean') # higher values yield non monotonic functions
confirmation_bias <- function(by_variable = 'gain', nb_bins = 8, local_b = TRUE, return='all', method='median') { # return = c('all', '', 'alpha', 'hat_alpha_i', 'b_i')
nb_bins <- length(levels(binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
bins <- binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
gain_i <- G_F_i <- b_i <- G_i <- p_i <- variable_i <- c()
for (i in 1:nb_bins) {
p_i <- c(p_i, sum(s$weight[s$variante_taxe_info=='f' & bins==i])/sum(s$weight[s$variante_taxe_info=='f']))
G_i <- c(G_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
G_F_i <- c(G_F_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
if (method=='median') {
variable_i <- c(variable_i, wtd.median(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weight=s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.median(s$gain[s$variante_taxe_info=='f' & bins==i], weight = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.median((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weight = s$weight[s$variante_taxe_info=='f' & bins==i]))
} else if (method=='mean') {
variable_i <- c(variable_i, wtd.mean(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weights=s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.mean(s$gain[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.mean((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
}
s$b_i[s$variante_taxe_info=='f' & bins==i] <<- b_i[i] }
plot(1:nb_bins, G_F_i, type='l', xlab=paste('bins of', by_variable, '(lowest to highest)'), ylab="Probability that G^F ≠ 'Perdant'") + grid()
lowess_gains <- loess((gagnant_categorie!='Perdant') ~ I(simule_gain - b_i), data=s)
f__1 <- function(x, xmin=-500, xmax=300, by=10) approxfun(predict(lowess_gains, newdata = seq(xmin, xmax, by=by)), seq(xmin, xmax, by=by), rule=2)(x) # imputes extremal values when outside bonds
ggplot(data=s, aes(simule_gain-b_i, 1*(s$gagnant_categorie!='Perdant'))) + ylim(0,1) + xlim(-500, 300) + # xlim(-500, 400) +
xlab("Simulated gain") + ylab("Probability of thinking not to loose") + geom_smooth(method='loess') #  + geom_point()
hat_g_F_i <- f__1(G_F_i)
hat_alpha_i <- 1 + (gain_i - hat_g_F_i)/(b_i*local_b + (!local_b)*wtd.mean(s$simule_gain - s$gain, weights = s$weight))
name_by_var <- paste(by_variable, 'i', sep='_')
if (return=='alpha') return(median(hat_alpha_i))
else if (return=='all') return(list('alpha'=median(hat_alpha_i),  name_by_var=variable_i, 'G_i'=G_i, 'gain_i'=gain_i, 'b_i'=b_i ,'G_F_i'=G_F_i, 'hat_g_F_i'=hat_g_F_i, 'hat_alpha_i'=hat_alpha_i)) #
else if (return=='hat_alpha_i') return(hat_alpha_i)
else if (return=='b_i') return(b_i)
else return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
}
# alpha n'est presque jamais entre 0 et 1 ! i.e. les répondants n'updatent pas correctement
# me semble le plus pertinent car repose sur une variable objective
confirmation_bias('simule_gain', 8, TRUE, 'all', 'mean') # higher values yield non monotonic functions
confirmation_bias <- function(by_variable = 'gain', nb_bins = 8, local_b = TRUE, return='all', method='median') { # return = c('all', '', 'alpha', 'hat_alpha_i', 'b_i')
nb_bins <- length(levels(binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
bins <- binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
gain_i <- G_F_i <- b_i <- G_i <- p_i <- variable_i <- c()
for (i in 1:nb_bins) {
p_i <- c(p_i, sum(s$weight[s$variante_taxe_info=='f' & bins==i])/sum(s$weight[s$variante_taxe_info=='f']))
G_i <- c(G_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
G_F_i <- c(G_F_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
if (method=='median') {
variable_i <- c(variable_i, wtd.median(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weight=s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.median(s$gain[s$variante_taxe_info=='f' & bins==i], weight = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.median((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weight = s$weight[s$variante_taxe_info=='f' & bins==i]))
} else if (method=='mean') {
variable_i <- c(variable_i, wtd.mean(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weights=s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.mean(s$gain[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.mean((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
}
s$b_i[s$variante_taxe_info=='f' & bins==i] <<- b_i[i] }
plot(1:nb_bins, G_F_i, type='l', xlab=paste('bins of', by_variable, '(lowest to highest)'), ylab="Probability that G^F ≠ 'Perdant'") + grid()
lowess_gains <- loess((gagnant_categorie!='Perdant') ~ I(simule_gain - b_i), data=s)
f__1 <- function(x, xmin=-500, xmax=300, by=10) approxfun(predict(lowess_gains, newdata = seq(xmin, xmax, by=by)), seq(xmin, xmax, by=by), rule=2)(x) # imputes extremal values when outside bonds
plot(seq(-500, 300, by=10), predict(lowess_gains, newdata = seq(-500, 300, by=10)), type='l', col='red')
hat_g_F_i <- f__1(G_F_i)
hat_alpha_i <- 1 + (gain_i - hat_g_F_i)/(b_i*local_b + (!local_b)*wtd.mean(s$simule_gain - s$gain, weights = s$weight))
name_by_var <- paste(by_variable, 'i', sep='_')
if (return=='alpha') return(median(hat_alpha_i))
else if (return=='all') return(list('alpha'=median(hat_alpha_i),  name_by_var=variable_i, 'G_i'=G_i, 'gain_i'=gain_i, 'b_i'=b_i ,'G_F_i'=G_F_i, 'hat_g_F_i'=hat_g_F_i, 'hat_alpha_i'=hat_alpha_i)) #
else if (return=='hat_alpha_i') return(hat_alpha_i)
else if (return=='b_i') return(b_i)
else return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
}
# alpha n'est presque jamais entre 0 et 1 ! i.e. les répondants n'updatent pas correctement
# me semble le plus pertinent car repose sur une variable objective
confirmation_bias('simule_gain', 8, TRUE, 'all', 'mean') # higher values yield non monotonic functions
confirmation_bias('gain_echelle', 8, TRUE, 'all', 'mean')
confirmation_bias('gain', 7, TRUE, 'all', 'mean') # higher values yield non monotonic functions
confirmation_bias <- function(by_variable = 'gain', nb_bin = 8, local_b = TRUE, return='all', method='median') { # return = c('all', '', 'alpha', 'hat_alpha_i', 'b_i')
nb_bins <- length(levels(binning(s[[by_variable]], bins=nb_bin, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
bins <- binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
gain_i <- G_F_i <- b_i <- G_i <- p_i <- variable_i <- c()
for (i in 1:nb_bins) {
p_i <- c(p_i, sum(s$weight[s$variante_taxe_info=='f' & bins==i])/sum(s$weight[s$variante_taxe_info=='f']))
G_i <- c(G_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
G_F_i <- c(G_F_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
if (method=='median') {
variable_i <- c(variable_i, wtd.median(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weight=s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.median(s$gain[s$variante_taxe_info=='f' & bins==i], weight = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.median((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weight = s$weight[s$variante_taxe_info=='f' & bins==i]))
} else if (method=='mean') {
variable_i <- c(variable_i, wtd.mean(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weights=s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.mean(s$gain[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.mean((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
}
s$b_i[s$variante_taxe_info=='f' & bins==i] <<- b_i[i] }
plot(1:nb_bins, G_F_i, type='l', xlab=paste('bins of', by_variable, '(lowest to highest)'), ylab="Probability that G^F ≠ 'Perdant'") + grid()
lowess_gains <- loess((gagnant_categorie!='Perdant') ~ I(simule_gain - b_i), data=s)
f__1 <- function(x, xmin=-500, xmax=300, by=10) approxfun(predict(lowess_gains, newdata = seq(xmin, xmax, by=by)), seq(xmin, xmax, by=by), rule=2)(x) # imputes extremal values when outside bonds
plot(seq(-500, 300, by=10), predict(lowess_gains, newdata = seq(-500, 300, by=10)), type='l', col='red')
hat_g_F_i <- f__1(G_F_i)
hat_alpha_i <- 1 + (gain_i - hat_g_F_i)/(b_i*local_b + (!local_b)*wtd.mean(s$simule_gain - s$gain, weights = s$weight))
name_by_var <- paste(by_variable, 'i', sep='_')
if (return=='alpha') return(median(hat_alpha_i))
else if (return=='all') return(list('alpha'=median(hat_alpha_i),  name_by_var=variable_i, 'G_i'=G_i, 'gain_i'=gain_i, 'b_i'=b_i ,'G_F_i'=G_F_i, 'hat_g_F_i'=hat_g_F_i, 'hat_alpha_i'=hat_alpha_i)) #
else if (return=='hat_alpha_i') return(hat_alpha_i)
else if (return=='b_i') return(b_i)
else return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
}
confirmation_bias('gain', 7, TRUE, 'all', 'mean') # higher values yield non monotonic functions
confirmation_bias <- function(by_variable = 'gain', nb_bins = 8, local_b = TRUE, return='all', method='median') { # return = c('all', '', 'alpha', 'hat_alpha_i', 'b_i')
nb_bins <- length(levels(binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
print(nb_bins)
bins <- binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
gain_i <- G_F_i <- b_i <- G_i <- p_i <- variable_i <- c()
for (i in 1:nb_bins) {
p_i <- c(p_i, sum(s$weight[s$variante_taxe_info=='f' & bins==i])/sum(s$weight[s$variante_taxe_info=='f']))
G_i <- c(G_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
G_F_i <- c(G_F_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
if (method=='median') {
variable_i <- c(variable_i, wtd.median(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weight=s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.median(s$gain[s$variante_taxe_info=='f' & bins==i], weight = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.median((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weight = s$weight[s$variante_taxe_info=='f' & bins==i]))
} else if (method=='mean') {
variable_i <- c(variable_i, wtd.mean(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weights=s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.mean(s$gain[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.mean((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
}
s$b_i[s$variante_taxe_info=='f' & bins==i] <<- b_i[i] }
plot(1:nb_bins, G_F_i, type='l', xlab=paste('bins of', by_variable, '(lowest to highest)'), ylab="Probability that G^F ≠ 'Perdant'") + grid()
lowess_gains <- loess((gagnant_categorie!='Perdant') ~ I(simule_gain - b_i), data=s)
f__1 <- function(x, xmin=-500, xmax=300, by=10) approxfun(predict(lowess_gains, newdata = seq(xmin, xmax, by=by)), seq(xmin, xmax, by=by), rule=2)(x) # imputes extremal values when outside bonds
plot(seq(-500, 300, by=10), predict(lowess_gains, newdata = seq(-500, 300, by=10)), type='l', col='red')
hat_g_F_i <- f__1(G_F_i)
hat_alpha_i <- 1 + (gain_i - hat_g_F_i)/(b_i*local_b + (!local_b)*wtd.mean(s$simule_gain - s$gain, weights = s$weight))
name_by_var <- paste(by_variable, 'i', sep='_')
if (return=='alpha') return(median(hat_alpha_i))
else if (return=='all') return(list('alpha'=median(hat_alpha_i),  name_by_var=variable_i, 'G_i'=G_i, 'gain_i'=gain_i, 'b_i'=b_i ,'G_F_i'=G_F_i, 'hat_g_F_i'=hat_g_F_i, 'hat_alpha_i'=hat_alpha_i)) #
else if (return=='hat_alpha_i') return(hat_alpha_i)
else if (return=='b_i') return(b_i)
else return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
}
confirmation_bias('gain', 7, TRUE, 'all', 'mean') # higher values yield non monotonic functions
confirmation_bias <- function(by_variable = 'gain', nb_bin = 8, local_b = TRUE, return='all', method='median') { # return = c('all', '', 'alpha', 'hat_alpha_i', 'b_i')
nb_bins <- length(levels(binning(s[[by_variable]], bins=nb_bin, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
bins <- binning(s[[by_variable]], bins=nb_bin, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
gain_i <- G_F_i <- b_i <- G_i <- p_i <- variable_i <- c()
for (i in 1:nb_bins) {
p_i <- c(p_i, sum(s$weight[s$variante_taxe_info=='f' & bins==i])/sum(s$weight[s$variante_taxe_info=='f']))
G_i <- c(G_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
G_F_i <- c(G_F_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
if (method=='median') {
variable_i <- c(variable_i, wtd.median(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weight=s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.median(s$gain[s$variante_taxe_info=='f' & bins==i], weight = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.median((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weight = s$weight[s$variante_taxe_info=='f' & bins==i]))
} else if (method=='mean') {
variable_i <- c(variable_i, wtd.mean(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weights=s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.mean(s$gain[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.mean((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
}
s$b_i[s$variante_taxe_info=='f' & bins==i] <<- b_i[i] }
plot(1:nb_bins, G_F_i, type='l', xlab=paste('bins of', by_variable, '(lowest to highest)'), ylab="Probability that G^F ≠ 'Perdant'") + grid()
lowess_gains <- loess((gagnant_categorie!='Perdant') ~ I(simule_gain - b_i), data=s)
f__1 <- function(x, xmin=-500, xmax=300, by=10) approxfun(predict(lowess_gains, newdata = seq(xmin, xmax, by=by)), seq(xmin, xmax, by=by), rule=2)(x) # imputes extremal values when outside bonds
plot(seq(-500, 300, by=10), predict(lowess_gains, newdata = seq(-500, 300, by=10)), type='l', col='red')
hat_g_F_i <- f__1(G_F_i)
hat_alpha_i <- 1 + (gain_i - hat_g_F_i)/(b_i*local_b + (!local_b)*wtd.mean(s$simule_gain - s$gain, weights = s$weight))
name_by_var <- paste(by_variable, 'i', sep='_')
if (return=='alpha') return(median(hat_alpha_i))
else if (return=='all') return(list('alpha'=median(hat_alpha_i),  name_by_var=variable_i, 'G_i'=G_i, 'gain_i'=gain_i, 'b_i'=b_i ,'G_F_i'=G_F_i, 'hat_g_F_i'=hat_g_F_i, 'hat_alpha_i'=hat_alpha_i)) #
else if (return=='hat_alpha_i') return(hat_alpha_i)
else if (return=='b_i') return(b_i)
else return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
}
confirmation_bias('gain', 7, TRUE, 'all', 'mean') # higher values yield non monotonic functions
confirmation_bias('gain_echelle', 8, TRUE, 'all', 'mean')
list(a='r')
list('a'='r')
confirmation_bias('gain', 7, TRUE, 'all', 'mean') # higher values yield non monotonic functions
# alpha n'est presque jamais entre 0 et 1 ! i.e. les répondants n'updatent pas correctement
# me semble le plus pertinent car repose sur une variable objective
confirmation_bias('simule_gain', 8, TRUE, 'all', 'mean') # higher values yield non monotonic functions
confirmation_bias <- function(by_variable = 'gain', nb_bin = 8, local_b = TRUE, return='all', method='median') { # return = c('all', '', 'alpha', 'hat_alpha_i', 'b_i')
nb_bins <- length(levels(binning(s[[by_variable]], bins=nb_bin, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
bins <- binning(s[[by_variable]], bins=nb_bin, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
gain_i <- G_F_i <- b_i <- G_i <- p_i <- variable_i <- c()
for (i in 1:nb_bins) {
p_i <- c(p_i, sum(s$weight[s$variante_taxe_info=='f' & bins==i])/sum(s$weight[s$variante_taxe_info=='f']))
G_i <- c(G_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
G_F_i <- c(G_F_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
if (method=='median') {
variable_i <- c(variable_i, wtd.median(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weight=s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.median(s$gain[s$variante_taxe_info=='f' & bins==i], weight = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.median((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weight = s$weight[s$variante_taxe_info=='f' & bins==i]))
} else if (method=='mean') {
variable_i <- c(variable_i, wtd.mean(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weights=s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.mean(s$gain[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.mean((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
}
s$b_i[s$variante_taxe_info=='f' & bins==i] <<- b_i[i] }
plot(1:nb_bins, G_F_i, type='l', xlab=paste('bins of', by_variable, '(lowest to highest)'), ylab="Probability that G^F ≠ 'Perdant'") + grid()
lowess_gains <- loess((gagnant_categorie!='Perdant') ~ I(simule_gain - b_i), data=s)
f__1 <- function(x, xmin=-500, xmax=300, by=10) approxfun(predict(lowess_gains, newdata = seq(xmin, xmax, by=by)), seq(xmin, xmax, by=by), rule=2)(x) # imputes extremal values when outside bonds
plot(seq(-500, 300, by=10), predict(lowess_gains, newdata = seq(-500, 300, by=10)), xlab=paste('simule_gain - biais_bin(i), où bin vient de', by_variable), ylab='Proba that G != Perdant', type='l', col='red')
hat_g_F_i <- f__1(G_F_i)
hat_alpha_i <- 1 + (gain_i - hat_g_F_i)/(b_i*local_b + (!local_b)*wtd.mean(s$simule_gain - s$gain, weights = s$weight))
name_by_var <- paste(by_variable, 'i', sep='_')
if (return=='alpha') return(median(hat_alpha_i))
else if (return=='all') return(list('alpha'=median(hat_alpha_i),  name_by_var=variable_i, 'G_i'=G_i, 'gain_i'=gain_i, 'b_i'=b_i ,'G_F_i'=G_F_i, 'hat_g_F_i'=hat_g_F_i, 'hat_alpha_i'=hat_alpha_i)) #
else if (return=='hat_alpha_i') return(hat_alpha_i)
else if (return=='b_i') return(b_i)
else return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
}
# alpha n'est presque jamais entre 0 et 1 ! i.e. les répondants n'updatent pas correctement
# me semble le plus pertinent car repose sur une variable objective
confirmation_bias('simule_gain', 8, TRUE, 'all', 'mean') # higher values yield non monotonic functions
confirmation_bias('gain', 7, TRUE, 'all', 'mean') # higher values yield non monotonic functions
confirmation_bias('gain_echelle', 5, TRUE, 'all', 'mean')
confirmation_bias('gain_echelle', 4, TRUE, 'all', 'mean')
confirmation_bias('gain_echelle', 3, TRUE, 'all', 'mean')
confirmation_bias('gain_echelle', 2, TRUE, 'all', 'mean')
confirmation_bias('gain_echelle', 1, TRUE, 'all', 'mean')
confirmation_bias('gain_echelle', 20, TRUE, 'all', 'mean')
confirmation_bias('gain', 7, TRUE, 'all', 'mean') # higher values yield non monotonic functions
confirmation_bias('gain', 1, TRUE, 'all', 'mean')
confirmation_bias(nb_bin = 1, method='mean')
# me semble le plus pertinent a priori car repose sur une variable objective, mais donne des résultats aberrants
confirmation_bias('simule_gain', 8, TRUE, 'all', 'mean') # higher values yield non monotonic functions
# gain_echelle marche bien
confirmation_bias('gain_echelle', 8, TRUE, 'all', 'mean')
confirmation_bias('gain_echelle', 8, TRUE, 'all', 'median')
confirmation_bias('gain_echelle', 5, TRUE, 'all', 'median')
# gain_echelle marche bien
confirmation_bias('gain_echelle', 8, TRUE, 'all', 'mean')
decrit(s$simule_gain[s$gain==0])
decrit(s$simule_gain[s$gain==0])
decrit(s$simule_gain[s$gain==0])
decrit(s$simule_gain[s$gain==0])
decrit(s$simule_gain[s$gain==0 & s$variante_taxe_info=='f'], weights= s$weight[s$gain==0 & s$variante_taxe_info=='f'])
decrit(s$simule_gain[s$gain==0 & s$variante_taxe_info=='f'])
confirmation_bias('gain_echelle', 8, TRUE, 'all', 'median')
# preferred specification (pb: prendre gain_echelle rend les bin endogènes)
confirmation_bias('gain', 8, TRUE, 'all', 'median')
confirmation_bias <- function(by_variable = 'gain', nb_bin = 8, local_b = TRUE, return='all', method='median') { # return = c('all', '', 'alpha', 'hat_alpha_i', 'b_i')
nb_bins <- length(levels(binning(s[[by_variable]], bins=nb_bin, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
bins <- binning(s[[by_variable]], bins=nb_bin, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
gain_i <- G_F_i <- b_i <- G_i <- p_i <- variable_i <- c()
for (i in 1:nb_bins) {
p_i <- c(p_i, sum(s$weight[s$variante_taxe_info=='f' & bins==i])/sum(s$weight[s$variante_taxe_info=='f']))
G_i <- c(G_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
G_F_i <- c(G_F_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
if (method=='median') {
variable_i <- c(variable_i, wtd.median(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weight=s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.median(s$gain[s$variante_taxe_info=='f' & bins==i], weight = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.median((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weight = s$weight[s$variante_taxe_info=='f' & bins==i]))
} else if (method=='mean') {
variable_i <- c(variable_i, wtd.mean(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weights=s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.mean(s$gain[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.mean((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
}
s$b_i[s$variante_taxe_info=='f' & bins==i] <<- b_i[i] }
plot(1:nb_bins, G_F_i, type='l', xlab=paste('bins of', by_variable, '(lowest to highest)'), ylab="Probability that G^F ≠ 'Perdant'") + grid()
lowess_gains <- loess((gagnant_categorie!='Perdant') ~ I(simule_gain - b_i), data=s)
f__1 <- function(x, xmin=-500, xmax=300, by=10) approxfun(predict(lowess_gains, newdata = seq(xmin, xmax, by=by)), seq(xmin, xmax, by=by), rule=2)(x) # imputes extremal values when outside bonds
plot(seq(-500, 300, by=10), predict(lowess_gains, newdata = seq(-500, 300, by=10)), xlab=paste('simule_gain - biais_bin(i), où bin vient de', by_variable), ylab='Proba that G != Perdant', type='l', col='red') + grid()
hat_g_F_i <- f__1(G_F_i)
hat_alpha_i <- 1 + (gain_i - hat_g_F_i)/(b_i*local_b + (!local_b)*wtd.mean(s$simule_gain - s$gain, weights = s$weight))
name_by_var <- paste(by_variable, 'i', sep='_')
if (return=='alpha') return(median(hat_alpha_i))
else if (return=='all') return(list('alpha'=median(hat_alpha_i),  name_by_var=variable_i, 'G_i'=G_i, 'gain_i'=gain_i, 'b_i'=b_i ,'G_F_i'=G_F_i, 'hat_g_F_i'=hat_g_F_i, 'hat_alpha_i'=hat_alpha_i)) #
else if (return=='hat_alpha_i') return(hat_alpha_i)
else if (return=='b_i') return(b_i)
else return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
}
# preferred specification (pb: prendre gain_echelle rend les bin endogènes)
confirmation_bias('gain', 8, TRUE, 'all', 'median')
confirmation_bias <- function(by_variable = 'gain', nb_bin = 8, local_b = TRUE, return='all', method='median') { # return = c('all', '', 'alpha', 'hat_alpha_i', 'b_i')
nb_bins <- length(levels(binning(s[[by_variable]], bins=nb_bin, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
print(nb_bins)
bins <- binning(s[[by_variable]], bins=nb_bin, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
gain_i <- G_F_i <- b_i <- G_i <- p_i <- variable_i <- c()
for (i in 1:nb_bins) {
p_i <- c(p_i, sum(s$weight[s$variante_taxe_info=='f' & bins==i])/sum(s$weight[s$variante_taxe_info=='f']))
G_i <- c(G_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
G_F_i <- c(G_F_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
if (method=='median') {
variable_i <- c(variable_i, wtd.median(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weight=s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.median(s$gain[s$variante_taxe_info=='f' & bins==i], weight = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.median((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weight = s$weight[s$variante_taxe_info=='f' & bins==i]))
} else if (method=='mean') {
variable_i <- c(variable_i, wtd.mean(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weights=s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.mean(s$gain[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.mean((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
}
s$b_i[s$variante_taxe_info=='f' & bins==i] <<- b_i[i] }
plot(1:nb_bins, G_F_i, type='l', xlab=paste('bins of', by_variable, '(lowest to highest)'), ylab="Probability that G^F ≠ 'Perdant'") + grid()
lowess_gains <- loess((gagnant_categorie!='Perdant') ~ I(simule_gain - b_i), data=s)
f__1 <- function(x, xmin=-500, xmax=300, by=10) approxfun(predict(lowess_gains, newdata = seq(xmin, xmax, by=by)), seq(xmin, xmax, by=by), rule=2)(x) # imputes extremal values when outside bonds
plot(seq(-500, 300, by=10), predict(lowess_gains, newdata = seq(-500, 300, by=10)), xlab=paste('simule_gain - biais_bin(i), où bin vient de', by_variable), ylab='Proba that G != Perdant', type='l', col='red') + grid()
hat_g_F_i <- f__1(G_F_i)
hat_alpha_i <- 1 + (gain_i - hat_g_F_i)/(b_i*local_b + (!local_b)*wtd.mean(s$simule_gain - s$gain, weights = s$weight))
name_by_var <- paste(by_variable, 'i', sep='_')
if (return=='alpha') return(median(hat_alpha_i))
else if (return=='all') return(list('alpha'=median(hat_alpha_i),  name_by_var=variable_i, 'G_i'=G_i, 'gain_i'=gain_i, 'b_i'=b_i ,'G_F_i'=G_F_i, 'hat_g_F_i'=hat_g_F_i, 'hat_alpha_i'=hat_alpha_i)) #
else if (return=='hat_alpha_i') return(hat_alpha_i)
else if (return=='b_i') return(b_i)
else return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
}
# preferred specification (pb: prendre gain_echelle rend les bin endogènes)
confirmation_bias('gain', 8, TRUE, 'all', 'median')
confirmation_bias <- function(by_variable = 'gain', nb_bin = 8, local_b = TRUE, return='all', method='median') { # return = c('all', '', 'alpha', 'hat_alpha_i', 'b_i')
nb_bins <- length(levels(binning(s[[by_variable]], bins=nb_bin, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
bins <- binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
gain_i <- G_F_i <- b_i <- G_i <- p_i <- variable_i <- c()
for (i in 1:nb_bins) {
p_i <- c(p_i, sum(s$weight[s$variante_taxe_info=='f' & bins==i])/sum(s$weight[s$variante_taxe_info=='f']))
G_i <- c(G_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
G_F_i <- c(G_F_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
if (method=='median') {
variable_i <- c(variable_i, wtd.median(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weight=s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.median(s$gain[s$variante_taxe_info=='f' & bins==i], weight = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.median((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weight = s$weight[s$variante_taxe_info=='f' & bins==i]))
} else if (method=='mean') {
variable_i <- c(variable_i, wtd.mean(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weights=s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.mean(s$gain[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.mean((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
}
s$b_i[s$variante_taxe_info=='f' & bins==i] <<- b_i[i] }
plot(1:nb_bins, G_F_i, type='l', xlab=paste('bins of', by_variable, '(lowest to highest)'), ylab="Probability that G^F ≠ 'Perdant'") + grid()
lowess_gains <- loess((gagnant_categorie!='Perdant') ~ I(simule_gain - b_i), data=s)
f__1 <- function(x, xmin=-500, xmax=300, by=10) approxfun(predict(lowess_gains, newdata = seq(xmin, xmax, by=by)), seq(xmin, xmax, by=by), rule=2)(x) # imputes extremal values when outside bonds
plot(seq(-500, 300, by=10), predict(lowess_gains, newdata = seq(-500, 300, by=10)), xlab=paste('simule_gain - biais_bin(i), où bin vient de', by_variable), ylab='Proba that G != Perdant', type='l', col='red') + grid()
hat_g_F_i <- f__1(G_F_i)
hat_alpha_i <- 1 + (gain_i - hat_g_F_i)/(b_i*local_b + (!local_b)*wtd.mean(s$simule_gain - s$gain, weights = s$weight))
name_by_var <- paste(by_variable, 'i', sep='_')
if (return=='alpha') return(median(hat_alpha_i))
else if (return=='all') return(list('alpha'=median(hat_alpha_i),  name_by_var=variable_i, 'G_i'=G_i, 'gain_i'=gain_i, 'b_i'=b_i ,'G_F_i'=G_F_i, 'hat_g_F_i'=hat_g_F_i, 'hat_alpha_i'=hat_alpha_i)) #
else if (return=='hat_alpha_i') return(hat_alpha_i)
else if (return=='b_i') return(b_i)
else return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
}
# preferred specification (pb: prendre gain_echelle rend les bin endogènes)
confirmation_bias('gain', 8, TRUE, 'all', 'median')
confirmation_bias <- function(by_variable = 'gain', nb_bin = 8, local_b = TRUE, return='all', method='median') { # return = c('all', '', 'alpha', 'hat_alpha_i', 'b_i')
nb_bins <- length(levels(binning(s[[by_variable]], bins=nb_bin, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
print(nb_bins)
bins <- binning(s[[by_variable]], bins=nb_bins, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
gain_i <- G_F_i <- b_i <- G_i <- p_i <- variable_i <- c()
for (i in 1:nb_bins) {
p_i <- c(p_i, sum(s$weight[s$variante_taxe_info=='f' & bins==i])/sum(s$weight[s$variante_taxe_info=='f']))
G_i <- c(G_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
G_F_i <- c(G_F_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
if (method=='median') {
variable_i <- c(variable_i, wtd.median(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weight=s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.median(s$gain[s$variante_taxe_info=='f' & bins==i], weight = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.median((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weight = s$weight[s$variante_taxe_info=='f' & bins==i]))
} else if (method=='mean') {
variable_i <- c(variable_i, wtd.mean(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weights=s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.mean(s$gain[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.mean((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
}
s$b_i[s$variante_taxe_info=='f' & bins==i] <<- b_i[i] }
plot(1:nb_bins, G_F_i, type='l', xlab=paste('bins of', by_variable, '(lowest to highest)'), ylab="Probability that G^F ≠ 'Perdant'") + grid()
lowess_gains <- loess((gagnant_categorie!='Perdant') ~ I(simule_gain - b_i), data=s)
f__1 <- function(x, xmin=-500, xmax=300, by=10) approxfun(predict(lowess_gains, newdata = seq(xmin, xmax, by=by)), seq(xmin, xmax, by=by), rule=2)(x) # imputes extremal values when outside bonds
plot(seq(-500, 300, by=10), predict(lowess_gains, newdata = seq(-500, 300, by=10)), xlab=paste('simule_gain - biais_bin(i), où bin vient de', by_variable), ylab='Proba that G != Perdant', type='l', col='red') + grid()
hat_g_F_i <- f__1(G_F_i)
hat_alpha_i <- 1 + (gain_i - hat_g_F_i)/(b_i*local_b + (!local_b)*wtd.mean(s$simule_gain - s$gain, weights = s$weight))
name_by_var <- paste(by_variable, 'i', sep='_')
if (return=='alpha') return(median(hat_alpha_i))
else if (return=='all') return(list('alpha'=median(hat_alpha_i),  name_by_var=variable_i, 'G_i'=G_i, 'gain_i'=gain_i, 'b_i'=b_i ,'G_F_i'=G_F_i, 'hat_g_F_i'=hat_g_F_i, 'hat_alpha_i'=hat_alpha_i)) #
else if (return=='hat_alpha_i') return(hat_alpha_i)
else if (return=='b_i') return(b_i)
else return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
}
# preferred specification (pb: prendre gain_echelle rend les bin endogènes)
confirmation_bias('gain', 8, TRUE, 'all', 'median')
confirmation_bias <- function(by_variable = 'gain', nb_bin = 8, local_b = TRUE, return='all', method='median') { # return = c('all', '', 'alpha', 'hat_alpha_i', 'b_i')
nb_bins <- length(levels(binning(s[[by_variable]], bins=nb_bin, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
print(nb_bins)
bins <- binning(s[[by_variable]], bins=nb_bin, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
gain_i <- G_F_i <- b_i <- G_i <- p_i <- variable_i <- c()
for (i in 1:nb_bins) {
p_i <- c(p_i, sum(s$weight[s$variante_taxe_info=='f' & bins==i])/sum(s$weight[s$variante_taxe_info=='f']))
G_i <- c(G_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
G_F_i <- c(G_F_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
if (method=='median') {
variable_i <- c(variable_i, wtd.median(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weight=s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.median(s$gain[s$variante_taxe_info=='f' & bins==i], weight = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.median((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weight = s$weight[s$variante_taxe_info=='f' & bins==i]))
} else if (method=='mean') {
variable_i <- c(variable_i, wtd.mean(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weights=s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.mean(s$gain[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.mean((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
}
s$b_i[s$variante_taxe_info=='f' & bins==i] <<- b_i[i] }
plot(1:nb_bins, G_F_i, type='l', xlab=paste('bins of', by_variable, '(lowest to highest)'), ylab="Probability that G^F ≠ 'Perdant'") + grid()
lowess_gains <- loess((gagnant_categorie!='Perdant') ~ I(simule_gain - b_i), data=s)
f__1 <- function(x, xmin=-500, xmax=300, by=10) approxfun(predict(lowess_gains, newdata = seq(xmin, xmax, by=by)), seq(xmin, xmax, by=by), rule=2)(x) # imputes extremal values when outside bonds
plot(seq(-500, 300, by=10), predict(lowess_gains, newdata = seq(-500, 300, by=10)), xlab=paste('simule_gain - biais_bin(i), où bin vient de', by_variable), ylab='Proba that G != Perdant', type='l', col='red') + grid()
hat_g_F_i <- f__1(G_F_i)
hat_alpha_i <- 1 + (gain_i - hat_g_F_i)/(b_i*local_b + (!local_b)*wtd.mean(s$simule_gain - s$gain, weights = s$weight))
name_by_var <- paste(by_variable, 'i', sep='_')
if (return=='alpha') return(median(hat_alpha_i))
else if (return=='all') return(list('alpha'=median(hat_alpha_i),  name_by_var=variable_i, 'G_i'=G_i, 'gain_i'=gain_i, 'b_i'=b_i ,'G_F_i'=G_F_i, 'hat_g_F_i'=hat_g_F_i, 'hat_alpha_i'=hat_alpha_i)) #
else if (return=='hat_alpha_i') return(hat_alpha_i)
else if (return=='b_i') return(b_i)
else return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
}
# preferred specification (pb: prendre gain_echelle rend les bin endogènes)
confirmation_bias('gain', 8, TRUE, 'all', 'median')
# preferred specification (pb: prendre gain_echelle rend les bin endogènes)
confirmation_bias('gain', 7, TRUE, 'all', 'median')
confirmation_bias <- function(by_variable = 'gain', nb_bin = 8, local_b = TRUE, return='all', method='median') { # return = c('all', '', 'alpha', 'hat_alpha_i', 'b_i')
nb_bins <- length(levels(binning(s[[by_variable]], bins=nb_bin, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
bins <- binning(s[[by_variable]], bins=nb_bin, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
gain_i <- G_F_i <- b_i <- G_i <- p_i <- variable_i <- c()
for (i in 1:nb_bins) {
p_i <- c(p_i, sum(s$weight[s$variante_taxe_info=='f' & bins==i])/sum(s$weight[s$variante_taxe_info=='f']))
G_i <- c(G_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
G_F_i <- c(G_F_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_categorie!='Perdant' & bins==i])/sum(s$weight[s$variante_taxe_info=='f' & bins==i]))
if (method=='median') {
variable_i <- c(variable_i, wtd.median(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weight=s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.median(s$gain[s$variante_taxe_info=='f' & bins==i], weight = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.median((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weight = s$weight[s$variante_taxe_info=='f' & bins==i]))
} else if (method=='mean') {
variable_i <- c(variable_i, wtd.mean(s[[by_variable]][s$variante_taxe_info=='f' & bins==i], weights=s$weight[s$variante_taxe_info=='f' & bins==i]))
gain_i <- c(gain_i, wtd.mean(s$gain[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
b_i <- c(b_i, wtd.mean((s$simule_gain - s$gain)[s$variante_taxe_info=='f' & bins==i], weights = s$weight[s$variante_taxe_info=='f' & bins==i]))
}
s$b_i[s$variante_taxe_info=='f' & bins==i] <<- b_i[i] }
plot(1:nb_bins, G_F_i, type='l', xlab=paste('bins of', by_variable, '(lowest to highest)'), ylab="Probability that G^F ≠ 'Perdant'") + grid()
lowess_gains <- loess((gagnant_categorie!='Perdant') ~ I(simule_gain - b_i), data=s)
f__1 <- function(x, xmin=-500, xmax=300, by=10) approxfun(predict(lowess_gains, newdata = seq(xmin, xmax, by=by)), seq(xmin, xmax, by=by), rule=2)(x) # imputes extremal values when outside bonds
plot(seq(-500, 300, by=10), predict(lowess_gains, newdata = seq(-500, 300, by=10)), xlab=paste('simule_gain - biais_bin(i), où bin vient de', by_variable), ylab='Proba that G != Perdant', type='l', col='red') + grid()
hat_g_F_i <- f__1(G_F_i)
hat_alpha_i <- 1 + (gain_i - hat_g_F_i)/(b_i*local_b + (!local_b)*wtd.mean(s$simule_gain - s$gain, weights = s$weight))
name_by_var <- paste(by_variable, 'i', sep='_')
if (return=='alpha') return(median(hat_alpha_i))
else if (return=='all') return(list('alpha'=median(hat_alpha_i),  name_by_var=variable_i, 'G_i'=G_i, 'gain_i'=gain_i, 'b_i'=b_i ,'G_F_i'=G_F_i, 'hat_g_F_i'=hat_g_F_i, 'hat_alpha_i'=hat_alpha_i)) #
else if (return=='hat_alpha_i') return(hat_alpha_i)
else if (return=='b_i') return(b_i)
else return(list('alpha'=median(hat_alpha_i), 'hat_alpha_i'=hat_alpha_i, 'b_i'=b_i))
}
# preferred specification (pb: prendre gain_echelle rend les bin endogènes)
confirmation_bias('gain', 7, TRUE, 'all', 'median')
# me semble le plus pertinent a priori car repose sur une variable objective, mais donne des résultats aberrants
confirmation_bias('simule_gain', 8, TRUE, 'all', 'mean') # higher values yield non monotonic functions
confirmation_bias('simule_gain', 6, TRUE, 'all', 'mean')
confirmation_bias('simule_gain', 5, TRUE, 'all', 'mean')
confirmation_bias('simule_gain', 7, TRUE, 'all', 'mean')
confirmation_bias('simule_gain', 4, TRUE, 'all', 'mean')
confirmation_bias('simule_gain', 3, TRUE, 'all', 'mean')
confirmation_bias('simule_gain', 15, TRUE, 'all', 'mean')
confirmation_bias('simule_gain', 12, TRUE, 'all', 'mean')
confirmation_bias('simule_gain', 11, TRUE, 'all', 'mean')
confirmation_bias('simule_gain', 10, TRUE, 'all', 'mean')
confirmation_bias('simule_gain', 10, TRUE, 'all', 'median')
confirmation_bias('simule_gain', 8, TRUE, 'all', 'median')
confirmation_bias('simule_gain', 7, TRUE, 'all', 'median')
# me semble le plus pertinent a priori car repose sur une variable objective, mais donne des résultats aberrants
confirmation_bias('simule_gain', 6, TRUE, 'all', 'median')
# me semble le plus pertinent a priori car repose sur une variable objective, mais donne des résultats aberrants
confirmation_bias('simule_gain', 5, TRUE, 'all', 'median')
# me semble le plus pertinent a priori car repose sur une variable objective, mais donne des résultats aberrants
confirmation_bias('simule_gain', 4, TRUE, 'all', 'median')
# me semble le plus pertinent a priori car repose sur une variable objective, mais donne des résultats aberrants
confirmation_bias('simule_gain', 7, TRUE, 'all', 'median')
confirmation_bias('simule_gain', 7, FALSE, 'all', 'median')
decrit(s$cause_CC)
decrit(s$diplome4)
24/30
summary(lm(taxe_approbation=='Oui' ~ diplome4, data=s))
summary(lm(taxe_approbation=='Oui' ~ diplome4==1, data=s))
summary(lm(taxe_approbation=='Oui' ~ diplome4==0, data=s))
summary(lm(taxe_approbation=='Oui' ~ diplome4==1, data=s))
summary(lm(gain ~ diplome4==1, data=s))
summary(lm(gagnant_categorie=='Perdant' ~ diplome4==1, data=s))
summary(lm(gagnant_categorie=='Gagnant' ~ diplome4==1, data=s))
