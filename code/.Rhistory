<<<<<<< refs/remotes/thomasdouenne/master
<<<<<<< refs/remotes/thomasdouenne/master
<<<<<<< refs/remotes/thomasdouenne/master
<<<<<<< refs/remotes/thomasdouenne/master
s[k][[1]] <<- as.item(temp, labels = structure(c(-2:2),
names = c("Pas du tout","Pas vraiment","Indifférent/NSP","Plutôt","Tout à fait")),
# names = c("Non, pas du tout","Non, pas vraiment","Indifférent ou Ne sais pas","Oui, plutôt","Oui, tout à fait")),
annotation=Label(s[k][[1]]))
}
temp <- (s$parle_CC=='Plusieurs fois par an') + 2*(s$parle_CC=='Plusieurs fois par mois') - (s$parle_CC=="NSP")
s$parle_CC <<- as.item(temp, labels = structure(c(-1:2),
names = c("NSP","Presque jamais","Plusieurs fois par an","Plusieurs fois par mois")),
missing.values = -1, annotation=Label(s$parle_CC))
temp <- grepl("Faibles", s$effets_CC) + 2*grepl("Graves", s$effets_CC) + 3*grepl("Désastreux", s$effets_CC) + 4*grepl("Cataclysmiques", s$effets_CC) - (s$effets_CC=="NSP")
s$effets_CC <<- as.item(temp, labels = structure(c(-1:4),
names = c("NSP","Insignifiants","Faibles","Graves","Désastreux","Cataclysmiques")),
# names = c("NSP","Insignifiants, voire bénéfiques","Faibles, car les humains sauraient vivre avec","Graves, car il y aurait plus de catastrophes naturelles","Désastreux, les modes de vie seraient largement altérés","Cataclysmiques, l'humanité disparaîtrait")),
missing.values = -1, annotation=Label(s$effets_CC))
temp <- (s$transports_frequence=="Entre quatre fois par jour et une fois par heure") + 2*(s$transports_frequence=="Une ou deux fois par heure") + 3*(s$transports_frequence=="Plus que trois fois par heure") - (s$transports_frequence=="NSP")
s$transports_frequence <<- as.item(temp, labels = structure(c(-1:3),
names = c("NSP","< 3/jour","1/h - 4/jour","1/h - 2/h","> 3/heure")),
# names = c("NSP","Moins de trois fois par jour","Entre quatre fois par jour et une fois par heure","Une ou deux fois par heure","Plus que trois fois par heure")),
missing.values = -1, annotation=Label(s$transports_frequence))
temp <- (s$transports_avis=="Limitée, mais suffisante") + 2*(s$transports_avis=="Convenable, mais devrait être accrue") + 3*(s$transports_avis=="Satisfaisante") - (s$transports_avis=="NSP")
s$transports_avis <<- as.item(temp, labels = structure(c(-1:3),
names = c("NSP","Insuffisante","Limitée","Convenable","Satisfaisante")),
# names = c("NSP","Insuffisante","Limitée, mais suffisante","Convenable, mais devrait être accrue","Satisfaisante")),
missing.values = -1, annotation=Label(s$transports_avis))
labels(s$transports_travail_commun) <<- c("Non"="Non", "NSP"="NSP", "Oui, aucun pb"="Oui, ça ne me poserait pas de grande difficulté", "Oui, embêtant"="Oui, mais ça m'embêterait")
labels(s$transports_travail_actif) <<- c("Non"="Non", "NSP"="NSP", "Oui, aucun pb"="Oui, ça ne me poserait pas de grande difficulté", "Oui, embêtant"="Oui, mais ça m'embêterait")
s$Transports_travail_commun <<- s$transports_travail_commun
s$Transports_travail_actif <<- s$transports_travail_actif
s$Transports_travail_commun[is.na(s$Transports_travail_commun)] <<- "Non concerné"
s$Transports_travail_actif[is.na(s$Transports_travail_actif)] <<- "Non concerné"
s$Transports_travail_actif <<- as.item(as.character(s$Transports_travail_actif), missing.values=c('NSP', "Non concerné"), annotation="Transports_travail_actif: (transports_travail_actif sans NA) Sans changer de logement ni de lieu de travail, il serait possible pour le répondant prenant sa voiture d'effectuer ses trajets domicile-travail en marchant ou en vélo (Non/Oui mais ça l'embêterait/Oui ça ne lui poserait pas de grande difficulté/NSP)")
s$Transports_travail_commun <<- as.item(as.character(s$Transports_travail_commun), missing.values=c('NSP', "Non concerné"), annotation="Transports_travail_commun: (transports_travail_commun sans NA) Sans changer de logement ni de lieu de travail, il serait possible pour le répondant prenant sa voiture de prendre les transports en commun pour ses trajets domicile-travail (Non/Oui mais ça l'embêterait/Oui ça ne lui poserait pas de grande difficulté/NSP)")
s$Transports_distance <<- s$transports_distance
s$Transports_distance[is.na(s$Transports_distance)] <<- mean(s$transports_distance, na.rm=T)
s$Transports_distance <<- as.item(n(s$Transports_distance), missing.values = mean(s$transports_distance, na.rm=T), annotation="Transports_distance: (transports_distance sans NA) L'arrêt de transport en commun le plus proche de chez le répondant est à X minutes de marche")
# TODO: récupérer le vrai âge à partir de ID_age_dep_device.csv
temp <- 20.90*(s$age == "18 à 24 ans") + 29.61*(s$age == "25 à 34 ans") + 42.14*(s$age == "35 à 49 ans") + 56.84*(s$age == "50 à 64 ans") + 75.43*(s$age == "65 ans ou plus")
s$age <<- as.item(temp, labels = structure(c(20.90, 29.61, 42.14, 56.84, 75.43), names = c("18-24", "25-34", "35-49", "50-64", "65+")), annotation=Label(s$age))
# s$Age <<- (s$age == "18 à 24 ans") + 2*(s$age == "25 à 34 ans") + 3.3*(s$age == "35 à 49 ans") + 4.6*(s$age == "50 à 64 ans") + 7*(s$age == "65 ans ou plus")
s$taille_agglo <<- as.item(as.numeric(s$taille_agglo), labels = structure(1:5, names = c("rural", "-20k", "20-100k", "+100k", "Paris")), annotation=Label(s$taille_agglo))
s$Diplome <<- (s$diplome == "Brevet des collèges") + 2*(s$diplome=="CAP ou BEP") + 3*(s$diplome=="Baccalauréat") + 4*(s$diplome=="Bac +2 (BTS, DUT, DEUG, écoles de formation sanitaires et sociales...)") + 5*(s$diplome=="Bac +3 (licence...)") + 6*(s$diplome=="Bac +5 ou plus (master, école d'ingénieur ou de commerce, doctorat, médecine, maîtrise, DEA, DESS...)") - (s$diplome=="NSP (Ne se prononce pas)")
s$diplome4 <<- as.item(pmin(pmax(s$Diplome, 1), 4), labels = structure(1:4, names = c("Aucun diplôme ou brevet", "CAP ou BEP", "Baccalauréat", "Supérieur")), annotation=Label(s$diplome))
# s$diplome4 <<- as.character(s$diplome)
# s$diplome4[s$Diplome<2] <<- "Aucun diplôme ou brevet"
# s$diplome4[s$Diplome>3] <<- "Supérieur"
# labels(s$mode_chauffage) <<- c("individuel"="Chauffage individuel", "collectif"="Chauffage collectif", "NSP"="NSP")
# labels(s$chauffage) <<- c("Gaz réseau"="Gaz de ville", "Gaz bouteille"="Butane, propane, gaz en citerne", "Fioul"="Fioul, mazout, pétrole", "Électricité"="Électricité", "Bois, solaire..."="Bois, solaire, géothermie, aérothermie (pompe à chaleur)", "Autre"="Autre", "NSP"="NSP")
# labels(s$schiste_CC) <<- c("malvenue"="Elle est malvenue : il faudrait mettre fin aux émissions, pas seulement les ralentir", "valable"="Elle est valable : toute baisse des émissions va dans la bonne direction", "NSP"="NSP")
# labels(s$cause_CC) <<- c("n'existe pas"="n'est pas une réalité", "naturel"="est principalement dû à la variabilité naturelle du climat", "anthropique"="est principalement dû à l'activité humaine", "NSP"="NSP")
s$mode_chauffage <<- relabel(s$mode_chauffage, c("Chauffage individuel"="individuel", "Chauffage collectif"="collectif", "NSP"="NSP"))
s$chauffage <<- relabel(s$chauffage, c("Gaz de ville"="Gaz réseau", "Butane, propane, gaz en citerne"="Gaz bouteille", "Fioul, mazout, pétrole"="Fioul", "Électricité"="Électricité", "Bois, solaire, géothermie, aérothermie (pompe à chaleur)"="Bois, solaire...", "Autre"="Autre", "NSP"="NSP"))
s$schiste_CC <<- relabel(s$schiste_CC, c("Elle est malvenue : il faudrait mettre fin aux émissions, pas seulement les ralentir"="malvenue", "Elle est valable : toute baisse des émissions va dans la bonne direction"="valable", "NSP"="NSP"))
s$cause_CC <<- relabel(s$cause_CC, c("n'est pas une réalité"="n'existe pas", "est principalement dû à la variabilité naturelle du climat"="naturel", "est principalement dû à l'activité humaine"="anthropique", "NSP"="NSP"))
s$Compris_depenses <<- as.character(s$compris_depenses)
s$Compris_depenses[is.na(s$Compris_depenses)] <<- "NA"
s$compris_depenses <<- as.item(as.character(s$compris_depenses),
labels = structure(c("", "Oui","Non","Bug: le graphique ne s'est pas affiché correctement."), names = c("NA", "Oui","Non","Bug")), annotation=attr(s$compris_depenses, "label"))
s$enfant_CC[is.na(s$enfant_CC)] <<- "NSP"
s$enfant_CC_pour_CC[s$enfant_CC=='Non'] <<- 'Non concerné'
s$enfant_CC_pour_CC <<- as.item(as.character(s$enfant_CC_pour_CC), labels = structure(c(T, FALSE, 'Non concerné'), names=c('TRUE', 'FALSE', 'Non concerné')),
missing.values='Non concerné', annotation=Label(s$enfant_CC_pour_CC))
s$enfant_CC_pour_lui[s$enfant_CC=='Non'] <<- 'Non concerné'
s$enfant_CC_pour_lui <<- as.item(as.character(s$enfant_CC_pour_lui), labels = structure(c(T, FALSE, 'Non concerné'), names=c('TRUE', 'FALSE', 'Non concerné')),
missing.values='Non concerné', annotation=Label(s$enfant_CC_pour_lui))
s$gauche_droite <<- pmax(-2,pmin(2,-2 * grepl("extrême gauche", s$extr_gauche) - grepl("De gauche", s$gauche) + grepl("De droite", s$droite) + 2 * grepl("extrême droite", s$extr_droite)))
is.na(s$gauche_droite) <<- (s$gauche_droite == 0) & !grepl("centre", s$centre)
s$Gauche_droite <<- as.factor(s$gauche_droite)
s$gauche_droite <<- as.item(as.numeric(as.vector(s$gauche_droite)), labels = structure(c(-2:2),
names = c("Extrême gauche","Gauche","Centre","Droite","Extrême droite")), annotation="gauche_droite:échelle de -2 (extr_gauche) à +2 (extr_droite) - Orientation politique (Comment vous définiriez-vous ? Plusieurs réponses possibles: (D'extrême) gauche/Du centre/(D'extrême) droite/Libéral/Humaniste/Patriote/Apolitique/Écologiste/Conservateur (champ libre)/NSP)")
levels(s$Gauche_droite) <<- c("Extreme-left", "Left", "Center", "Right", "Extreme-right", "Indeterminate")
s$Gauche_droite[is.na(s$Gauche_droite)] <<- "Indeterminate"
temp <- Label(s$interet_politique)
s$interet_politique <<- 1*(s$interet_politique=='Un peu') + 2*(s$interet_politique=='Beaucoup')
s$interet_politique <<- as.item(s$interet_politique, labels=structure(c(0:2), names=c('Presque pas', 'Un peu', 'Beaucoup')), annotation=temp)
# s$gilets_jaunes[s$gilets_jaunes_NSP==T] <<- -99
s$gilets_jaunes[s$gilets_jaunes_compris==T] <<- 0 # total à 115%
s$gilets_jaunes[s$gilets_jaunes_oppose==T] <<- -1 # 2 oppose et soutien en même temps
s$gilets_jaunes[s$gilets_jaunes_soutien==T] <<- 1
s$gilets_jaunes[s$gilets_jaunes_dedans==T] <<- 2
label(s$gilets_jaunes) <<- "gilets_jaunes: -1: s'oppose / 0: comprend sans soutenir ni s'opposer / 1: soutient / 2: fait partie des gilets jaunes (gilets_jaunes_compris/oppose/soutien/dedans/NSP)"
s$gilets_jaunes <<- as.item(n(s$gilets_jaunes), labels = structure(c(-1:2), names=c('oppose', 'comprend', 'soutient', 'est_dedans')),
annotation=attr(s$gilets_jaunes, "label"))
# temp <- label(s$diplome)
# s$diplome <<- factor(s$diplome, c("","Aucun diplôme","Brevet des collèges","CAP ou BEP","Baccalauréat","Bac +2 (BTS, DUT, DEUG, écoles de formation sanitaires et sociales...)","Bac +3 (licence...)","Bac +5 ou plus (master, école d'ingénieur ou de commerce, doctorat, médecine, maîtrise, DEA, DESS...)","NSP (Ne se prononce pas)") )
# label(s$diplome) <<- temp
# temp <- label(s$interet_politique)
# s$interet_politique <<- factor(s$interet_politique, c("","Beaucoup","Un peu","Presque pas (ou pas du tout)","NSP","NSP (Je ne veux pas répondre)","Q20 - À quel point êtes-vous intéressé·e par la politique ?"))
# label(s$interet_politique) <<- temp
s$revenu_conjoint <<- s$rev_tot - s$revenu
s$revdisp <<- round((s$rev_tot -  irpp(s$rev_tot, s$nb_adultes, s$taille_menage)))
s$uc <<- uc(s$taille_menage, s$nb_14_et_plus)
s$niveau_vie <<- s$revdisp / s$uc
# s$age <<- as.factor(as.character(s$age))
# s$Region <<- as.factor(as.character(s$region))
# s$taille_agglo <<- as.factor(gsub("[[:alpha:] ]", "", s$taille_agglo))
# s <<- s[s$taille_agglo!="%1%",]
# pourquoi 91 missing regions? Sûrement un bug du Javascript côté utilisateur (certains types de device/navigateur?): 56% ont un bug sur compris_depenses contre 3% pour les autres
region_code <- function(code) {
reg <- "autre"
regions <- list(
"ARA" = c('01', '03', '07', '15', '26', '38', '42', '43', '63', '69', '73', '74'),
"Est" = c('21', '25', '39', '58', '70', '71', '89', '90', '08', '10', '51', '52', '54', '55', '57', '67', '68', '88'),
"Ouest" = c('22', '29', '35', '56', '14', '27', '50', '61', '76' ),
"Centre" = c('18', '28', '36', '37', '41', '45', '44', '49', '53', '72', '85'),
"Nord" = c('02', '59', '60', '62', '80'),
"IDF" = c('75', '77', '78', '91', '92', '93', '94', '95'),
"SO" = c('16', '17', '19', '23', '24', '33', '40', '47', '64', '79', '86', '87'),
"Occ" = c('09', '11', '12', '30', '31', '32', '34', '46', '48', '65', '66', '81', '82'),
"PACA" = c( '04', '05', '06', '13', '83', '84')
)
for (i in 1:9) if (as.numeric(code) %in% as.numeric(regions[[i]])) reg <- names(regions)[i]
return(reg)
} # TODO: pourquoi Centre excède de 20% le quota? Pourquoi y a-t-il aussi des excès dee quotas dans taille_agglo?
region_dep <- rep("", 95)
for (i in 1:95) region_dep[i] <- region_code(i)
s$region <<- "autre"
s$region[as.numeric(substr(s$code_postal, 1, 2)) %in% 1:95] <<- region_dep[as.numeric(substr(s$code_postal, 1, 2))]
# TODO: missing schiste_traite? dep_traites <- c(01, 02, 04, 06, 07, 08, 10, 11, 12, 13, 24, 25, 26, 30, 31, 32, 33, 34, 38, 39, 40, 45, 46, 48, 51, 54, 55, 57, 59, 60, 62, 64, 65, 67, 68, 69, 71, 73, 74, 77, 78, 82, 83, 84, 89, 90, 91, 93, 94, 95)
s$nb_vehicules <<- (s$nb_vehicules_texte=='Un') + 2*(s$nb_vehicules_texte=='Deux ou plus')
s$variante_partielle <<- 'NA'
s$variante_partielle[!is.na(s$gagnant_chauffage_categorie)] <<- 'c'
s$variante_partielle[!is.na(s$gagnant_fuel_categorie)] <<- 'f'
label(s$variante_partielle) <<- "variante_partielle: Variante aléatoire (c/f) de la taxe partielle sur le chauffage ou les carburants (=fuel)"
s$perte_relative_partielle[s$variante_partielle=='c'] <<- s$perte_relative_chauffage[s$variante_partielle=='c']
s$perte_relative_partielle[s$variante_partielle=='f'] <<- s$perte_relative_fuel[s$variante_partielle=='f']
label(s$perte_relative_partielle) <<- "perte_relative_partielle: Une hausse des taxes sur variante_partielle (chauffage ou fuel) ferait perdre plus à votre ménage que la moyenne (Oui, beaucoup/un peu plus/Autant que la moyenne/Non, un peu/beaucoup moins/NSP) - Q155, 162"
# s$gain_fuel <- NA
s$gain_fuel[s$gagnant_fuel_categorie=='Non affecté' & s$variante_partielle=='f'] <<- 0
s$gain_fuel[s$gagnant_fuel_categorie=='Gagnant' & s$variante_partielle=='f'] <<- 1 + as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$gain_taxe_fuel_hausse[s$gagnant_fuel_categorie=='Gagnant' & s$variante_partielle=='f']))))/25
s$gain_fuel[s$gagnant_fuel_categorie=='Perdant' & s$variante_partielle=='f'] <<- - 1 - as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$gain_taxe_fuel_baisse[s$gagnant_fuel_categorie=='Perdant' & s$variante_partielle=='f']))))/25
label(s$gain_fuel) <<- "gain_fuel: Catégorie de gain-perte de pouvoir d'achat par UC, suite à hausse taxe carburants compensée, dans [-6;5] (seuils: -160/-110/-70/-40/-15/0/10/20/30/40)"
s$gain_chauffage[s$gagnant_chauffage_categorie=='Non affecté' & s$variante_partielle=='c'] <<- 0
s$gain_chauffage[s$gagnant_chauffage_categorie=='Gagnant' & s$variante_partielle=='c'] <<- 1 + as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$gain_taxe_chauffage_hausse[s$gagnant_chauffage_categorie=='Gagnant' & s$variante_partielle=='c']))))/25
s$gain_chauffage[s$gagnant_chauffage_categorie=='Perdant' & s$variante_partielle=='c'] <<- - 1 - as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$gain_taxe_chauffage_baisse[s$gagnant_chauffage_categorie=='Perdant' & s$variante_partielle=='c']))))/25
label(s$gain_chauffage) <<- "gain_fuel: Catégorie de gain-perte de pouvoir d'achat par UC, suite à hausse taxe chauffage compensée, dans [-6;5] (seuils: -160/-110/-70/-40/-15/0/10/20/30/40)"
s$gagnant_partielle_categorie[s$variante_partielle=='c'] <<- s$gagnant_chauffage_categorie[s$variante_partielle=='c']
s$gagnant_partielle_categorie[s$variante_partielle=='f'] <<- s$gagnant_fuel_categorie[s$variante_partielle=='f']
label(s$gagnant_partielle_categorie) <<- "gagnant_partielle_categorie: Ménage Gagnant/Non affecté/Perdant par hausse taxe partielle (chauffage ou fuel) compensée, dans [-6;5] (seuils: -160/-110/-70/-40/-15/0/10/20/30/40) (gagnant_fuel_categorie/chauffage)"
s$gain_partielle[s$variante_partielle=='c'] <<- s$gain_chauffage[s$variante_partielle=='c']
s$gain_partielle[s$variante_partielle=='f'] <<- s$gain_fuel[s$variante_partielle=='f']
label(s$gain_partielle) <<- "gain_partielle: Catégorie de gain-perte de pouvoir d'achat par UC, suite à hausse taxe partielle (chauffage ou fuel) compensée, dans [-6;5] (seuils: -160/-110/-70/-40/-15/0/10/20/30/40) (gain_fuel/chauffage)"
s$gain[s$gagnant_categorie=='Non affecté' & s$variante_partielle!='NA'] <<- 0
s$gain[s$gagnant_categorie=='Gagnant' & s$variante_partielle!='NA'] <<- 1 + as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$gain_taxe_hausse[s$gagnant_categorie=='Gagnant' & s$variante_partielle!='NA']))))/50
s$gain[s$gagnant_categorie=='Perdant' & s$variante_partielle!='NA'] <<- - 1 - as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$gain_taxe_baisse[s$gagnant_categorie=='Perdant' & s$variante_partielle!='NA']))))/50
label(s$gain) <<- "gain: Catégorie de gain-perte de pouvoir d'achat par UC, suite à hausse taxe carbone compensée, dans [-6;5] (seuils: -280/-190/-120/-70/-30/0/20/40/60/80)"
s$gain_echelle <<- s$gain
s$gain_fuel_echelle <<- s$gain_fuel
s$gain_chauffage_echelle <<- s$gain_chauffage
s$gain_partielle_echelle <<- s$gain_fuel
s$gain_partielle_echelle[!is.na(s$gain_chauffage_echelle)] <<- s$gain_chauffage_echelle[!is.na(s$gain_chauffage_echelle)]
label(s$gain) <<- "gain: Catégorie de gain-perte de pouvoir d'achat par UC, suite à hausse taxe carbone compensée, dans [-6;5] (seuils: -280/-190/-120/-70/-30/0/20/40/60/80)"
label(s$gain_chauffage_echelle) <<- "gain_chauffage_echelle: Catégorie de gain-perte de pouvoir d'achat par UC, suite à hausse taxe chauffage compensée, dans [-6;5] (seuils: -160/-110/-70/-40/-15/0/10/20/30/40)"
label(s$gain_fuel_echelle) <<- "gain_fuel_echelle: Catégorie de gain-perte de pouvoir d'achat par UC, suite à hausse taxe carburants compensée, dans [-6;5] (seuils: -160/-110/-70/-40/-15/0/10/20/30/40)"
label(s$gain_partielle_echelle) <<- "gain_partielle_echelle: Catégorie de gain-perte de pouvoir d'achat par UC, suite à hausse taxe partielle (carburants ou chauffage) compensée, dans [-6;5] (seuils: -160/-110/-70/-40/-15/0/10/20/30/40)"
# cf. consistency_belief_losses.py pour les imputations
s$gain_min <<- -1000*(s$gain==-6) - 280*(s$gain==-5) - 190*(s$gain==-4) - 120*(s$gain==-3) - 70*(s$gain==-2) - 30*(s$gain==-1) + 0*(s$gain==1) + 20*(s$gain==2) + 40*(s$gain==3) + 60*(s$gain==4) + 80*(s$gain==5)
s$gain_max <<- -280*(s$gain==-6) - 190*(s$gain==-5) - 120*(s$gain==-4) - 70*(s$gain==-3) - 30*(s$gain==-2) - 0*(s$gain==-1) + 20*(s$gain==1) + 40*(s$gain==2) + 60*(s$gain==3) + 80*(s$gain==4) + 2000*(s$gain==5)
s$gain_fuel_min <<- -1000*(s$gain_fuel==-6) - 160*(s$gain_fuel==-5) - 110*(s$gain_fuel==-4) - 70*(s$gain_fuel==-3) - 40*(s$gain_fuel==-2) - 15*(s$gain_fuel==-1) + 0*(s$gain_fuel==1) + 10*(s$gain_fuel==2) + 20*(s$gain_fuel==3) + 30*(s$gain_fuel==4) + 40*(s$gain_fuel==5)
s$gain_fuel_max <<- -160*(s$gain_fuel==-6) - 110*(s$gain_fuel==-5) - 70*(s$gain_fuel==-4) - 40*(s$gain_fuel==-3) - 15*(s$gain_fuel==-2) - 0*(s$gain_fuel==-1) + 10*(s$gain_fuel==1) + 20*(s$gain_fuel==2) + 30*(s$gain_fuel==3) + 40*(s$gain_fuel==4) + 1000*(s$gain_fuel==5)
s$gain_chauffage_min <<- -1000*(s$gain_chauffage==-6) - 160*(s$gain_chauffage==-5) - 110*(s$gain_chauffage==-4) - 70*(s$gain_chauffage==-3) - 40*(s$gain_chauffage==-2) - 15*(s$gain_chauffage==-1) + 0*(s$gain_chauffage==1) + 10*(s$gain_chauffage==2) + 20*(s$gain_chauffage==3) + 30*(s$gain_chauffage==4) + 40*(s$gain_chauffage==5)
s$gain_chauffage_max <<- -160*(s$gain_chauffage==-6) - 110*(s$gain_chauffage==-5) - 70*(s$gain_chauffage==-4) - 40*(s$gain_chauffage==-3) - 15*(s$gain_chauffage==-2) - 0*(s$gain_chauffage==-1) + 10*(s$gain_chauffage==1) + 20*(s$gain_chauffage==2) + 30*(s$gain_chauffage==3) + 40*(s$gain_chauffage==4) + 1000*(s$gain_chauffage==5)
temp <- -405.55*(s$gain==-6) - 224.25*(s$gain==-5) - 147.91*(s$gain==-4) - 92.83*(s$gain==-3) - 48.28*(s$gain==-2) - 13.72*(s$gain==-1) + 10.39*(s$gain==1) + 30.36*(s$gain==2) + 49.96*(s$gain==3) + 69.72*(s$gain==4) + 106.89*(s$gain==5) #  - 1.66*(s$gain==0)
s$gain <<- as.item(temp, labels = structure(c(-405.55, -224.25, -147.91, -92.83, -48.28, -13.72, 0, 10.39, 30.36, 49.96, 69.72, 106.89), names = c("<-280", "-280_-190", "-190_-120", "-120_-70", "-70_-30", "-30_0", "0", "0_20", "20_40", "40_60", "60_80", ">80")), annotation=Label(s$gain))
temp <- NA
temp[!is.na(s$gain_fuel)] <- (-248.76*(s$gain_fuel==-6) - 131.21*(s$gain_fuel==-5) - 87.36*(s$gain_fuel==-4) - 53.27*(s$gain_fuel==-3) - 25.49*(s$gain_fuel==-2) - 7.51*(s$gain_fuel==-1) + 5.17*(s$gain_fuel==1) + 14.73*(s$gain_fuel==2) + 24.85*(s$gain_fuel==3) + 34.89*(s$gain_fuel==4) + 57.42*(s$gain_fuel==5))[!is.na(s$gain_fuel)] #  - 1.17*(s$gain_fuel==0)
s$gain_fuel <<- as.item(temp, labels = structure(c(-248.76, -131.21, -87.36, -53.27, -25.49, -7.51, 0, 5.17, 14.73, 24.85, 34.89, 57.42), names = c("<-160", "-160_-110", "-110_-70", "-70_-40", "-40_-15", "-15_0", "0", "0_10", "10_20", "20_30", "30_40", ">40")), annotation=Label(s$gain_fuel))
temp <- NA
temp[!is.na(s$gain_chauffage)] <- (-262.07*(s$gain_chauffage==-6) - 132.69*(s$gain_chauffage==-5) - 87.05*(s$gain_chauffage==-4) - 53.65*(s$gain_chauffage==-3) - 26.57*(s$gain_chauffage==-2) - 7.20*(s$gain_chauffage==-1) + 4.53*(s$gain_chauffage==1) + 15.44*(s$gain_chauffage==2) + 25.26*(s$gain_chauffage==3) + 35.66*(s$gain_chauffage==4) + 54.67*(s$gain_chauffage==5))[!is.na(s$gain_chauffage)] #  - 1.34*(s$gain_chauffage==0)
s$gain_chauffage <<- as.item(temp, labels = structure(c(-262.07, -132.69, -87.05, -53.65, -26.57, -7.20, 0, 4.53, 15.44, 25.26, 35.66, 54.67), names = c("<-160", "-160_-110", "-110_-70", "-70_-40", "-40_-15", "-15_0", "0", "0_10", "10_20", "20_30", "30_40", ">40")), annotation=Label(s$gain_chauffage))
s$Elasticite_chauffage <<- as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$elasticite_chauffage))))
s$Elasticite_chauffage <<- (s$Elasticite_chauffage==0)*1.5 + (s$Elasticite_chauffage==3)*6.5 + (s$Elasticite_chauffage>3)*(s$Elasticite_chauffage + 5) # Take the average of thresholds, take 40% for >30%
s$Elasticite_chauffage <<- - round(s$Elasticite_chauffage / 30, 2) # converts into elasticity
label(s$Elasticite_chauffage) <<- "Elasticite_chauffage: Élasticité-prix des dépenses de chauffage des Français, calculée en prenant la valeur moyenne des intervalles proposées (seuils à 0/3/10/20/30% pour une hausse de 30%)"
s$Elasticite_chauffage_perso <<- as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$elasticite_chauffage_perso))))
s$Elasticite_chauffage_perso <<- (s$Elasticite_chauffage_perso==0)*1.5 + (s$Elasticite_chauffage_perso==3)*6.5 + (s$Elasticite_chauffage_perso>3)*(s$Elasticite_chauffage_perso + 5) # Take the average of thresholds, take 40% for >30%
s$Elasticite_chauffage_perso <<- - round(s$Elasticite_chauffage_perso / 30, 2) # converts into elasticity
label(s$Elasticite_chauffage_perso) <<- "Elasticite_chauffage_perso: Élasticité-prix des dépenses de chauffage du ménage, calculée en prenant la valeur moyenne des intervalles proposées (seuils à 0/3/10/20/30% pour une hausse de 30%)"
s$Elasticite_fuel <<- as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$elasticite_fuel))))
s$Elasticite_fuel <<- (s$Elasticite_fuel==0)*1.5 + (s$Elasticite_fuel==3)*6.5 + (s$Elasticite_fuel>3)*(s$Elasticite_fuel + 5) # Take the average of thresholds, take 40% for >30%
s$Elasticite_fuel <<- - round(s$Elasticite_fuel / 30, 2) # converts into elasticity
label(s$Elasticite_fuel) <<- "Elasticite_fuel: Élasticité-prix des dépenses de carburants des Français, calculée en prenant la valeur moyenne des intervalles proposées (seuils à 0/3/10/20/30% pour une hausse de 0.5€/L)"
s$Elasticite_fuel_perso <<- as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$elasticite_fuel_perso))))
s$Elasticite_fuel_perso <<- (s$Elasticite_fuel_perso==0)*1.5 + (s$Elasticite_fuel_perso==3)*6.5 + (s$Elasticite_fuel_perso>3)*(s$Elasticite_fuel_perso + 5) # Take the average of thresholds, take 40% for >30%
s$Elasticite_fuel_perso <<- - round(s$Elasticite_fuel_perso / 30, 2) # converts into elasticity
label(s$Elasticite_fuel_perso) <<- "Elasticite_fuel_perso: Élasticité-prix des dépenses de carburants du ménage, calculée en prenant la valeur moyenne des intervalles proposées (seuils à 0/3/10/20/30% pour une hausse de 0.5€/L)"
s$elasticite_partielle <<- s$elasticite_chauffage
s$elasticite_partielle[!is.na(s$elasticite_fuel)] <<- s$elasticite_fuel[!is.na(s$elasticite_fuel)]
label(s$elasticite_partielle) <<- "elasticite_partielle: Réduction de la conso de fioul et gaz OU de carburants des Français suite à augmentation du prix de 30% (0% - Je n'en consomme déjà presque pas/0% - Je suis contraint sur tous mes déplacements/de 0% à 10%/de 10% à 20%/de 20% à 30%/+ de 30% - Je changerais largement mes habitudes de déplacement)"
s$Elasticite_partielle <<- s$Elasticite_chauffage
s$Elasticite_partielle[!is.na(s$Elasticite_fuel)] <<- s$Elasticite_fuel[!is.na(s$Elasticite_fuel)]
label(s$Elasticite_partielle) <<- "Elasticite_partielle: Élasticité-prix des dépenses de fioul et gaz OU de carburants des Français, calculée en prenant la valeur moyenne des intervalles proposées"
s$elasticite_partielle_perso <<- s$elasticite_chauffage_perso
s$elasticite_partielle_perso[!is.na(s$elasticite_fuel_perso)] <<- s$elasticite_fuel_perso[!is.na(s$elasticite_fuel_perso)]
label(s$elasticite_partielle_perso) <<- "elasticite_partielle_perso: Réduction de la conso de fioul et gaz OU de carburants du ménage suite à augmentation du prix de 30% (0% - Je n'en consomme déjà presque pas/0% - Je suis contraint sur tous mes déplacements/de 0% à 10%/de 10% à 20%/de 20% à 30%/+ de 30% - Je changerais largement mes habitudes de déplacement)"
s$Elasticite_partielle_perso <<- s$Elasticite_chauffage_perso
s$Elasticite_partielle_perso[!is.na(s$Elasticite_fuel_perso)] <<- s$Elasticite_fuel_perso[!is.na(s$Elasticite_fuel_perso)]
label(s$Elasticite_partielle_perso) <<- "Elasticite_partielle_perso: Élasticité-prix des dépenses de fioul et gaz OU de carburants du ménage, calculée en prenant la valeur moyenne des intervalles proposées"
s$variante_taxe_info <<- "p"
s$variante_taxe_info[s$gagnant_feedback_categorie!=""] <<- "f"
label(s$variante_taxe_info) <<- "variante_taxe_info: (f/p) Variante aléatoire entre f: feedback (=simulation, 2/3) et p: progressivité (1/3), dans l'information donnée sur la taxe compensée avant de demander à nouveau le gain et l'approbation, ainsi que les bénéfices et problèmes"
for (v in c('CC', 'sante', 'circulation', 'revenu', 'pauvres', 'independance', 'enjeu', 'aucun', 'autre_choix', 'autre')) {
s[[paste('benefices_', v, sep="")]] <<- s[paste('benefices_', v, '_p', sep="")][[1]]
s[[paste('benefices_', v, sep="")]][s$variante_taxe_info=='f'] <<- s[paste('benefices_', v, '_f', sep="")][[1]][s$variante_taxe_info=='f']
label(s[[paste('benefices_', v, sep="")]]) <<- sub("_f: \\* ", ": ", label(s[paste('benefices_', v, '_f', sep="")][[1]]))
}
for (v in c('inefficace', 'alternatives', 'ruraux', 'revenu', 'pauvres', 'economie', 'pretexte', 'aucun', 'autre_choix', 'autre')) {
s[[paste('problemes_', v, sep="")]] <<- s[paste('problemes_', v, '_p', sep="")][[1]]
s[[paste('problemes_', v, sep="")]][s$variante_taxe_info=='f'] <<- s[paste('problemes_', v, '_f', sep="")][[1]][s$variante_taxe_info=='f']
label(s[[paste('problemes_', v, sep="")]]) <<- sub("_f: \\* ", ": ", label(s[paste('problemes_', v, '_f', sep="")][[1]]))
}
s$gagnant_info_categorie <<- s$gagnant_feedback_categorie
s$gagnant_info_categorie[!is.na(s$gagnant_progressif_categorie)] <<- s$gagnant_progressif_categorie[!is.na(s$gagnant_progressif_categorie)]
label(s$gagnant_info_categorie) <<- "gagnant_info_categorie: après info simule_gagnant et/ou progressivité: Ménage Gagnant/Non affecté/Perdant par hausse taxe carbone redistribuée à tous (+110€/an /adulte, +13/15% gaz/fioul, +0.11/13 €/L diesel/essence)"
s$taxe_info_approbation <<- s$taxe_feedback_approbation
s$taxe_info_approbation[!is.na(s$taxe_progressif_approbation)] <<- s$taxe_progressif_approbation[!is.na(s$taxe_progressif_approbation)]
annotation(s$taxe_info_approbation) <<- "taxe_info_approbation: après info simule_gagnant et/ou progressivité - Approbation d'une hausse de la taxe carbone compensée (+110€/an /adulte, +13/15% gaz/fioul, +0.11/13 €/L diesel/essence)"
s$cible[s$cible20==1] <<- '20'
s$cible[s$cible30==1] <<- '30'
s$cible[s$cible40==1] <<- '40'
s$cible[s$cible50==1] <<- '50'
s$cible <<- relevel(as.factor(s$cible), '50')
label(s$cible) <<- "cible: Ciblage du recyclage de la hausse de la taxe carbone, attribué en fonction du revenu du répondant et de son ménage (20/30/40/50% les plus modestes)"
# TODO: manage to use tidyverse without erasing observations
# s <<- merge(s, s %>% gather(key = temp, value = gain_cible, c(gagnant__20_categorie, gagnant_20_30_categorie, gagnant_30_40_categorie, gagnant_40_50_categorie, gagnant_50_70_categorie, gagnant_70__categorie)) %>% filter(gain_cible != "") %>% select(-temp), sort=FALSE) # Warning: attributes are not identical across measure variables; they will be dropped
# label(s$gain_cible) <<- "gain_cible: Ménage Gagnant/Non affecté/Perdant avec hausse taxe carbone à recyclage ciblé (cible: 20/30/40/50% les plus modestes)"
# s <<- merge(s, s %>% gather(key = temp, value = taxe_cible_approbation, c(taxe__20_approbation, taxe_20_30_approbation, taxe_30_40_approbation, taxe_40_50_approbation, taxe_50_70_approbation, taxe_70__approbation)) %>% filter(taxe_cible_approbation != "") %>% select(-temp), sort=FALSE)
# label(s$taxe_cible_approbation) <<- "taxe_cible_approbation: Approbation d'une hausse de la taxe carbone compensée par recyclage ciblé (cible: 20/30/40/50% les plus modestes)"
#
#   # s <<- s %>% gather(key = temp, value = km, c(km_0, km_1, km_2)) %>% filter(km != "") %>% select(-temp) # erases km_0, km_1, km_2
# s <<- merge(s, s %>% gather(key = temp, value = km, c(km_0, km_1, km_2)) %>% filter(km != "") %>% select(-temp), sort=FALSE) # Warning: attributes are not identical across measure variables; they will be dropped
# label(s$km) <<- "km: Nombre de kilomètres parcourus lors des 12 derniers mois en voiture ou moto (par le répondant pour nb_vehicules=0, par les véhicules sinon)"
#
# s <<- merge(s, s %>% gather(key = temp, value = conso, c(conso_1, conso_2)) %>% filter(conso != "") %>% select(-temp), sort=FALSE)
# label(s$conso) <<- "conso:  Consommation moyenne du véhicule (en litres aux 100 km)"
s$gagnant_cible_categorie[!is.na(s$gagnant__20_categorie)] <<- s$gagnant__20_categorie[!is.na(s$gagnant__20_categorie)]
s$gagnant_cible_categorie[!is.na(s$gagnant_20_30_categorie)] <<- s$gagnant_20_30_categorie[!is.na(s$gagnant_20_30_categorie)]
s$gagnant_cible_categorie[!is.na(s$gagnant_30_40_categorie)] <<- s$gagnant_30_40_categorie[!is.na(s$gagnant_30_40_categorie)]
s$gagnant_cible_categorie[!is.na(s$gagnant_40_50_categorie)] <<- s$gagnant_40_50_categorie[!is.na(s$gagnant_40_50_categorie)]
s$gagnant_cible_categorie[!is.na(s$gagnant_50_70_categorie)] <<- s$gagnant_50_70_categorie[!is.na(s$gagnant_50_70_categorie)]
s$gagnant_cible_categorie[!is.na(s$gagnant_70__categorie)] <<- s$gagnant_70__categorie[!is.na(s$gagnant_70__categorie)]
label(s$gagnant_cible_categorie) <<- "gagnant_cible_categorie: Ménage Gagnant/Non affecté/Perdant avec hausse taxe carbone à recyclage ciblé (cible: 20/30/40/50% les plus modestes)"
s$taxe_cible_approbation[!is.na(s$taxe__20_approbation)] <<- s$taxe__20_approbation[!is.na(s$taxe__20_approbation)]
s$taxe_cible_approbation[!is.na(s$taxe_20_30_approbation)] <<- s$taxe_20_30_approbation[!is.na(s$taxe_20_30_approbation)]
s$taxe_cible_approbation[!is.na(s$taxe_30_40_approbation)] <<- s$taxe_30_40_approbation[!is.na(s$taxe_30_40_approbation)]
s$taxe_cible_approbation[!is.na(s$taxe_40_50_approbation)] <<- s$taxe_40_50_approbation[!is.na(s$taxe_40_50_approbation)]
s$taxe_cible_approbation[!is.na(s$taxe_50_70_approbation)] <<- s$taxe_50_70_approbation[!is.na(s$taxe_50_70_approbation)]
s$taxe_cible_approbation[!is.na(s$taxe_70__approbation)] <<- s$taxe_70__approbation[!is.na(s$taxe_70__approbation)]
label(s$taxe_cible_approbation) <<- "taxe_cible_approbation: Approbation d'une hausse de la taxe carbone compensée par recyclage ciblé (cible: 20/30/40/50% les plus modestes)"
s$categorie_cible[!is.na(s$taxe__20_approbation)] <<- '_20'
s$categorie_cible[!is.na(s$taxe_20_30_approbation)] <<- '20_30'
s$categorie_cible[!is.na(s$taxe_30_40_approbation)] <<- '30_40'
s$categorie_cible[!is.na(s$taxe_40_50_approbation)] <<- '40_50'
s$categorie_cible[!is.na(s$taxe_50_70_approbation)] <<- '50_70'
s$categorie_cible[!is.na(s$taxe_70__approbation)] <<- '70_'
label(s$categorie_cible) <<- "categorie_cible: Catégorie de revenu du répondant (et de son ménage) taxe à recyclage ciblé - Catégories: percentile <20/20-30/30-40/40-50/50-70/>70, sachant que revenu_conjoint détermine la catégorie quand percentile de revenu > 70 (780/1140/1430/1670/2220)"
s$traite_cible <<- (s$cible==20)*(s$revenu<780) + (s$cible==30)*(s$revenu<1140) + (s$cible==40)*(s$revenu<1430) + (s$cible==50)*(s$revenu<1670)
s$traite_cible_conjoint <<- (s$nb_adultes > 1)* ((s$cible==20)*(s$revenu_conjoint<780) + (s$cible==30)*(s$revenu_conjoint<1140) + (s$cible==40)*(s$revenu_conjoint<1430) + (s$cible==50)*(s$revenu_conjoint<1670))
label(s$traite_cible) <<- "traite_cible: Indicatrice de transfert reçu par le répondant lors de la hausse de la taxe carbone avec compensation ciblée. Montants: 550/360/270/220 €/an/adulte pour cible à 20/30/40/50"
label(s$traite_cible_conjoint) <<- "traite_cible_conjoint: Indicatrice de transfert reçu par le conjoint du répondant lors de la hausse de la taxe carbone avec compensation ciblée. Montants: 550/360/270/220 €/an/adulte pour cible à 20/30/40/50"
s$versement_cible <<- (s$traite_cible + s$traite_cible_conjoint) * ((s$cible==20)*550 + (s$cible==30)*360 + (s$cible==40)*270 + (s$cible==50)*220)
s$versement_cible_sans_conjoint <<- (s$traite_cible) * ((s$cible==20)*550 + (s$cible==30)*360 + (s$cible==40)*270 + (s$cible==50)*220)
label(s$versement_cible) <<- "versement_cible: Versement annuel reçu par le ménage du répondant lors de la hausse de la taxe carbone avec compensation ciblée. Montants: 550/360/270/220 €/an/parent pour cible à 20/30/40/50"
label(s$versement_cible_sans_conjoint) <<- "versement_cible_sans_conjoint: Versement annuel reçu par le répondant lors de la hausse de la taxe carbone avec compensation ciblée. Montants: 550/360/270/220 €/an/adulte pour cible à 20/30/40/50"
s$versement <<- 110 * s$nb_adultes
label(s$versement) <<- "versement: Versement annuel reçu par le ménage suite à une hausse de la taxe carbone compensée (110 * nb_adultes)"
s$km[!is.na(s$km_0)] <<- s$km_0[!is.na(s$km_0)]
s$km[!is.na(s$km_1)] <<- s$km_1[!is.na(s$km_1)]
s$km[!is.na(s$km_2)] <<- s$km_2[!is.na(s$km_2)]
label(s$km) <<- "km: Nombre de kilomètres parcourus lors des 12 derniers mois en voiture ou moto (par le répondant pour nb_vehicules=0, par les véhicules sinon)"
s$conso[!is.na(s$conso_1)] <<- s$conso_1[!is.na(s$conso_1)]
s$conso[!is.na(s$conso_2)] <<- s$conso_2[!is.na(s$conso_2)]
s$conso[is.na(s$conso)] <<- (6.39 + 7.31) / 2
label(s$conso) <<- "conso:  Consommation moyenne du véhicule (en litres aux 100 km)"
s$gaz <<- grepl('gaz', s$chauffage, ignore.case = T)
s$fioul <<- grepl('fioul', s$chauffage, ignore.case = T)
s$hausse_chauffage <<- -55.507189 + s$gaz * 124.578484 + s$fioul * 221.145441 + s$surface * 0.652174
s$hausse_diesel[s$nb_vehicules == 0] <<- (0.5*(6.39/100) * s$km * 1.4 * (1 - 0.4) * 0.090922)[s$nb_vehicules == 0] # share_diesel * conso * km * price * (1-elasticite) * price_increase
s$hausse_diesel[s$nb_vehicules == 1] <<- ((s$fuel_1=='Diesel') * (s$conso/100) * s$km * 1.4 * (1 - 0.4) * 0.090922)[s$nb_vehicules == 1]
s$hausse_diesel[s$nb_vehicules == 2] <<- (((s$fuel_2_1=='Diesel')*2/3 + (s$fuel_2_2=='Diesel')/3) * (s$conso/100) * s$km * 1.4 * (1 - 0.4) * 0.090922)[s$nb_vehicules == 2]
s$hausse_essence[s$nb_vehicules == 0] <<- (0.5*(7.31/100) * s$km * 1.45 * (1 - 0.4) * 0.076128)[s$nb_vehicules == 0] # share_diesel * conso * km * price * (1-elasticite) * price_increase
s$hausse_essence[s$nb_vehicules == 1] <<- ((s$fuel_1!='Diesel') * (s$conso/100) * s$km * 1.45 * (1 - 0.4) * 0.076128)[s$nb_vehicules == 1]
s$hausse_essence[s$nb_vehicules == 2] <<- (((s$fuel_2_1!='Diesel')*2/3 + (s$fuel_2_2!='Diesel')/3) * (s$conso/100) * s$km * 1.45 * (1 - 0.4) * 0.076128)[s$nb_vehicules == 2]
s$hausse_carburants <<- s$hausse_diesel + s$hausse_essence
label(s$hausse_carburants) <<- "hausse_carburant: Hausse des dépenses de carburants simulées pour le ménage, suite à la taxe (élasticité de 0.4) (hausse_diesel + hausse_essence)"
s$hausse_depenses <<- s$hausse_carburants + s$hausse_chauffage
s$diesel <<- (!is.na(s$fuel_1) & (s$fuel_1=='Diesel')) | (!is.na(s$fuel_2_2) & ((s$fuel_2_1=='Diesel') | (s$fuel_2_2=='Diesel')))
s$essence <<- (!is.na(s$fuel_1) & (s$fuel_1=='Essence')) | (!is.na(s$fuel_2_2) & ((s$fuel_2_1=='Essence') | (s$fuel_2_2=='Essence')))
label(s$diesel) <<- "diesel: Indicatrice de la possession d'un véhicule diesel par le ménage (fuel_1 ou fuel_2_1 ou fuel_2_2 = 'Diesel')"
label(s$essence) <<- "essence: Indicatrice de la possession d'un véhicule à essence par le ménage (fuel_1 ou fuel_2_1 ou fuel_2_2 = 'Essence')"
s$simule_gain <<- 16.1 + s$nb_adultes * 110 - s$hausse_depenses # élasticité de 0.15 sur le gaz
s$simule_gain_repondant <<- 16.1 + 110 - s$hausse_depenses
label(s$simule_gain) <<- "simule_gain: Gain net annuel simulé pour le ménage du répondant suite à une hausse de taxe carbone compensée: 16.1 + nb_adultes * 110 - hausse_depenses"
label(s$simule_gain_repondant) <<- "simule_gain_repondant: Gain net annuel simulé pour le répondant (sans tenir compte du potentiel versement reçu par les autres adultes du ménage) suite à une hausse de taxe carbone compensée: 116.1 - hausse_depenses"
s$simule_gain_cible <<- s$versement_cible - s$hausse_depenses
s$simule_gain_cible_sans_conjoint <<- s$versement_cible - s$hausse_depenses
label(s$simule_gain_cible) <<- "simule_gain_cible: Gain net simulé pour le ménage du répondant suite à une hausse de taxe carbone avec compensation ciblée: versement_cible - hausse_depenses"
label(s$simule_gain_cible_sans_conjoint) <<- "simule_gain_cible_sans_conjoint: Gain net simulé pour le répondant (sans tenir compte du potentiel versement reçu par son conjoint) suite à une hausse de taxe carbone avec compensation ciblée: versement_cible - hausse_depenses"
s$simule_gagnant[is.na(s$simule_gagnant)] <<- 1*(s$simule_gain[is.na(s$simule_gagnant)] > 0)
s$hausse_chauffage_interaction_inelastique <<- 1.5803 + 1.6619 * s$surface * s$gaz + 151.1738 * s$fioul + 1.1116 * s$surface * s$gaz
s$simule_gain_interaction <<- 9.1 + s$nb_adultes * 110 - s$hausse_carburants - s$hausse_chauffage_interaction_inelastique * (1 - 0.2) # élasticité de 0.2 pour le gaz
s$simule_gagnant_interaction <<- 1*(s$simule_gain_interaction > 0)
s$simule_gain_inelastique <<- s$nb_adultes * 110 - s$hausse_carburants/(1 - 0.4) - s$hausse_chauffage_interaction_inelastique # élasticité nulle. Inclure + 22.4 rendrait le taux d'erreur uniforme suivant les deux catégories, on ne le fait pas pour être volontairement conservateur
s$simule_gain_elast_perso[s$variante_partielle=='c'] <<- s$nb_adultes[s$variante_partielle=='c'] * 110 - (s$hausse_chauffage_interaction_inelastique[s$variante_partielle=='c'] * (1 + s$Elasticite_chauffage_perso[s$variante_partielle=='c']) + s$hausse_carburants)
s$simule_gain_elast_perso[s$variante_partielle=='f'] <<- s$nb_adultes[s$variante_partielle=='f'] * 110 - (s$hausse_carburants[s$variante_partielle=='f'] * (1 + s$Elasticite_fuel_perso[s$variante_partielle=='f']) / (1 - 0.4) + s$hausse_chauffage_interaction_inelastique * (1 - 0.2))
label(s$hausse_chauffage_interaction_inelastique) <<- "hausse_chauffage_interaction_inelastique: Hausse des dépenses de chauffage simulées pour le ménage avec des termes d'interaction entre surface et gaz/fioul plutôt que sans, suite à la taxe (élasticité nulle)"
label(s$simule_gain_interaction) <<- "simule_gain_interaction: Gain net annuel simulé avec des termes d'interaction surface*fioul/gaz pour le ménage du répondant suite à une hausse de taxe carbone compensée: 9.1 + nb_adultes * 110 - hausse_chauffage_interaction_inelastique * 0.8 - hausse_carburants"
label(s$simule_gagnant_interaction) <<- "simule_gagnant_interaction: Indicatrice sur la prédiction que le ménage serait gagnant avec la taxe compensée, d'après nos simulations avec des termes d'interaction surface*fioul/gaz: 1*(simule_gain_interaction > 0)"
label(s$simule_gain_inelastique) <<- "simule_gain_inelastique: Gain net annuel simulé (avec interaction) avec une élasticité nulle, pour le ménage du répondant suite à une hausse de taxe carbone compensée:  nb_adultes * 110 - hausse_chauffage_interaction_inelastique - hausse_carburants / 0.6"
label(s$simule_gain_elast_perso) <<- "simule_gain_elast_perso: Gain net annuel simulé (avec interaction) avec l'élasticité renseignée par le répondant, pour le ménage du répondant suite à une hausse de taxe carbone compensée: nb_adultes * 110 - hausse_partielle_inelastique * (1 - Elasticite_partielle_perso) - hausse_autre_partielle"
s$progressivite[!is.na(s$progressivite_feedback_sans_info)] <<- s$progressivite_feedback_sans_info[!is.na(s$progressivite_feedback_sans_info)]
s$progressivite[!is.na(s$progressivite_feedback_avec_info)] <<- s$progressivite_feedback_avec_info[!is.na(s$progressivite_feedback_avec_info)]
s$progressivite[!is.na(s$progressivite_progressif)] <<- s$progressivite_progressif[!is.na(s$progressivite_progressif)]
label(s$progressivite) <<- "progressivite: ~ Une hausse de la taxe carbone compensée avantagerait les plus modestes (réunion des trois variante_progressivite: prog/fb_info/fb_no_info où seule fb_no_info est sans information préalable sur la progressivité) - Q206-208"
s$variante_progressivite[!is.na(s$progressivite_feedback_sans_info)] <<- "fb_no_info"
s$variante_progressivite[!is.na(s$progressivite_feedback_avec_info)] <<- "fb_info"
s$variante_progressivite[s$variante_taxe_info=='p'] <<- "prog" # !is.na(s$progressivite_progressif) |
s$variante_progressivite[s$variante_taxe_info=='f' & s$apres_modifs==FALSE] <<- 'fb_no_info'
label(s$variante_progressivite) <<- "variante_progressivite: prog/fb_info/fb_no_info Variante aléatoire du bloc de questions où figure 'progressivite'. prog: info sur la progressivité / fb: feedback sur le statut gagnant/perdant simulé, info/no_info: avec/sans info sur la progressivité de la mesure" # , seulement pour apres_modifs=T
s$info_progressivite <<- FALSE
s$info_progressivite[s$variante_taxe_info=='p' | s$variante_progressivite=='fb_info'] <<- T
label(s$info_progressivite) <<- "info_progressivite: Indicatrice qu'a été montrée l'information que la hausse de la taxe carbone compensée avantagerait les plus modestes"
s$variante_monetaire[is.na(s$variante_monetaire)] <<- 0 # concerne seulement une observation. Évite des complications inutiles.
s$age_18_24 <<- 1*(s$age == '18 à 24 ans')
s$age_25_34 <<- 1*(s$age == '25 à 34 ans')
s$age_35_49 <<- 1*(s$age == '35 à 49 ans')
s$age_50_64 <<- 1*(s$age == '50 à 64 ans')
s$age_65_plus <<- 1*(s$age == '65 ans ou plus')
s$score_ges <<- 1 * (s$ges_CO2 == TRUE) + 1*(s$ges_CH4 == TRUE) + 1*(s$ges_O2 == FALSE) + 1*(s$ges_pm == FALSE)
label(s$score_ges) <<- "score_ges: Somme des bonnes réponses au questionnaire gaz à effet de serre (ges_O2/CH4/pm/CO2)"
s$score_climate_call <<- 1*(s$ges_avion == TRUE) + 1*(s$ges_boeuf == TRUE) + 1*(s$ges_nucleaire == FALSE)
label(s$score_climate_call) <<- "score_climate_call: Somme des bonnes réponses au questionnaire Climate Call (avion-train / boeuf-pates / nucleaire-eolien) ges_avion/boeuf/nucleaire"
s$duree_info[s$info_CC==1 & s$info_PM==1] <<- s$duree_info_CC_PM[s$info_CC==1 & s$info_PM==1]
s$duree_info[s$info_CC==0 & s$info_PM==1] <<- s$duree_info_PM[s$info_CC==0 & s$info_PM==1]
s$duree_info[s$info_CC==1 & s$info_PM==0] <<- s$duree_info_CC[s$info_CC==1 & s$info_PM==0]
s$duree_info[s$info_CC==0 & s$info_PM==0] <<- s$duree_no_info[s$info_CC==0 & s$info_PM==0]
label(s$duree_info) <<- "duree_info: Temps de soumission - Ancrage (information procurée ou non au début sur changement climatique ou particules fines) (duree_info_CC/PM/CC_PM/no_info)"
for (v in c("autonomie", "priorite", "etats", "global", "trop")) {
s[[paste("aide_non", v, sep="_")]] <<- NA
s[[paste("aide_non", v, sep="_")]][!is.na(s$transferts_inter_info) & s$transferts_inter_info==T & s$aide_2p==T] <<- s[[paste("aide_non", v, "i", sep="_")]][!is.na(s$transferts_inter_info) & s$transferts_inter_info==T & s$aide_2p==T]
s[[paste("aide_non", v, sep="_")]][!is.na(s$transferts_inter_info) & s$transferts_inter_info==FALSE & s$aide_2p==T] <<- s[[paste("aide_non", v, "ni", sep="_")]][!is.na(s$transferts_inter_info) & s$transferts_inter_info==FALSE & s$aide_2p==T]
label(s[[paste("aide_non", v, sep="_")]]) <<- Label(s[[paste("aide_non", v, "i", sep="_")]])
}
s$revenu_decile <- 1 + 1 * ((s$revenu > 237) + (s$revenu > 789) + (s$revenu > 1151) + (s$revenu > 1436) + (s$revenu > 1677) + (s$revenu > 1927) + (s$revenu > 2231) + (s$revenu > 2657) + (s$revenu > 3462))
s$revenu_quintile <- 1 + 1 * ((s$revenu > 789) + (s$revenu > 1436) + (s$revenu > 1927) + (s$revenu > 2657))
categories_depenses <- c("sante", "retraites", "protection", "education", "recherche", "loisirs", "infrastructures", "justice", "armee", "securite", "aide")
# for (i in 0:10) s[[paste('dep', i, 'en_position', sep='_')]] <<- NA
for (i in 0:10) {
s[[paste('dep', i, 'en_position', sep='_')]] <<- (s$en_position_1==i) + 2*(s$en_position_2==i)  + 3*(s$en_position_3==i)  + 4*(s$en_position_4==i)  + 5*(s$en_position_5==i)  + 6*(s$en_position_6==i)  + 7*(s$en_position_7==i)  + 8*(s$en_position_8==i)  + 9*(s$en_position_9==i)  + 10*(s$en_position_10==i)
label(s[[paste('dep', i, 'en_position', sep='_')]]) <<- paste(paste('dep', i, 'en_position', sep='_'), ": Position à laquelle est affichée la catégorie de dépense ", i, "(", categories_depenses[i], ") (cf. en_position_i)", sep="")
# for (o in 1:nrow(s)) {
#   j <- s[[paste('en_position', i, sep='_')]][o]
#   if (!is.na(j)) s[[paste('dep', j, 'en_position', sep='_')]][o] <<- i
#   s[[paste('dep', j, 'en_position', sep='_')]][!is.na(s$en_position_0)] <-
# }
}
s <<- s[, -c(78:97, 100:119, 294:303)]
# TODO: qualité, connaissances CC, opinions CC
}
prepare_s(exclude_screened=FALSE, exclude_speeder=FALSE, only_finished=T) # TODO: let only_finished = FALSE
sa <- s
# prepare_s(exclude_screened=FALSE, exclude_speeder=FALSE)
# se <- s
# prepare_s(exclude_screened=FALSE)
# sp <- s
prepare_s()
write.csv(s, "survey_prepared.csv")
decrit(s$generation_CC_1960)
s$generation_CC_min <- 1960*s$generation_CC_1960 + 1990*s$generation_CC_1990*!s$generation_CC_1960 + 2020*s$generation_CC_2020*!s$generation_CC_1960*!s$generation_CC_1990 + 2050*s$generation_CC_2050*!s$generation_CC_1960*!s$generation_CC_1990*!s$generation_CC_2020
13*TRUE
head(1960 * s$generation_CC_1960)
s$generation_CC_min <- 1960*(s$generation_CC_1960==T) + 1990*(s$generation_CC_1990==T)*(s$generation_CC_1960!=T) + 2020*(s$generation_CC_2020==T)*(s$generation_CC_1960!=T)*(s$generation_CC_1990!=T) + 2050*(s$generation_CC_2050==T)*(s$generation_CC_1960!=T)*(s$generation_CC_1990!=T)*(s$generation_CC_2020!=T)
s$generation_CC_max <- 2050*(s$generation_CC_2050==T) + 2020*(s$generation_CC_2020==T)*(s$generation_CC_2050!=T) + 1990*(s$generation_CC_1990==T)*(s$generation_CC_2020!=T)*(s$generation_CC_2050!=T) + 1960*(s$generation_CC_1960==T)*(s$generation_CC_2050!=T)*(s$generation_CC_1990!=T)*(s$generation_CC_2020!=T)
decrit(s$generation_CC_max)
decrit(s$generation_CC_min)
decrit(s$generation_CC_min<generation_CC_max)
decrit(s$generation_CC_min<s$generation_CC_max)
decrit(s$generation_CC_min<=s$generation_CC_max)
s$nb_generation_CC <- (s$generation_CC_1960==T) + (s$generation_CC_2050==T) + (s$generation_CC_1990==T) + (s$generation_CC_2020==T)
decrit(s$nb_generation_CC)
s$generation_CC_max <- s$generation_CC_min <- NA
s$generation_CC_min <- 1960*(s$generation_CC_1960==T) + 1990*(s$generation_CC_1990==T)*(s$generation_CC_1960!=T) + 2020*(s$generation_CC_2020==T)*(s$generation_CC_1960!=T)*(s$generation_CC_1990!=T) + 2050*(s$generation_CC_2050==T)*(s$generation_CC_1960!=T)*(s$generation_CC_1990!=T)*(s$generation_CC_2020!=T)
s$generation_CC_max <- 2050*(s$generation_CC_2050==T) + 2020*(s$generation_CC_2020==T)*(s$generation_CC_2050!=T) + 1990*(s$generation_CC_1990==T)*(s$generation_CC_2020!=T)*(s$generation_CC_2050!=T) + 1960*(s$generation_CC_1960==T)*(s$generation_CC_2050!=T)*(s$generation_CC_1990!=T)*(s$generation_CC_2020!=T)
s$nb_generation_CC <- (s$generation_CC_1960==T) + (s$generation_CC_2050==T) + (s$generation_CC_1990==T) + (s$generation_CC_2020==T)
decrit(s$nb_generation_CC)
decrit(s$generation_CC_min)
decrit(s$generation_CC_aucune)
s$generation_CC_max[s$generation_CC_aucune==T] <- s$generation_CC_min[s$generation_CC_aucune==T] <- NA
decrit(s$generation_CC_min)
TRUE + FALSE > 0
s$mauvaise_qualite[s$generation_CC_aucune==T & (s$generation_CC_1960 + s$generation_CC_1990 + s$generation_CC_2020 + s$generation_CC_2050 > 0)] <- 1.2 + s$mauvaise_qualite[s$generation_CC_aucune==T & (s$generation_CC_1960 + s$generation_CC_1990 + s$generation_CC_2020 + s$generation_CC_2050 > 0)]
s$mauvaise_qualite[s$generation_CC_aucune==T & (s$generation_CC_1960==T | s$generation_CC_1990==T | s$generation_CC_2020==T | s$generation_CC_2050==T)] <- 1.2 + s$mauvaise_qualite[s$generation_CC_aucune==T & (s$generation_CC_1960==T | s$generation_CC_1990==T | s$generation_CC_2020==T | s$generation_CC_2050==T)]
s$generation_CC_min <- 1960*(s$generation_CC_1960==T) + 1990*(s$generation_CC_1990==T)*(s$generation_CC_1960!=T) + 2020*(s$generation_CC_2020==T)*(s$generation_CC_1960!=T)*(s$generation_CC_1990!=T) + 2050*(s$generation_CC_2050==T)*(s$generation_CC_1960!=T)*(s$generation_CC_1990!=T)*(s$generation_CC_2020!=T)
s$generation_CC_max <- 2050*(s$generation_CC_2050==T) + 2020*(s$generation_CC_2020==T)*(s$generation_CC_2050!=T) + 1990*(s$generation_CC_1990==T)*(s$generation_CC_2020!=T)*(s$generation_CC_2050!=T) + 1960*(s$generation_CC_1960==T)*(s$generation_CC_2050!=T)*(s$generation_CC_1990!=T)*(s$generation_CC_2020!=T)
s$generation_CC_max[s$generation_CC_aucune==T] <- s$generation_CC_min[s$generation_CC_aucune==T] <- NA
s$nb_generation_CC <- (s$generation_CC_1960==T) + (s$generation_CC_2050==T) + (s$generation_CC_1990==T) + (s$generation_CC_2020==T)
label(s$generation_CC_min) <- "generation_CC_min: Génération minimale de Français qui sera gravement affectée par le changeent climatique (1960/1990/2020/2050/NA si le répondant à répondu aucune d'entre elles) - Q71"
label(s$generation_CC_max) <- "generation_CC_max: Génération maximale de Français qui sera gravement affectée par le changeent climatique (1960/1990/2020/2050/NA si le répondant à répondu aucune d'entre elles) - Q71"
label(s$nb_generation_CC) <- "nb_generation_CC: Nombre de générations de Français qui seront gravement affectées par le changeent climatique (de 0 à 4) - Q71"
fit_housing <- read.csv("../model_reforms_data/prediction housing expenditures.csv")
ggplot(data=fit_housing, aes(obj, fit)) +  geom_line() +  geom_smooth(method='loess')
ggplot(data=fit_housing, aes(obj, fit < 110)) +  geom_line() + geom_smooth(method='loess')
ggplot(data=fit_housing, aes(obj, fit < 110)) +  geom_line() + geom_smooth(method='auto')
ggplot(data=fit_housing, aes(obj, 1*(fit < 110))) +  geom_line() + geom_smooth(method='auto')
ggplot(data=fit_housing, aes(obj, 1*(fit < 110))) +  geom_line(aes(ymax=500)) + geom_smooth(method='auto')
ggplot(data=fit_housing, aes(obj, 1*(fit < 110))) +  geom_line(aes(xmax=500)) + geom_smooth(method='auto')
ggplot(data=fit_housing, aes(obj, 1*(fit < 110))) + geom_jitter(height = 0.05) +  binomial_smooth()
ggplot(data=fit_housing, aes(obj, 1*(fit < 110))) + geom_jitter(height = 0.05) +
binomial_smooth()
ggplot(data=fit_housing, aes(obj, 1*(fit < 110))) + geom_jitter(height = 0.05) + geom_smooth(method = "glm", method.args = list(family = "binomial"))
ggplot(data=fit_housing, aes(obj, 1*(fit < 110))) + geom_smooth(method = "glm", method.args = list(family = "binomial"))
ggplot(data=fit_housing, aes(obj, 1*(fit < 110))) + geom_smooth(method = "glm", method.args = list(family = "binomial"), aes=(ymax=1))
ggplot(data=fit_housing, aes(obj, 1*(fit < 110))) + geom_smooth(method = "glm", method.args = list(family = "binomial"), aes(ymax=1))
ggplot(data=fit_housing, aes(obj, 1*(fit < 110), ymax=1)) + geom_smooth(method = "glm", method.args = list(family = "binomial"))
ggplot(data=fit_housing, aes(obj, 1*(fit < 110), ymax=2)) + geom_smooth(method = "glm", method.args = list(family = "binomial"))
ggplot(data=fit_housing, aes(obj, 1*(fit < 110))) + geom_smooth(method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1))
ggplot(data=fit_housing, aes(obj, 1*(fit < 110))) + geom_smooth(method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("f")
ggplot(data=fit_housing, aes(obj, 1*(fit < 110))) + geom_smooth(method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain")
ggplot(data=fit_housing, aes(obj, 1*(fit < 110))) + geom_smooth(method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain") + xlim(c(0, 500))
ggplot(data=fit_housing, aes(obj, 1*(fit < 110))) + geom_smooth(method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain") + xlim(c(0, 500)) + geom_vline(xintercept=110, col='red')
ggplot(data=fit_housing, aes(obj, 1*(fit < 110))) + geom_smooth(method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain") + xlim(c(0, 500)) + geom_vline(xintercept=110, col='red') + geom_density(x=obj)
ggplot(data=fit_housing, aes(obj, 1*(fit < 110))) + geom_smooth(method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain") + xlim(c(0, 500)) + geom_vline(xintercept=110, col='red') + geom_density(x=fit_housing$obj)
ggplot(data=fit_housing, aes(obj, 1*(fit < 110))) + geom_smooth(method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain") + xlim(c(0, 500)) + geom_vline(xintercept=110, col='red') + ggplot(data=fit_housing, aes(x=obj)) + geom_density()
ggplot(data=fit_housing, aes(obj, 1*(fit < 110))) + geom_smooth(method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain") + xlim(c(0, 500)) + geom_vline(xintercept=110, col='red') + ggplot(data=fit_housing, aes(x=obj)) + geom_density(data=fit_housing, aes(x = obj))
geom_density(data=fit_housing, aes(x = obj))
ggplot(data=fit_housing, aes(x = obj)) + geom_density()
geom_density(data=fit_housing$obj)
geom_density(data=fit_housing, aes(x=obs))
geom_density(data=fit_housing, aes(x=obs), inherit.aes = FALSE)
geom_density(data=fit_housing, aes(x=obs), inherit.aes = FALSE)
ggplot(data=fit_housing, aes(obj, 1*(fit < 110))) + geom_smooth(method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain") + xlim(c(0, 500)) + geom_vline(xintercept=110, col='red') + ggplot(data=fit_housing, aes(x=obj)) + geom_density(data=fit_housing, aes(x=obs), inherit.aes = FALSE)
ggplot(data=fit_housing, aes(obj, 1*(fit < 110))) + geom_smooth(method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain") + xlim(c(0, 500)) + geom_vline(xintercept=110, col='red') + ggplot(data=fit_housing, aes(x=obj)) + geom_density()
ggplot(data=fit_housing, aes(obj, 1*(fit < 110))) + geom_smooth(method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain") + xlim(c(0, 500)) + geom_vline(xintercept=110, col='red') + geom_density(data=fit_housing, aes(x=obs), inherit.aes = FALSE)
ggplot(data=fit_housing, aes(obj, 1*(fit < 110))) + geom_smooth(method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain") + xlim(c(0, 500)) + geom_vline(xintercept=110, col='red') + geom_density()
ggplot(data=fit_housing, aes(obj, 1*(fit < 110))) + geom_smooth(method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain") + xlim(c(0, 500)) + geom_density() + geom_vline(xintercept=110, col='red')
ggplot(data=fit_housing, aes(x=obj, y=1*(fit < 110))) + geom_smooth(method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain") + xlim(c(0, 500)) + geom_density() + geom_vline(xintercept=110, col='red')
ggplot(data=fit_housing, aes(x=obj, y=1*(fit < 110))) + geom_density()
ggplot(data=fit_housing, aes(x=obj)) + geom_density()
ggplot(data=fit_housing, aes(x=obj)) + geom_smooth(aes(y=1*(fit < 110)), method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain") + xlim(c(0, 500)) + geom_density() + geom_vline(xintercept=110, col='red')
ggplot(data=fit_housing, aes(x=obj)) + geom_smooth(aes(y=1*(fit < 110)), method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain") + xlim(c(0, 500)) + geom_density() + geom_vline(xintercept=110, col='red') + scale_y_continuous(name="cyl", sec.axis=sec_axis(name="obj"))
ggplot(data=fit_housing, aes(x=obj)) + geom_smooth(aes(y=1*(fit < 110)), method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain") + xlim(c(0, 500)) + geom_density() + geom_vline(xintercept=110, col='red') + scale_y_continuous(name="cyl", sec.axis=sec_axis(~./1, name="obj"))
ggplot(data=fit_housing, aes(x=obj)) + geom_smooth(aes(y=1*(fit < 110)), method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain") + xlim(c(0, 500)) + geom_density() + geom_vline(xintercept=110, col='red') + scale_y_continuous(name="cyl", sec.axis=sec_axis(~./0.05, name="obj"))
ggplot(data=fit_housing, aes(x=obj)) + geom_smooth(aes(y=1*(fit < 110)), method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain") + xlim(c(0, 500)) + geom_density() + geom_vline(xintercept=110, col='red') + scale_y_continuous(name="cyl", sec.axis=sec_axis(~./0.001, name="obj"))
ggplot(data=fit_housing, aes(x=obj)) + geom_smooth(aes(y=1*(fit < 110)), method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain") + xlim(c(0, 500)) + geom_density() + geom_vline(xintercept=110, col='red') + scale_y_continuous(sec.axis=sec_axis(~./0.001, name="obj"))
ggplot(data=fit_housing, aes(x=obj)) + geom_smooth(aes(y=1*(fit < 110)), method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain") + xlim(c(0, 500)) + 20*geom_density() + geom_vline(xintercept=110, col='red') + scale_y_continuous(sec.axis=sec_axis(~./0.05))
ggplot(data=fit_housing, aes(x=obj)) + geom_density() + geom_smooth(aes(y=(fit < 110)/20), method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain") + xlim(c(0, 500)) + geom_vline(xintercept=110, col='red') + scale_y_continuous(sec.axis=sec_axis(~./20))
ggplot(data=fit_housing, aes(x=obj)) + geom_density() + geom_smooth(aes(y=fit < 110), method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain") + xlim(c(0, 500)) + geom_vline(xintercept=110, col='red') + scale_y_continuous(sec.axis=sec_axis(~./20))
ggplot(data=fit_housing, aes(x=obj)) + geom_density() + geom_smooth(aes(y=1*(fit < 110)), method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain") + xlim(c(0, 500)) + geom_vline(xintercept=110, col='red') + scale_y_continuous(sec.axis=sec_axis(~./20))
ggplot(data=fit_housing, aes(x=obj)) + geom_smooth(aes(y=1*(fit < 110)), method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain") + xlim(c(0, 500)) + geom_density(y=..scaled..) + geom_vline(xintercept=110, col='red')
ggplot(data=fit_housing, aes(x=obj)) + geom_smooth(aes(y=1*(fit < 110)), method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain") + xlim(c(0, 500)) + geom_density(aes(y=..scaled..)) + geom_vline(xintercept=110, col='red')
ggplot(data=fit_housing, aes(x=obj)) + geom_smooth(aes(y=1*(fit < 110)), method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain", col='blue') + xlim(c(0, 500)) + geom_density(aes(y=..scaled..)) + geom_vline(xintercept=110, col='red')
ggplot(data=fit_housing, aes(x=obj)) + geom_smooth(aes(y=1*(fit < 110)), method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase (density in black)") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain") + xlim(c(0, 500)) + geom_density(aes(y=..scaled..)) + geom_vline(xintercept=110, col='red')
ggplot(data=fit_housing, aes(obj, 1*(fit < 110))) +  geom_line(aes(xmax=500)) + geom_smooth(method='auto')
ggplot(data=fit_housing, aes(x=obj)) + geom_smooth(aes(y=1*(fit < 110)), method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase (density in black)") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain") + xlim(c(0, 500)) +
geom_histogram(aes(y=..scaled..)) + geom_vline(xintercept=110, col='red')
ggplot(data=fit_housing, aes(x=obj)) + geom_smooth(aes(y=1*(fit < 110)), method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase (density in black)") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain") + xlim(c(0, 500)) +
geom_histogram(aes(y=..scaled..)) + geom_vline(xintercept=110, col='red')
ggplot(data=fit_housing, aes(x=obj)) + geom_smooth(aes(y=1*(fit < 110)), method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase (density in black)") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain") + xlim(c(0, 500)) +
geom_histogram(aes(y=..ndensity..)) + geom_vline(xintercept=110, col='red')
ggplot(data=fit_housing, aes(x=obj)) + geom_smooth(aes(y=1*(fit < 110)), method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase (density in black)") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain") + xlim(c(0, 500)) +
geom_density(aes(y=..scaled..)) + geom_vline(xintercept=110, col='red')
length(which(fit_housing$obj > 50 & fit_housing$obj < 200))/length(fit_housing$obj)
length(which(fit_housing$obj > 75 & fit_housing$obj < 170))/length(fit_housing$obj)
fit_housing <- read.csv("../model_reforms_data/prediction housing expenditures.csv")
ggplot(data=fit_housing, aes(x=obj)) + geom_smooth(aes(y=1*(fit < 110 * nb_adultes)), method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase (density in black)") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain") + xlim(c(0, 500)) + geom_density(aes(y=..scaled..)) + geom_vline(xintercept=110, col='red')
ggplot(data=fit_housing, aes(x=obj)) + geom_smooth(aes(y=1*(fit < 110 * nb_adultes)), method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase (density in black)") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain") + xlim(c(0, 500)) +
geom_density(aes(y=..scaled..)) + geom_vline(xintercept=110, col='red')
ggplot(data=fit_housing, aes(x=obj)) + geom_smooth(aes(y=1*(fit < 110)), method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase (density in black)") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain") + xlim(c(0, 500)) + geom_density(aes(y=..scaled..)) + geom_vline(xintercept=110, col='red')
ggplot(data=fit_housing, aes(x=obj)) + geom_smooth(aes(y=1*(fit < 110)), method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase (density in black)") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain") + xlim(c(0, 500)) +
geom_density(aes(y=..scaled..)) + geom_vline(xintercept=110, col='red')
ggplot(data=fit_housing, aes(x=obj)) + geom_smooth(aes(y=1*(fit < 110)), method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase (density in black)") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain") + xlim(c(0, 500)) + geom_density(aes(y=..scaled..)) + geom_vline(xintercept=110, col='red')
ggplot(data=fit_housing, aes(x=50 * nb_adultes - obj)) + geom_smooth(aes(y=1*(fit > 50 * nb_adultes)), method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective gain without fuel (density in black)") + ylab("P(gain - (hausse_carburants-60) > 0) i.e. proba gain") + xlim(c(0, 500)) + geom_density(aes(y=..scaled..)) + geom_vline(xintercept=0, col='red')
ggplot(data=fit_housing, aes(x=50 * nb_adultes - obj)) + geom_smooth(aes(y=1*(fit > 50 * nb_adultes)), method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective gain without fuel (density in black)") + ylab("P(gain - (hausse_carburants-60) > 0) i.e. proba gain") + xlim(c(-300, 120)) + geom_density(aes(y=..scaled..)) + geom_vline(xintercept=0, col='red')
ggplot(data=fit_housing, aes(x=50 * nb_adultes - obj)) + geom_smooth(aes(y=1*(fit > 50 * nb_adultes)), method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective gain without fuel (density in black)") + ylab("P(gain - (hausse_carburants-60) > 0) i.e. proba gain") + xlim(c(-200, 120)) + geom_density(aes(y=..scaled..)) + geom_vline(xintercept=0, col='red')
fit_housing$vrai_gain_chauffage <- 50 * fit_housing$nb_adultes - fit_housing$obj
fit_housing$estimation_gain_chauffage <- fit_housing$fit - 50 * fit_housing$nb_adultes
ggplot(data=fit_housing, aes(x=vrai_gain_chauffage)) + geom_smooth(aes(y=1*(estimation_gain_chauffage > 0)), method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective gain without fuel (density in black)") + ylab("P(gain - (hausse_carburants-60) > 0) i.e. proba gain") + xlim(c(-200, 120)) + geom_density(aes(y=..scaled..)) + geom_vline(xintercept=0, col='red')
# ggplot(data=fit_housing, aes(x=obj)) + geom_smooth(aes(y=1*(fit < 110)), method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase (density in black)") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain") + xlim(c(0, 500)) + geom_density(aes(y=..scaled..)) + geom_vline(xintercept=110, col='red')
# length(which(fit_housing$obj > 50 & fit_housing$obj < 200))/length(fit_housing$obj) # 25%
# length(which(fit_housing$obj > 75 & fit_housing$obj < 170))/length(fit_housing$obj) # 15%
length(which(fit_housing$vrai_gain_chauffage > -50 & fit_housing$vrai_gain_chauffage < 80))/length(fit_housing$vrai_gain_chauffage) # 25%
length(which(fit_housing$vrai_gain_chauffage > 20 & fit_housing$vrai_gain_chauffage < 50))/length(fit_housing$vrai_gain_chauffage) # 15%
length(which(fit_housing$estimation_gain_chauffage > 0 & fit_housing$vrai_gain_chauffage==50))/length(which(fit_housing$vrai_gain_chauffage==50))
ggplot(data=fit_housing, aes(x=vrai_gain_chauffage)) + geom_smooth(span=0.5, aes(y=1*(estimation_gain_chauffage > 0)), method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective gain without fuel (density in black)") + ylab("P(gain - (hausse_carburants-60) > 0) i.e. proba gain") + xlim(c(-200, 120)) + geom_density(aes(y=..scaled..)) + geom_vline(xintercept=0, col='red')
ggplot(data=fit_housing, aes(x=vrai_gain_chauffage)) + geom_smooth(aes(y=1*(estimation_gain_chauffage > 0)), method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective gain without fuel (density in black)") + ylab("P(gain - (hausse_carburants-60) > 0) i.e. proba gain") + xlim(c(-200, 120)) + geom_density(aes(y=..scaled..)) + geom_vline(xintercept=0, col='red')
ggplot(data=fit_housing, aes(x=vrai_gain_chauffage)) + geom_smooth(span=0.1, aes(y=1*(estimation_gain_chauffage > 0)), method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective gain without fuel (density in black)") + ylab("P(gain - (hausse_carburants-60) > 0) i.e. proba gain") + xlim(c(-200, 120)) + geom_density(aes(y=..scaled..)) + geom_vline(xintercept=0, col='red')
ggplot(data=fit_housing, aes(x=vrai_gain_chauffage)) + geom_smooth(aes(y=1*(estimation_gain_chauffage > 0)), span=0.0001, method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective gain without fuel (density in black)") + ylab("P(gain - (hausse_carburants-60) > 0) i.e. proba gain") + xlim(c(-200, 120)) + geom_density(aes(y=..scaled..)) + geom_vline(xintercept=0, col='red')
ggplot(data=fit_housing, aes(x=vrai_gain_chauffage)) + geom_smooth(aes(y=1*(estimation_gain_chauffage > 0)), span=100, method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective gain without fuel (density in black)") + ylab("P(gain - (hausse_carburants-60) > 0) i.e. proba gain") + xlim(c(-200, 120)) + geom_density(aes(y=..scaled..)) + geom_vline(xintercept=0, col='red')
ggplot(data=fit_housing, aes(x=vrai_gain_chauffage)) + geom_smooth(aes(y=1*(estimation_gain_chauffage > 0)), n=300, method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective gain without fuel (density in black)") + ylab("P(gain - (hausse_carburants-60) > 0) i.e. proba gain") + xlim(c(-200, 120)) + geom_density(aes(y=..scaled..)) + geom_vline(xintercept=0, col='red')
ggplot(data=fit_housing, aes(x=vrai_gain_chauffage)) + geom_smooth(aes(y=1*(estimation_gain_chauffage > 0)), method = "auto") + ylim(c(0,1)) + xlab("Objective gain without fuel (density in black)") + ylab("P(gain - (hausse_carburants-60) > 0) i.e. proba gain") + xlim(c(-200, 120)) + geom_density(aes(y=..scaled..)) + geom_vline(xintercept=0, col='red')
ggplot(data=fit_housing, aes(x=vrai_gain_chauffage)) + geom_smooth(aes(y=1*(estimation_gain_chauffage > 0)), method = "auto", span = 0.5) + ylim(c(0,1)) + xlab("Objective gain without fuel (density in black)") + ylab("P(gain - (hausse_carburants-60) > 0) i.e. proba gain") + xlim(c(-200, 120)) + geom_density(aes(y=..scaled..)) + geom_vline(xintercept=0, col='red')
ggplot(data=fit_housing, aes(x=vrai_gain_chauffage)) +
geom_smooth(method = "auto", span = 0.1, aes(y=1*(estimation_gain_chauffage > 0))) + ylim(c(0,1)) + xlab("Objective gain without fuel (density in black)") + ylab("P(gain - (hausse_carburants-60) > 0) i.e. proba gain") + xlim(c(-200, 120)) + geom_density(aes(y=..scaled..)) + geom_vline(xintercept=0, col='red')
ggplot(data=fit_housing, aes(x=vrai_gain_chauffage)) +
geom_smooth(method = "auto", span = 0.03, aes(y=1*(estimation_gain_chauffage > 0))) + ylim(c(0,1)) + xlab("Objective gain without fuel (density in black)") + ylab("P(gain - (hausse_carburants-60) > 0) i.e. proba gain") + xlim(c(-200, 120)) + geom_density(aes(y=..scaled..)) + geom_vline(xintercept=0, col='red')
ggplot(data=fit_housing, aes(x=vrai_gain_chauffage)) +
geom_smooth(method = "auto", span = 0.001, aes(y=1*(estimation_gain_chauffage > 0))) + ylim(c(0,1)) + xlab("Objective gain without fuel (density in black)") + ylab("P(gain - (hausse_carburants-60) > 0) i.e. proba gain") + xlim(c(-200, 120)) + geom_density(aes(y=..scaled..)) + geom_vline(xintercept=0, col='red')
length(which(fit_housing$vrai_gain_chauffage==50))
length(which(fit_housing$estimation_gain_chauffage > 0 & fit_housing$vrai_gain_chauffage==50))/length(which(fit_housing$vrai_gain_chauffage==50))
# ggplot(data=fit_housing, aes(x=obj)) + geom_smooth(aes(y=1*(fit < 110)), method = "glm", method.args = list(family = "binomial")) + ylim(c(0,1)) + xlab("Objective housing expenditure increase (density in black)") + ylab("P(hausse_chauffage_interaction < 110) i.e. proba gain") + xlim(c(0, 500)) + geom_density(aes(y=..scaled..)) + geom_vline(xintercept=110, col='red')
# length(which(fit_housing$obj > 50 & fit_housing$obj < 200))/length(fit_housing$obj) # 25%
# length(which(fit_housing$obj > 75 & fit_housing$obj < 170))/length(fit_housing$obj) # 15%
length(which(fit_housing$vrai_gain_chauffage > -50 & fit_housing$vrai_gain_chauffage < 50))/length(fit_housing$vrai_gain_chauffage) # 42% de chances d'avoir une proba entre 0.1 et 0.9
sum(s$weight[s$gain > -50 & s$gain < 50])/sum(s$weight)
ggplot(data=fit_housing, aes(x=vrai_gain_chauffage)) +
geom_smooth(method = "auto", aes(y=1*(estimation_gain_chauffage > 0))) + ylim(c(0,1)) + xlab("Objective gain without fuel (density in black)") + ylab("P(gain - (hausse_carburants-60) > 0) i.e. proba gain") + xlim(c(-200, 120)) + geom_density(aes(y=..scaled..)) + geom_vline(xintercept=0, col='red')
ggplot(data=fit_housing, aes(x=vrai_gain_chauffage)) +
geom_smooth(method = "auto", n=300, aes(y=1*(estimation_gain_chauffage > 0))) + ylim(c(0,1)) + xlab("Objective gain without fuel (density in black)") + ylab("P(gain - (hausse_carburants-60) > 0) i.e. proba gain") + xlim(c(-200, 120)) + geom_density(aes(y=..scaled..)) + geom_vline(xintercept=0, col='red')
fit_housing$estimation_gain_chauffage <- 50 * fit_housing$nb_adultes - fit_housing$fit
ggplot(data=fit_housing, aes(x=vrai_gain_chauffage)) +
geom_smooth(method = "auto", aes(y=1*(estimation_gain_chauffage > 0))) + ylim(c(0,1)) + xlab("Objective gain without fuel (density in black)") + ylab("P(gain - (hausse_carburants-60) > 0) i.e. proba gain") + xlim(c(-200, 120)) + geom_density(aes(y=..scaled..)) + geom_vline(xintercept=0, col='red')
ggplot(data=fit_housing, aes(x=vrai_gain_chauffage)) +
geom_smooth(method = "glm", method.args = list(family = "binomial"), aes(y=1*(estimation_gain_chauffage > 0))) + ylim(c(0,1)) + xlab("Objective gain without fuel (density in black)") + ylab("P(gain - (hausse_carburants-60) > 0) i.e. proba gain") + xlim(c(-200, 120)) + geom_density(aes(y=..scaled..)) + geom_vline(xintercept=0, col='red')
=======
hovers <- c()
if (nsp) {
for (i in 1:(length(hover)-1)) {
for (j in 1:length(labels)) {
hovers <- c(hovers, paste(hover[i], '<br>', round(100*data[i, j]/(1+data[length(hover), j])), '% des réponses<br>', round(100*data[i, j]), '% des réponses exprimées') )
}
temp <- (s$parle_CC=='Plusieurs fois par an') + 2*(s$parle_CC=='Plusieurs fois par mois') - (s$parle_CC=="NSP")
s$parle_CC <<- as.item(temp, labels = structure(c(-1:2),
names = c("NSP","Presque jamais","Plusieurs fois par an","Plusieurs fois par mois")),
missing.values = -1, annotation=Label(s$parle_CC))
temp <- grepl("Faibles", s$effets_CC) + 2*grepl("Graves", s$effets_CC) + 3*grepl("Désastreux", s$effets_CC) + 4*grepl("Cataclysmiques", s$effets_CC) - (s$effets_CC=="NSP")
s$effets_CC <<- as.item(temp, labels = structure(c(-1:4),
names = c("NSP","Insignifiants","Faibles","Graves","Désastreux","Cataclysmiques")),
# names = c("NSP","Insignifiants, voire bénéfiques","Faibles, car les humains sauraient vivre avec","Graves, car il y aurait plus de catastrophes naturelles","Désastreux, les modes de vie seraient largement altérés","Cataclysmiques, l'humanité disparaîtrait")),
missing.values = -1, annotation=Label(s$effets_CC))
temp <- (s$transports_frequence=="Entre quatre fois par jour et une fois par heure") + 2*(s$transports_frequence=="Une ou deux fois par heure") + 3*(s$transports_frequence=="Plus que trois fois par heure") - (s$transports_frequence=="NSP")
s$transports_frequence <<- as.item(temp, labels = structure(c(-1:3),
names = c("NSP","< 3/jour","1/h - 4/jour","1/h - 2/h","> 3/heure")),
# names = c("NSP","Moins de trois fois par jour","Entre quatre fois par jour et une fois par heure","Une ou deux fois par heure","Plus que trois fois par heure")),
missing.values = -1, annotation=Label(s$transports_frequence))
temp <- (s$transports_avis=="Limitée, mais suffisante") + 2*(s$transports_avis=="Convenable, mais devrait être accrue") + 3*(s$transports_avis=="Satisfaisante") - (s$transports_avis=="NSP")
s$transports_avis <<- as.item(temp, labels = structure(c(-1:3),
names = c("NSP","Insuffisante","Limitée","Convenable","Satisfaisante")),
# names = c("NSP","Insuffisante","Limitée, mais suffisante","Convenable, mais devrait être accrue","Satisfaisante")),
missing.values = -1, annotation=Label(s$transports_avis))
# labels(s$transports_travail_commun) <<- c("Non"="Non", "NSP"="NSP", "Oui, aucun pb"="Oui, ça ne me poserait pas de grande difficulté", "Oui, embêtant"="Oui, mais ça m'embêterait")
# labels(s$transports_travail_actif) <<- c("Non"="Non", "NSP"="NSP", "Oui, aucun pb"="Oui, ça ne me poserait pas de grande difficulté", "Oui, embêtant"="Oui, mais ça m'embêterait")
s$Transports_travail_commun <<- s$transports_travail_commun
s$Transports_travail_actif <<- s$transports_travail_actif
s$Transports_travail_commun[is.na(s$Transports_travail_commun)] <<- "Non concerné"
s$Transports_travail_actif[is.na(s$Transports_travail_actif)] <<- "Non concerné"
s$Transports_travail_actif <<- as.item(as.character(s$Transports_travail_actif), missing.values=c('NSP', "Non concerné"), annotation="Transports_travail_actif: (transports_travail_actif sans NA) Sans changer de logement ni de lieu de travail, il serait possible pour le répondant prenant sa voiture d'effectuer ses trajets domicile-travail en marchant ou en vélo (Non/Oui mais ça l'embêterait/Oui ça ne lui poserait pas de grande difficulté/NSP)")
s$Transports_travail_commun <<- as.item(as.character(s$Transports_travail_commun), missing.values=c('NSP', "Non concerné"), annotation="Transports_travail_commun: (transports_travail_commun sans NA) Sans changer de logement ni de lieu de travail, il serait possible pour le répondant prenant sa voiture de prendre les transports en commun pour ses trajets domicile-travail (Non/Oui mais ça l'embêterait/Oui ça ne lui poserait pas de grande difficulté/NSP)")
s$Transports_distance <<- s$transports_distance
s$Transports_distance[is.na(s$Transports_distance)] <<- mean(s$transports_distance, na.rm=T)
s$Transports_distance <<- as.item(n(s$Transports_distance), missing.values = mean(s$transports_distance, na.rm=T), annotation="Transports_distance: (transports_distance sans NA) L'arrêt de transport en commun le plus proche de chez le répondant est à X minutes de marche")
# TODO: récupérer le vrai âge à partir de ID_age_dep_device.csv
temp <- 20.90*(s$age == "18 à 24 ans") + 29.61*(s$age == "25 à 34 ans") + 42.14*(s$age == "35 à 49 ans") + 56.84*(s$age == "50 à 64 ans") + 75.43*(s$age == "65 ans ou plus")
s$age <<- as.item(temp, labels = structure(c(20.90, 29.61, 42.14, 56.84, 75.43), names = c("18-24", "25-34", "35-49", "50-64", "65+")), annotation=Label(s$age))
# s$Age <<- (s$age == "18 à 24 ans") + 2*(s$age == "25 à 34 ans") + 3.3*(s$age == "35 à 49 ans") + 4.6*(s$age == "50 à 64 ans") + 7*(s$age == "65 ans ou plus")
s$taille_agglo <<- as.item(as.numeric(s$taille_agglo), labels = structure(1:5, names = c("rural", "-20k", "20-100k", "+100k", "Paris")), annotation=Label(s$taille_agglo))
s$Diplome <<- (s$diplome == "Brevet des collèges") + 2*(s$diplome=="CAP ou BEP") + 3*(s$diplome=="Baccalauréat") + 4*(s$diplome=="Bac +2 (BTS, DUT, DEUG, écoles de formation sanitaires et sociales...)") + 5*(s$diplome=="Bac +3 (licence...)") + 6*(s$diplome=="Bac +5 ou plus (master, école d'ingénieur ou de commerce, doctorat, médecine, maîtrise, DEA, DESS...)") - (s$diplome=="NSP (Ne se prononce pas)")
s$diplome4 <<- as.item(pmin(pmax(s$Diplome, 1), 4), labels = structure(1:4, names = c("Aucun diplôme ou brevet", "CAP ou BEP", "Baccalauréat", "Supérieur")), annotation=Label(s$diplome))
# s$diplome4 <<- as.character(s$diplome)
# s$diplome4[s$Diplome<2] <<- "Aucun diplôme ou brevet"
# s$diplome4[s$Diplome>3] <<- "Supérieur"
labels(s$mode_chauffage) <<- c("individuel"="Chauffage individuel", "collectif"="Chauffage collectif", "NSP"="NSP")
labels(s$chauffage) <<- c("Gaz réseau"="Gaz de ville", "Gaz bouteille"="Butane, propane, gaz en citerne", "Fioul"="Fioul, mazout, pétrole", "Électricité"="Électricité", "Bois, solaire..."="Bois, solaire, géothermie, aérothermie (pompe à chaleur)", "Autre"="Autre", "NSP"="NSP")
labels(s$schiste_CC) <<- c("malvenue"="Elle est malvenue : il faudrait mettre fin aux émissions, pas seulement les ralentir", "valable"="Elle est valable : toute baisse des émissions va dans la bonne direction", "NSP"="NSP")
labels(s$cause_CC) <<- c("n'existe pas"="n'est pas une réalité", "naturel"="est principalement dû à la variabilité naturelle du climat", "anthropique"="est principalement dû à l'activité humaine", "NSP"="NSP")
s$Compris_depenses <<- as.character(s$compris_depenses)
s$Compris_depenses[is.na(s$Compris_depenses)] <<- "NA"
s$compris_depenses <<- as.item(as.character(s$compris_depenses),
labels = structure(c("", "Oui","Non","Bug: le graphique ne s'est pas affiché correctement."), names = c("NA", "Oui","Non","Bug")), annotation=attr(s$compris_depenses, "label"))
s$enfant_CC[is.na(s$enfant_CC)] <<- "NSP"
s$enfant_CC_pour_CC[s$enfant_CC=='Non'] <<- 'Non concerné'
s$enfant_CC_pour_CC <<- as.item(as.character(s$enfant_CC_pour_CC), labels = structure(c(T, FALSE, 'Non concerné'), names=c('TRUE', 'FALSE', 'Non concerné')),
missing.values='Non concerné', annotation=Label(s$enfant_CC_pour_CC))
s$enfant_CC_pour_lui[s$enfant_CC=='Non'] <<- 'Non concerné'
s$enfant_CC_pour_lui <<- as.item(as.character(s$enfant_CC_pour_lui), labels = structure(c(T, FALSE, 'Non concerné'), names=c('TRUE', 'FALSE', 'Non concerné')),
missing.values='Non concerné', annotation=Label(s$enfant_CC_pour_lui))
s$gauche_droite <<- pmax(-2,pmin(2,-2 * grepl("extrême gauche", s$extr_gauche) - grepl("De gauche", s$gauche) + grepl("De droite", s$droite) + 2 * grepl("extrême droite", s$extr_droite)))
is.na(s$gauche_droite) <<- (s$gauche_droite == 0) & !grepl("centre", s$centre)
s$Gauche_droite <<- as.factor(s$gauche_droite)
s$gauche_droite <<- as.item(as.numeric(as.vector(s$gauche_droite)), labels = structure(c(-2:2),
names = c("Extrême gauche","Gauche","Centre","Droite","Extrême droite")), annotation="gauche_droite:échelle de -2 (extr_gauche) à +2 (extr_droite) - Orientation politique (Comment vous définiriez-vous ? Plusieurs réponses possibles: (D'extrême) gauche/Du centre/(D'extrême) droite/Libéral/Humaniste/Patriote/Apolitique/Écologiste/Conservateur (champ libre)/NSP)")
levels(s$Gauche_droite) <<- c("Extreme-left", "Left", "Center", "Right", "Extreme-right", "Indeterminate")
s$Gauche_droite[is.na(s$Gauche_droite)] <<- "Indeterminate"
temp <- Label(s$interet_politique)
s$interet_politique <<- 1*(s$interet_politique=='Un peu') + 2*(s$interet_politique=='Beaucoup')
s$interet_politique <<- as.item(s$interet_politique, labels=structure(c(0:2), names=c('Presque pas', 'Un peu', 'Beaucoup')), annotation=temp)
# s$gilets_jaunes[s$gilets_jaunes_NSP==T] <<- -99
s$gilets_jaunes[s$gilets_jaunes_compris==T] <<- 0 # total à 115%
s$gilets_jaunes[s$gilets_jaunes_oppose==T] <<- -1 # 2 oppose et soutien en même temps
s$gilets_jaunes[s$gilets_jaunes_soutien==T] <<- 1
s$gilets_jaunes[s$gilets_jaunes_dedans==T] <<- 2
label(s$gilets_jaunes) <<- "gilets_jaunes: -1: s'oppose / 0: comprend sans soutenir ni s'opposer / 1: soutient / 2: fait partie des gilets jaunes (gilets_jaunes_compris/oppose/soutien/dedans/NSP)"
s$gilets_jaunes <<- as.item(n(s$gilets_jaunes), labels = structure(c(-1:2), names=c('oppose', 'comprend', 'soutient', 'est_dedans')),
annotation=attr(s$gilets_jaunes, "label"))
# temp <- label(s$diplome)
# s$diplome <<- factor(s$diplome, c("","Aucun diplôme","Brevet des collèges","CAP ou BEP","Baccalauréat","Bac +2 (BTS, DUT, DEUG, écoles de formation sanitaires et sociales...)","Bac +3 (licence...)","Bac +5 ou plus (master, école d'ingénieur ou de commerce, doctorat, médecine, maîtrise, DEA, DESS...)","NSP (Ne se prononce pas)") )
# label(s$diplome) <<- temp
# temp <- label(s$interet_politique)
# s$interet_politique <<- factor(s$interet_politique, c("","Beaucoup","Un peu","Presque pas (ou pas du tout)","NSP","NSP (Je ne veux pas répondre)","Q20 - À quel point êtes-vous intéressé·e par la politique ?"))
# label(s$interet_politique) <<- temp
s$revenu_conjoint <<- s$rev_tot - s$revenu
s$revdisp <<- round((s$rev_tot -  irpp(s$rev_tot, s$nb_adultes, s$taille_menage)))
s$uc <<- uc(s$taille_menage, s$nb_14_et_plus)
s$niveau_vie <<- s$revdisp / s$uc
# s$age <<- as.factor(as.character(s$age))
# s$Region <<- as.factor(as.character(s$region))
# s$taille_agglo <<- as.factor(gsub("[[:alpha:] ]", "", s$taille_agglo))
# s <<- s[s$taille_agglo!="%1%",]
# pourquoi 91 missing regions? Sûrement un bug du Javascript côté utilisateur (certains types de device/navigateur?): 56% ont un bug sur compris_depenses contre 3% pour les autres
region_code <- function(code) {
reg <- "autre"
regions <- list(
"ARA" = c('01', '03', '07', '15', '26', '38', '42', '43', '63', '69', '73', '74'),
"Est" = c('21', '25', '39', '58', '70', '71', '89', '90', '08', '10', '51', '52', '54', '55', '57', '67', '68', '88'),
"Ouest" = c('22', '29', '35', '56', '14', '27', '50', '61', '76' ),
"Centre" = c('18', '28', '36', '37', '41', '45', '44', '49', '53', '72', '85'),
"Nord" = c('02', '59', '60', '62', '80'),
"IDF" = c('75', '77', '78', '91', '92', '93', '94', '95'),
"SO" = c('16', '17', '19', '23', '24', '33', '40', '47', '64', '79', '86', '87'),
"Occ" = c('09', '11', '12', '30', '31', '32', '34', '46', '48', '65', '66', '81', '82'),
"PACA" = c( '04', '05', '06', '13', '83', '84')
)
for (i in 1:9) if (as.numeric(code) %in% as.numeric(regions[[i]])) reg <- names(regions)[i]
return(reg)
} # TODO: pourquoi Centre excède de 20% le quota? Pourquoi y a-t-il aussi des excès dee quotas dans taille_agglo?
region_dep <- rep("", 95)
for (i in 1:95) region_dep[i] <- region_code(i)
s$region <<- "autre"
s$region[as.numeric(substr(s$code_postal, 1, 2)) %in% 1:95] <<- region_dep[as.numeric(substr(s$code_postal, 1, 2))]
# TODO: missing schiste_traite? dep_traites <- c(01, 02, 04, 06, 07, 08, 10, 11, 12, 13, 24, 25, 26, 30, 31, 32, 33, 34, 38, 39, 40, 45, 46, 48, 51, 54, 55, 57, 59, 60, 62, 64, 65, 67, 68, 69, 71, 73, 74, 77, 78, 82, 83, 84, 89, 90, 91, 93, 94, 95)
s$nb_vehicules <<- (s$nb_vehicules_texte=='Un') + 2*(s$nb_vehicules_texte=='Deux ou plus')
s$variante_partielle <<- 'NA'
s$variante_partielle[!is.na(s$gagnant_chauffage_categorie)] <<- 'c'
s$variante_partielle[!is.na(s$gagnant_fuel_categorie)] <<- 'f'
label(s$variante_partielle) <<- "variante_partielle: Variante aléatoire (c/f) de la taxe partielle sur le chauffage ou les carburants (=fuel)"
s$perte_relative_partielle[s$variante_partielle=='c'] <<- s$perte_relative_chauffage[s$variante_partielle=='c']
s$perte_relative_partielle[s$variante_partielle=='f'] <<- s$perte_relative_fuel[s$variante_partielle=='f']
label(s$perte_relative_partielle) <<- "perte_relative_partielle: Une hausse des taxes sur variante_partielle (chauffage ou fuel) ferait perdre plus à votre ménage que la moyenne (Oui, beaucoup/un peu plus/Autant que la moyenne/Non, un peu/beaucoup moins/NSP) - Q155, 162"
# s$gain_fuel <- NA
s$gain_fuel[s$gagnant_fuel_categorie=='Non affecté' & s$variante_partielle=='f'] <<- 0
s$gain_fuel[s$gagnant_fuel_categorie=='Gagnant' & s$variante_partielle=='f'] <<- 1 + as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$gain_taxe_fuel_hausse[s$gagnant_fuel_categorie=='Gagnant' & s$variante_partielle=='f']))))/25
s$gain_fuel[s$gagnant_fuel_categorie=='Perdant' & s$variante_partielle=='f'] <<- - 1 - as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$gain_taxe_fuel_baisse[s$gagnant_fuel_categorie=='Perdant' & s$variante_partielle=='f']))))/25
label(s$gain_fuel) <<- "gain_fuel: Catégorie de gain-perte de pouvoir d'achat par UC, suite à hausse taxe carburants compensée, dans [-6;5] (seuils: -160/-110/-70/-40/-15/0/10/20/30/40)"
s$gain_chauffage[s$gagnant_chauffage_categorie=='Non affecté' & s$variante_partielle=='c'] <<- 0
s$gain_chauffage[s$gagnant_chauffage_categorie=='Gagnant' & s$variante_partielle=='c'] <<- 1 + as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$gain_taxe_chauffage_hausse[s$gagnant_chauffage_categorie=='Gagnant' & s$variante_partielle=='c']))))/25
s$gain_chauffage[s$gagnant_chauffage_categorie=='Perdant' & s$variante_partielle=='c'] <<- - 1 - as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$gain_taxe_chauffage_baisse[s$gagnant_chauffage_categorie=='Perdant' & s$variante_partielle=='c']))))/25
label(s$gain_chauffage) <<- "gain_fuel: Catégorie de gain-perte de pouvoir d'achat par UC, suite à hausse taxe chauffage compensée, dans [-6;5] (seuils: -160/-110/-70/-40/-15/0/10/20/30/40)"
s$gagnant_partielle_categorie[s$variante_partielle=='c'] <<- s$gagnant_chauffage_categorie[s$variante_partielle=='c']
s$gagnant_partielle_categorie[s$variante_partielle=='f'] <<- s$gagnant_fuel_categorie[s$variante_partielle=='f']
label(s$gagnant_partielle_categorie) <<- "gagnant_partielle_categorie: Ménage Gagnant/Non affecté/Perdant par hausse taxe partielle (chauffage ou fuel) compensée, dans [-6;5] (seuils: -160/-110/-70/-40/-15/0/10/20/30/40) (gagnant_fuel_categorie/chauffage)"
s$gain_partielle[s$variante_partielle=='c'] <<- s$gain_chauffage[s$variante_partielle=='c']
s$gain_partielle[s$variante_partielle=='f'] <<- s$gain_fuel[s$variante_partielle=='f']
label(s$gain_partielle) <<- "gain_partielle: Catégorie de gain-perte de pouvoir d'achat par UC, suite à hausse taxe partielle (chauffage ou fuel) compensée, dans [-6;5] (seuils: -160/-110/-70/-40/-15/0/10/20/30/40) (gain_fuel/chauffage)"
s$gain[s$gagnant_categorie=='Non affecté' & s$variante_partielle!='NA'] <<- 0
s$gain[s$gagnant_categorie=='Gagnant' & s$variante_partielle!='NA'] <<- 1 + as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$gain_taxe_hausse[s$gagnant_categorie=='Gagnant' & s$variante_partielle!='NA']))))/50
s$gain[s$gagnant_categorie=='Perdant' & s$variante_partielle!='NA'] <<- - 1 - as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$gain_taxe_baisse[s$gagnant_categorie=='Perdant' & s$variante_partielle!='NA']))))/50
label(s$gain) <<- "gain: Catégorie de gain-perte de pouvoir d'achat par UC, suite à hausse taxe carbone compensée, dans [-6;5] (seuils: -280/-190/-120/-70/-30/0/20/40/60/80)"
s$gain_echelle <<- s$gain
s$gain_fuel_echelle <<- s$gain_fuel
s$gain_chauffage_echelle <<- s$gain_chauffage
s$gain_partielle_echelle <<- s$gain_fuel
s$gain_partielle_echelle[!is.na(s$gain_chauffage_echelle)] <<- s$gain_chauffage_echelle[!is.na(s$gain_chauffage_echelle)]
label(s$gain) <<- "gain: Catégorie de gain-perte de pouvoir d'achat par UC, suite à hausse taxe carbone compensée, dans [-6;5] (seuils: -280/-190/-120/-70/-30/0/20/40/60/80)"
label(s$gain_chauffage_echelle) <<- "gain_chauffage_echelle: Catégorie de gain-perte de pouvoir d'achat par UC, suite à hausse taxe chauffage compensée, dans [-6;5] (seuils: -160/-110/-70/-40/-15/0/10/20/30/40)"
label(s$gain_fuel_echelle) <<- "gain_fuel_echelle: Catégorie de gain-perte de pouvoir d'achat par UC, suite à hausse taxe carburants compensée, dans [-6;5] (seuils: -160/-110/-70/-40/-15/0/10/20/30/40)"
label(s$gain_partielle_echelle) <<- "gain_partielle_echelle: Catégorie de gain-perte de pouvoir d'achat par UC, suite à hausse taxe partielle (carburants ou chauffage) compensée, dans [-6;5] (seuils: -160/-110/-70/-40/-15/0/10/20/30/40)"
# cf. consistency_belief_losses.py pour les imputations
s$gain_min <<- -1000*(s$gain==-6) - 280*(s$gain==-5) - 190*(s$gain==-4) - 120*(s$gain==-3) - 70*(s$gain==-2) - 30*(s$gain==-1) + 0*(s$gain==1) + 20*(s$gain==2) + 40*(s$gain==3) + 60*(s$gain==4) + 80*(s$gain==5)
s$gain_max <<- -280*(s$gain==-6) - 190*(s$gain==-5) - 120*(s$gain==-4) - 70*(s$gain==-3) - 30*(s$gain==-2) - 0*(s$gain==-1) + 20*(s$gain==1) + 40*(s$gain==2) + 60*(s$gain==3) + 80*(s$gain==4) + 2000*(s$gain==5)
s$gain_fuel_min <<- -1000*(s$gain_fuel==-6) - 160*(s$gain_fuel==-5) - 110*(s$gain_fuel==-4) - 70*(s$gain_fuel==-3) - 40*(s$gain_fuel==-2) - 15*(s$gain_fuel==-1) + 0*(s$gain_fuel==1) + 10*(s$gain_fuel==2) + 20*(s$gain_fuel==3) + 30*(s$gain_fuel==4) + 40*(s$gain_fuel==5)
s$gain_fuel_max <<- -160*(s$gain_fuel==-6) - 110*(s$gain_fuel==-5) - 70*(s$gain_fuel==-4) - 40*(s$gain_fuel==-3) - 15*(s$gain_fuel==-2) - 0*(s$gain_fuel==-1) + 10*(s$gain_fuel==1) + 20*(s$gain_fuel==2) + 30*(s$gain_fuel==3) + 40*(s$gain_fuel==4) + 1000*(s$gain_fuel==5)
s$gain_chauffage_min <<- -1000*(s$gain_chauffage==-6) - 160*(s$gain_chauffage==-5) - 110*(s$gain_chauffage==-4) - 70*(s$gain_chauffage==-3) - 40*(s$gain_chauffage==-2) - 15*(s$gain_chauffage==-1) + 0*(s$gain_chauffage==1) + 10*(s$gain_chauffage==2) + 20*(s$gain_chauffage==3) + 30*(s$gain_chauffage==4) + 40*(s$gain_chauffage==5)
s$gain_chauffage_max <<- -160*(s$gain_chauffage==-6) - 110*(s$gain_chauffage==-5) - 70*(s$gain_chauffage==-4) - 40*(s$gain_chauffage==-3) - 15*(s$gain_chauffage==-2) - 0*(s$gain_chauffage==-1) + 10*(s$gain_chauffage==1) + 20*(s$gain_chauffage==2) + 30*(s$gain_chauffage==3) + 40*(s$gain_chauffage==4) + 1000*(s$gain_chauffage==5)
temp <- -405.55*(s$gain==-6) - 224.25*(s$gain==-5) - 147.91*(s$gain==-4) - 92.83*(s$gain==-3) - 48.28*(s$gain==-2) - 13.72*(s$gain==-1) + 10.39*(s$gain==1) + 30.36*(s$gain==2) + 49.96*(s$gain==3) + 69.72*(s$gain==4) + 106.89*(s$gain==5) #  - 1.66*(s$gain==0)
s$gain <<- as.item(temp, labels = structure(c(-405.55, -224.25, -147.91, -92.83, -48.28, -13.72, 0, 10.39, 30.36, 49.96, 69.72, 106.89), names = c("<-280", "-280_-190", "-190_-120", "-120_-70", "-70_-30", "-30_0", "0", "0_20", "20_40", "40_60", "60_80", ">80")), annotation=Label(s$gain))
temp <- NA
temp[!is.na(s$gain_fuel)] <- (-248.76*(s$gain_fuel==-6) - 131.21*(s$gain_fuel==-5) - 87.36*(s$gain_fuel==-4) - 53.27*(s$gain_fuel==-3) - 25.49*(s$gain_fuel==-2) - 7.51*(s$gain_fuel==-1) + 5.17*(s$gain_fuel==1) + 14.73*(s$gain_fuel==2) + 24.85*(s$gain_fuel==3) + 34.89*(s$gain_fuel==4) + 57.42*(s$gain_fuel==5))[!is.na(s$gain_fuel)] #  - 1.17*(s$gain_fuel==0)
s$gain_fuel <<- as.item(temp, labels = structure(c(-248.76, -131.21, -87.36, -53.27, -25.49, -7.51, 0, 5.17, 14.73, 24.85, 34.89, 57.42), names = c("<-160", "-160_-110", "-110_-70", "-70_-40", "-40_-15", "-15_0", "0", "0_10", "10_20", "20_30", "30_40", ">40")), annotation=Label(s$gain_fuel))
temp <- NA
temp[!is.na(s$gain_chauffage)] <- (-262.07*(s$gain_chauffage==-6) - 132.69*(s$gain_chauffage==-5) - 87.05*(s$gain_chauffage==-4) - 53.65*(s$gain_chauffage==-3) - 26.57*(s$gain_chauffage==-2) - 7.20*(s$gain_chauffage==-1) + 4.53*(s$gain_chauffage==1) + 15.44*(s$gain_chauffage==2) + 25.26*(s$gain_chauffage==3) + 35.66*(s$gain_chauffage==4) + 54.67*(s$gain_chauffage==5))[!is.na(s$gain_chauffage)] #  - 1.34*(s$gain_chauffage==0)
s$gain_chauffage <<- as.item(temp, labels = structure(c(-262.07, -132.69, -87.05, -53.65, -26.57, -7.20, 0, 4.53, 15.44, 25.26, 35.66, 54.67), names = c("<-160", "-160_-110", "-110_-70", "-70_-40", "-40_-15", "-15_0", "0", "0_10", "10_20", "20_30", "30_40", ">40")), annotation=Label(s$gain_chauffage))
s$Elasticite_chauffage <<- as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$elasticite_chauffage))))
s$Elasticite_chauffage <<- (s$Elasticite_chauffage==0)*1.5 + (s$Elasticite_chauffage==3)*6.5 + (s$Elasticite_chauffage>3)*(s$Elasticite_chauffage + 5) # Take the average of thresholds, take 40% for >30%
s$Elasticite_chauffage <<- - round(s$Elasticite_chauffage / 30, 2) # converts into elasticity
label(s$Elasticite_chauffage) <<- "Elasticite_chauffage: Élasticité-prix des dépenses de chauffage des Français, calculée en prenant la valeur moyenne des intervalles proposées (seuils à 0/3/10/20/30% pour une hausse de 30%)"
s$Elasticite_chauffage_perso <<- as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$elasticite_chauffage_perso))))
s$Elasticite_chauffage_perso <<- (s$Elasticite_chauffage_perso==0)*1.5 + (s$Elasticite_chauffage_perso==3)*6.5 + (s$Elasticite_chauffage_perso>3)*(s$Elasticite_chauffage_perso + 5) # Take the average of thresholds, take 40% for >30%
s$Elasticite_chauffage_perso <<- - round(s$Elasticite_chauffage_perso / 30, 2) # converts into elasticity
label(s$Elasticite_chauffage_perso) <<- "Elasticite_chauffage_perso: Élasticité-prix des dépenses de chauffage du ménage, calculée en prenant la valeur moyenne des intervalles proposées (seuils à 0/3/10/20/30% pour une hausse de 30%)"
s$Elasticite_fuel <<- as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$elasticite_fuel))))
s$Elasticite_fuel <<- (s$Elasticite_fuel==0)*1.5 + (s$Elasticite_fuel==3)*6.5 + (s$Elasticite_fuel>3)*(s$Elasticite_fuel + 5) # Take the average of thresholds, take 40% for >30%
s$Elasticite_fuel <<- - round(s$Elasticite_fuel / 30, 2) # converts into elasticity
label(s$Elasticite_fuel) <<- "Elasticite_fuel: Élasticité-prix des dépenses de carburants des Français, calculée en prenant la valeur moyenne des intervalles proposées (seuils à 0/3/10/20/30% pour une hausse de 0.5€/L)"
s$Elasticite_fuel_perso <<- as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$elasticite_fuel_perso))))
s$Elasticite_fuel_perso <<- (s$Elasticite_fuel_perso==0)*1.5 + (s$Elasticite_fuel_perso==3)*6.5 + (s$Elasticite_fuel_perso>3)*(s$Elasticite_fuel_perso + 5) # Take the average of thresholds, take 40% for >30%
s$Elasticite_fuel_perso <<- - round(s$Elasticite_fuel_perso / 30, 2) # converts into elasticity
label(s$Elasticite_fuel_perso) <<- "Elasticite_fuel_perso: Élasticité-prix des dépenses de carburants du ménage, calculée en prenant la valeur moyenne des intervalles proposées (seuils à 0/3/10/20/30% pour une hausse de 0.5€/L)"
s$elasticite_partielle <<- s$elasticite_chauffage
s$elasticite_partielle[!is.na(s$elasticite_fuel)] <<- s$elasticite_fuel[!is.na(s$elasticite_fuel)]
label(s$elasticite_partielle) <<- "elasticite_partielle: Réduction de la conso de fioul et gaz OU de carburants des Français suite à augmentation du prix de 30% (0% - Je n'en consomme déjà presque pas/0% - Je suis contraint sur tous mes déplacements/de 0% à 10%/de 10% à 20%/de 20% à 30%/+ de 30% - Je changerais largement mes habitudes de déplacement)"
s$Elasticite_partielle <<- s$Elasticite_chauffage
s$Elasticite_partielle[!is.na(s$Elasticite_fuel)] <<- s$Elasticite_fuel[!is.na(s$Elasticite_fuel)]
label(s$Elasticite_partielle) <<- "Elasticite_partielle: Élasticité-prix des dépenses de fioul et gaz OU de carburants des Français, calculée en prenant la valeur moyenne des intervalles proposées"
s$elasticite_partielle_perso <<- s$elasticite_chauffage_perso
s$elasticite_partielle_perso[!is.na(s$elasticite_fuel_perso)] <<- s$elasticite_fuel_perso[!is.na(s$elasticite_fuel_perso)]
label(s$elasticite_partielle_perso) <<- "elasticite_partielle_perso: Réduction de la conso de fioul et gaz OU de carburants du ménage suite à augmentation du prix de 30% (0% - Je n'en consomme déjà presque pas/0% - Je suis contraint sur tous mes déplacements/de 0% à 10%/de 10% à 20%/de 20% à 30%/+ de 30% - Je changerais largement mes habitudes de déplacement)"
s$Elasticite_partielle_perso <<- s$Elasticite_chauffage_perso
s$Elasticite_partielle_perso[!is.na(s$Elasticite_fuel_perso)] <<- s$Elasticite_fuel_perso[!is.na(s$Elasticite_fuel_perso)]
label(s$Elasticite_partielle_perso) <<- "Elasticite_partielle_perso: Élasticité-prix des dépenses de fioul et gaz OU de carburants du ménage, calculée en prenant la valeur moyenne des intervalles proposées"
s$variante_taxe_info <<- "p"
s$variante_taxe_info[s$gagnant_feedback_categorie!=""] <<- "f"
label(s$variante_taxe_info) <<- "variante_taxe_info: (f/p) Variante aléatoire entre f: feedback (=simulation, 2/3) et p: progressivité (1/3), dans l'information donnée sur la taxe compensée avant de demander à nouveau le gain et l'approbation, ainsi que les bénéfices et problèmes"
for (v in c('CC', 'sante', 'circulation', 'revenu', 'pauvres', 'independance', 'enjeu', 'aucun', 'autre_choix', 'autre')) {
s[[paste('benefices_', v, sep="")]] <<- s[paste('benefices_', v, '_p', sep="")][[1]]
s[[paste('benefices_', v, sep="")]][s$variante_taxe_info=='f'] <<- s[paste('benefices_', v, '_f', sep="")][[1]][s$variante_taxe_info=='f']
label(s[[paste('benefices_', v, sep="")]]) <<- sub("_f: \\* ", ": ", label(s[paste('benefices_', v, '_f', sep="")][[1]]))
}
for (v in c('inefficace', 'alternatives', 'ruraux', 'revenu', 'pauvres', 'economie', 'pretexte', 'aucun', 'autre_choix', 'autre')) {
s[[paste('problemes_', v, sep="")]] <<- s[paste('problemes_', v, '_p', sep="")][[1]]
s[[paste('problemes_', v, sep="")]][s$variante_taxe_info=='f'] <<- s[paste('problemes_', v, '_f', sep="")][[1]][s$variante_taxe_info=='f']
label(s[[paste('problemes_', v, sep="")]]) <<- sub("_f: \\* ", ": ", label(s[paste('problemes_', v, '_f', sep="")][[1]]))
}
s$gagnant_info_categorie <<- s$gagnant_feedback_categorie
s$gagnant_info_categorie[!is.na(s$gagnant_progressif_categorie)] <<- s$gagnant_progressif_categorie[!is.na(s$gagnant_progressif_categorie)]
label(s$gagnant_info_categorie) <<- "gagnant_info_categorie: après info simule_gagnant et/ou progressivité: Ménage Gagnant/Non affecté/Perdant par hausse taxe carbone redistribuée à tous (+110€/an /adulte, +13/15% gaz/fioul, +0.11/13 €/L diesel/essence)"
s$taxe_info_approbation <<- s$taxe_feedback_approbation
s$taxe_info_approbation[!is.na(s$taxe_progressif_approbation)] <<- s$taxe_progressif_approbation[!is.na(s$taxe_progressif_approbation)]
annotation(s$taxe_info_approbation) <<- "taxe_info_approbation: après info simule_gagnant et/ou progressivité - Approbation d'une hausse de la taxe carbone compensée (+110€/an /adulte, +13/15% gaz/fioul, +0.11/13 €/L diesel/essence)"
s$cible[s$cible20==1] <<- '20'
s$cible[s$cible30==1] <<- '30'
s$cible[s$cible40==1] <<- '40'
s$cible[s$cible50==1] <<- '50'
s$cible <<- relevel(as.factor(s$cible), '50')
label(s$cible) <<- "cible: Ciblage du recyclage de la hausse de la taxe carbone, attribué en fonction du revenu du répondant et de son ménage (20/30/40/50% les plus modestes)"
# TODO: manage to use tidyverse without erasing observations
# s <<- merge(s, s %>% gather(key = temp, value = gain_cible, c(gagnant__20_categorie, gagnant_20_30_categorie, gagnant_30_40_categorie, gagnant_40_50_categorie, gagnant_50_70_categorie, gagnant_70__categorie)) %>% filter(gain_cible != "") %>% select(-temp), sort=FALSE) # Warning: attributes are not identical across measure variables; they will be dropped
# label(s$gain_cible) <<- "gain_cible: Ménage Gagnant/Non affecté/Perdant avec hausse taxe carbone à recyclage ciblé (cible: 20/30/40/50% les plus modestes)"
# s <<- merge(s, s %>% gather(key = temp, value = taxe_cible_approbation, c(taxe__20_approbation, taxe_20_30_approbation, taxe_30_40_approbation, taxe_40_50_approbation, taxe_50_70_approbation, taxe_70__approbation)) %>% filter(taxe_cible_approbation != "") %>% select(-temp), sort=FALSE)
# label(s$taxe_cible_approbation) <<- "taxe_cible_approbation: Approbation d'une hausse de la taxe carbone compensée par recyclage ciblé (cible: 20/30/40/50% les plus modestes)"
#
#   # s <<- s %>% gather(key = temp, value = km, c(km_0, km_1, km_2)) %>% filter(km != "") %>% select(-temp) # erases km_0, km_1, km_2
# s <<- merge(s, s %>% gather(key = temp, value = km, c(km_0, km_1, km_2)) %>% filter(km != "") %>% select(-temp), sort=FALSE) # Warning: attributes are not identical across measure variables; they will be dropped
# label(s$km) <<- "km: Nombre de kilomètres parcourus lors des 12 derniers mois en voiture ou moto (par le répondant pour nb_vehicules=0, par les véhicules sinon)"
#
# s <<- merge(s, s %>% gather(key = temp, value = conso, c(conso_1, conso_2)) %>% filter(conso != "") %>% select(-temp), sort=FALSE)
# label(s$conso) <<- "conso:  Consommation moyenne du véhicule (en litres aux 100 km)"
s$gagnant_cible_categorie[!is.na(s$gagnant__20_categorie)] <<- s$gagnant__20_categorie[!is.na(s$gagnant__20_categorie)]
s$gagnant_cible_categorie[!is.na(s$gagnant_20_30_categorie)] <<- s$gagnant_20_30_categorie[!is.na(s$gagnant_20_30_categorie)]
s$gagnant_cible_categorie[!is.na(s$gagnant_30_40_categorie)] <<- s$gagnant_30_40_categorie[!is.na(s$gagnant_30_40_categorie)]
s$gagnant_cible_categorie[!is.na(s$gagnant_40_50_categorie)] <<- s$gagnant_40_50_categorie[!is.na(s$gagnant_40_50_categorie)]
s$gagnant_cible_categorie[!is.na(s$gagnant_50_70_categorie)] <<- s$gagnant_50_70_categorie[!is.na(s$gagnant_50_70_categorie)]
s$gagnant_cible_categorie[!is.na(s$gagnant_70__categorie)] <<- s$gagnant_70__categorie[!is.na(s$gagnant_70__categorie)]
label(s$gagnant_cible_categorie) <<- "gagnant_cible_categorie: Ménage Gagnant/Non affecté/Perdant avec hausse taxe carbone à recyclage ciblé (cible: 20/30/40/50% les plus modestes)"
s$taxe_cible_approbation[!is.na(s$taxe__20_approbation)] <<- s$taxe__20_approbation[!is.na(s$taxe__20_approbation)]
s$taxe_cible_approbation[!is.na(s$taxe_20_30_approbation)] <<- s$taxe_20_30_approbation[!is.na(s$taxe_20_30_approbation)]
s$taxe_cible_approbation[!is.na(s$taxe_30_40_approbation)] <<- s$taxe_30_40_approbation[!is.na(s$taxe_30_40_approbation)]
s$taxe_cible_approbation[!is.na(s$taxe_40_50_approbation)] <<- s$taxe_40_50_approbation[!is.na(s$taxe_40_50_approbation)]
s$taxe_cible_approbation[!is.na(s$taxe_50_70_approbation)] <<- s$taxe_50_70_approbation[!is.na(s$taxe_50_70_approbation)]
s$taxe_cible_approbation[!is.na(s$taxe_70__approbation)] <<- s$taxe_70__approbation[!is.na(s$taxe_70__approbation)]
label(s$taxe_cible_approbation) <<- "taxe_cible_approbation: Approbation d'une hausse de la taxe carbone compensée par recyclage ciblé (cible: 20/30/40/50% les plus modestes)"
s$categorie_cible[!is.na(s$taxe__20_approbation)] <<- '_20'
s$categorie_cible[!is.na(s$taxe_20_30_approbation)] <<- '20_30'
s$categorie_cible[!is.na(s$taxe_30_40_approbation)] <<- '30_40'
s$categorie_cible[!is.na(s$taxe_40_50_approbation)] <<- '40_50'
s$categorie_cible[!is.na(s$taxe_50_70_approbation)] <<- '50_70'
s$categorie_cible[!is.na(s$taxe_70__approbation)] <<- '70_'
label(s$categorie_cible) <<- "categorie_cible: Catégorie de revenu du répondant (et de son ménage) taxe à recyclage ciblé - Catégories: percentile <20/20-30/30-40/40-50/50-70/>70, sachant que revenu_conjoint détermine la catégorie quand percentile de revenu > 70 (780/1140/1430/1670/2220)"
s$traite_cible <<- (s$cible==20)*(s$revenu<780) + (s$cible==30)*(s$revenu<1140) + (s$cible==40)*(s$revenu<1430) + (s$cible==50)*(s$revenu<1670)
s$traite_cible_conjoint <<- (s$nb_adultes > 1)* ((s$cible==20)*(s$revenu_conjoint<780) + (s$cible==30)*(s$revenu_conjoint<1140) + (s$cible==40)*(s$revenu_conjoint<1430) + (s$cible==50)*(s$revenu_conjoint<1670))
label(s$traite_cible) <<- "traite_cible: Indicatrice de transfert reçu par le répondant lors de la hausse de la taxe carbone avec compensation ciblée. Montants: 550/360/270/220 €/an/adulte pour cible à 20/30/40/50"
label(s$traite_cible_conjoint) <<- "traite_cible_conjoint: Indicatrice de transfert reçu par le conjoint du répondant lors de la hausse de la taxe carbone avec compensation ciblée. Montants: 550/360/270/220 €/an/adulte pour cible à 20/30/40/50"
s$versement_cible <<- (s$traite_cible + s$traite_cible_conjoint) * ((s$cible==20)*550 + (s$cible==30)*360 + (s$cible==40)*270 + (s$cible==50)*220)
s$versement_cible_sans_conjoint <<- (s$traite_cible) * ((s$cible==20)*550 + (s$cible==30)*360 + (s$cible==40)*270 + (s$cible==50)*220)
label(s$versement_cible) <<- "versement_cible: Versement annuel reçu par le ménage du répondant lors de la hausse de la taxe carbone avec compensation ciblée. Montants: 550/360/270/220 €/an/parent pour cible à 20/30/40/50"
label(s$versement_cible_sans_conjoint) <<- "versement_cible_sans_conjoint: Versement annuel reçu par le répondant lors de la hausse de la taxe carbone avec compensation ciblée. Montants: 550/360/270/220 €/an/adulte pour cible à 20/30/40/50"
s$versement <<- 110 * s$nb_adultes
label(s$versement) <<- "versement: Versement annuel reçu par le ménage suite à une hausse de la taxe carbone compensée (110 * nb_adultes)"
s$km[!is.na(s$km_0)] <<- s$km_0[!is.na(s$km_0)]
s$km[!is.na(s$km_1)] <<- s$km_1[!is.na(s$km_1)]
s$km[!is.na(s$km_2)] <<- s$km_2[!is.na(s$km_2)]
label(s$km) <<- "km: Nombre de kilomètres parcourus lors des 12 derniers mois en voiture ou moto (par le répondant pour nb_vehicules=0, par les véhicules sinon)"
s$conso[!is.na(s$conso_1)] <<- s$conso_1[!is.na(s$conso_1)]
s$conso[!is.na(s$conso_2)] <<- s$conso_2[!is.na(s$conso_2)]
s$conso[is.na(s$conso)] <<- (6.39 + 7.31) / 2
label(s$conso) <<- "conso:  Consommation moyenne du véhicule (en litres aux 100 km)"
s$gaz <<- grepl('gaz', s$chauffage, ignore.case = T)
s$fioul <<- grepl('fioul', s$chauffage, ignore.case = T)
s$hausse_chauffage <<- -55.507189 + s$gaz * 124.578484 + s$fioul * 221.145441 + s$surface * 0.652174
s$hausse_diesel[s$nb_vehicules == 0] <<- (0.5*(6.39/100) * s$km * 1.4 * (1 - 0.4) * 0.090922)[s$nb_vehicules == 0] # share_diesel * conso * km * price * (1-elasticite) * price_increase
s$hausse_diesel[s$nb_vehicules == 1] <<- ((s$fuel_1=='Diesel') * (s$conso/100) * s$km * 1.4 * (1 - 0.4) * 0.090922)[s$nb_vehicules == 1]
s$hausse_diesel[s$nb_vehicules == 2] <<- (((s$fuel_2_1=='Diesel')*2/3 + (s$fuel_2_2=='Diesel')/3) * (s$conso/100) * s$km * 1.4 * (1 - 0.4) * 0.090922)[s$nb_vehicules == 2]
s$hausse_essence[s$nb_vehicules == 0] <<- (0.5*(7.31/100) * s$km * 1.45 * (1 - 0.4) * 0.076128)[s$nb_vehicules == 0] # share_diesel * conso * km * price * (1-elasticite) * price_increase
s$hausse_essence[s$nb_vehicules == 1] <<- ((s$fuel_1!='Diesel') * (s$conso/100) * s$km * 1.45 * (1 - 0.4) * 0.076128)[s$nb_vehicules == 1]
s$hausse_essence[s$nb_vehicules == 2] <<- (((s$fuel_2_1!='Diesel')*2/3 + (s$fuel_2_2!='Diesel')/3) * (s$conso/100) * s$km * 1.45 * (1 - 0.4) * 0.076128)[s$nb_vehicules == 2]
s$hausse_carburants <<- s$hausse_diesel + s$hausse_essence
label(s$hausse_carburants) <<- "hausse_carburant: Hausse des dépenses de carburants simulées pour le ménage, suite à la taxe (élasticité de 0.4) (hausse_diesel + hausse_essence)"
s$hausse_depenses <<- s$hausse_carburants + s$hausse_chauffage
s$diesel <<- (!is.na(s$fuel_1) & (s$fuel_1=='Diesel')) | (!is.na(s$fuel_2_2) & ((s$fuel_2_1=='Diesel') | (s$fuel_2_2=='Diesel')))
s$essence <<- (!is.na(s$fuel_1) & (s$fuel_1=='Essence')) | (!is.na(s$fuel_2_2) & ((s$fuel_2_1=='Essence') | (s$fuel_2_2=='Essence')))
label(s$diesel) <<- "diesel: Indicatrice de la possession d'un véhicule diesel par le ménage (fuel_1 ou fuel_2_1 ou fuel_2_2 = 'Diesel')"
label(s$essence) <<- "essence: Indicatrice de la possession d'un véhicule à essence par le ménage (fuel_1 ou fuel_2_1 ou fuel_2_2 = 'Essence')"
s$simule_gain <<- 16.1 + s$nb_adultes * 110 - s$hausse_depenses
s$simule_gain_repondant <<- 16.1 + 110 - s$hausse_depenses
label(s$simule_gain) <<- "simule_gain: Gain net annuel simulé pour le ménage du répondant suite à une hausse de taxe carbone compensée: 16.1 + nb_adultes * 110 - hausse_depenses"
label(s$simule_gain_repondant) <<- "simule_gain_repondant: Gain net annuel simulé pour le répondant (sans tenir compte du potentiel versement reçu par les autres adultes du ménage) suite à une hausse de taxe carbone compensée: 116.1 - hausse_depenses"
s$simule_gain_cible <<- s$versement_cible - s$hausse_depenses
s$simule_gain_cible_sans_conjoint <<- s$versement_cible - s$hausse_depenses
label(s$simule_gain_cible) <<- "simule_gain_cible: Gain net simulé pour le ménage du répondant suite à une hausse de taxe carbone avec compensation ciblée: versement_cible - hausse_depenses"
label(s$simule_gain_cible_sans_conjoint) <<- "simule_gain_cible_sans_conjoint: Gain net simulé pour le répondant (sans tenir compte du potentiel versement reçu par son conjoint) suite à une hausse de taxe carbone avec compensation ciblée: versement_cible - hausse_depenses"
s$simule_gagnant[is.na(s$simule_gagnant)] <<- 1*(s$simule_gain[is.na(s$simule_gagnant)] > 0)
s$progressivite[!is.na(s$progressivite_feedback_sans_info)] <<- s$progressivite_feedback_sans_info[!is.na(s$progressivite_feedback_sans_info)]
s$progressivite[!is.na(s$progressivite_feedback_avec_info)] <<- s$progressivite_feedback_avec_info[!is.na(s$progressivite_feedback_avec_info)]
s$progressivite[!is.na(s$progressivite_progressif)] <<- s$progressivite_progressif[!is.na(s$progressivite_progressif)]
label(s$progressivite) <<- "progressivite: ~ Une hausse de la taxe carbone compensée avantagerait les plus modestes (réunion des trois variante_progressivite: prog/fb_info/fb_no_info où seule fb_no_info est sans information préalable sur la progressivité) - Q206-208"
s$variante_progressivite[!is.na(s$progressivite_feedback_sans_info)] <<- "fb_no_info"
s$variante_progressivite[!is.na(s$progressivite_feedback_avec_info)] <<- "fb_info"
s$variante_progressivite[s$variante_taxe_info=='p'] <<- "prog" # !is.na(s$progressivite_progressif) |
s$variante_progressivite[s$variante_taxe_info=='f' & s$apres_modifs==FALSE] <<- 'fb_no_info'
label(s$variante_progressivite) <<- "variante_progressivite: prog/fb_info/fb_no_info Variante aléatoire du bloc de questions où figure 'progressivite'. prog: info sur la progressivité / fb: feedback sur le statut gagnant/perdant simulé, info/no_info: avec/sans info sur la progressivité de la mesure" # , seulement pour apres_modifs=T
s$info_progressivite <<- FALSE
s$info_progressivite[s$variante_taxe_info=='p' | s$variante_progressivite=='fb_info'] <<- T
label(s$info_progressivite) <<- "info_progressivite: Indicatrice qu'a été montrée l'information que la hausse de la taxe carbone compensée avantagerait les plus modestes"
s$variante_monetaire[is.na(s$variante_monetaire)] <<- 0 # concerne seulement une observation. Évite des complications inutiles.
s$age_18_24 <<- 1*(s$age == '18 à 24 ans')
s$age_25_34 <<- 1*(s$age == '25 à 34 ans')
s$age_35_49 <<- 1*(s$age == '35 à 49 ans')
s$age_50_64 <<- 1*(s$age == '50 à 64 ans')
s$age_65_plus <<- 1*(s$age == '65 ans ou plus')
s$score_ges <<- 1 * (s$ges_CO2 == TRUE) + 1*(s$ges_CH4 == TRUE) + 1*(s$ges_O2 == FALSE) + 1*(s$ges_pm == FALSE)
label(s$score_ges) <<- "score_ges: Somme des bonnes réponses au questionnaire gaz à effet de serre (ges_O2/CH4/pm/CO2)"
s$score_climate_call <<- 1*(s$ges_avion == TRUE) + 1*(s$ges_boeuf == TRUE) + 1*(s$ges_nucleaire == FALSE)
label(s$score_climate_call) <<- "score_climate_call: Somme des bonnes réponses au questionnaire Climate Call (avion-train / boeuf-pates / nucleaire-eolien) ges_avion/boeuf/nucleaire"
s$duree_info[s$info_CC==1 & s$info_PM==1] <<- s$duree_info_CC_PM[s$info_CC==1 & s$info_PM==1]
s$duree_info[s$info_CC==0 & s$info_PM==1] <<- s$duree_info_PM[s$info_CC==0 & s$info_PM==1]
s$duree_info[s$info_CC==1 & s$info_PM==0] <<- s$duree_info_CC[s$info_CC==1 & s$info_PM==0]
s$duree_info[s$info_CC==0 & s$info_PM==0] <<- s$duree_no_info[s$info_CC==0 & s$info_PM==0]
label(s$duree_info) <<- "duree_info: Temps de soumission - Ancrage (information procurée ou non au début sur changement climatique ou particules fines) (duree_info_CC/PM/CC_PM/no_info)"
for (v in c("autonomie", "priorite", "etats", "global", "trop")) {
s[[paste("aide_non", v, sep="_")]] <<- NA
s[[paste("aide_non", v, sep="_")]][!is.na(s$transferts_inter_info) & s$transferts_inter_info==T & s$aide_2p==T] <<- s[[paste("aide_non", v, "i", sep="_")]][!is.na(s$transferts_inter_info) & s$transferts_inter_info==T & s$aide_2p==T]
s[[paste("aide_non", v, sep="_")]][!is.na(s$transferts_inter_info) & s$transferts_inter_info==FALSE & s$aide_2p==T] <<- s[[paste("aide_non", v, "ni", sep="_")]][!is.na(s$transferts_inter_info) & s$transferts_inter_info==FALSE & s$aide_2p==T]
label(s[[paste("aide_non", v, sep="_")]]) <<- Label(s[[paste("aide_non", v, "i", sep="_")]])
<<<<<<< master
<<<<<<< master
=======
}
categories_depenses <- c("sante", "retraites", "protection", "education", "recherche", "loisirs", "infrastructures", "justice", "armee", "securite", "aide")
# for (i in 0:10) s[[paste('dep', i, 'en_position', sep='_')]] <<- NA
for (i in 0:10) {
s[[paste('dep', i, 'en_position', sep='_')]] <<- (s$en_position_1==i) + 2*(s$en_position_2==i)  + 3*(s$en_position_3==i)  + 4*(s$en_position_4==i)  + 5*(s$en_position_5==i)  + 6*(s$en_position_6==i)  + 7*(s$en_position_7==i)  + 8*(s$en_position_8==i)  + 9*(s$en_position_9==i)  + 10*(s$en_position_10==i)
label(s[[paste('dep', i, 'en_position', sep='_')]]) <<- paste(paste('dep', i, 'en_position', sep='_'), ": Position à laquelle est affichée la catégorie de dépense ", i, "(", categories_depenses[i], ") (cf. en_position_i)", sep="")
# for (o in 1:nrow(s)) {
#   j <- s[[paste('en_position', i, sep='_')]][o]
#   if (!is.na(j)) s[[paste('dep', j, 'en_position', sep='_')]][o] <<- i
#   s[[paste('dep', j, 'en_position', sep='_')]][!is.na(s$en_position_0)] <-
# }
}
s <<- s[, -c(78:97, 100:119, 294:303)]
# TODO: qualité, connaissances CC, opinions CC
}
# convert_s()
# prepare_s(exclude_screened=FALSE, exclude_speeder=FALSE, only_finished=FALSE)
# sa <- s
# prepare_s()
weighting_s <- function(data, printWeights = T) { # cf. google sheet
d <- data
d$region[is.na(d$region)] <- 'autre'
d$taille_agglo <- as.numeric(d$taille_agglo)
# d$csp <- factor(d$csp)
# d$region <- factor(d$region)
# levels(d$csp) <- c(levels(d$csp),"missing")
# levels(d$region) <- c(levels(d$region),"missing")
# levels(d$taille_agglo) <- c(levels(d$taille_agglo),"missing")
# levels(d$sexe) <- c(levels(d$sexe),"missing")
# d$csp[is.na(d$csp) | d$csp=="" | d$csp=="NSP"] <- "missing"
# d$taille_agglo[is.na(d$taille_agglo)] <- "missing"
# d$sexe[d$sexe=="" | d$sexe=="Autre"] <- "missing"
unweigthed <- svydesign(ids=~1, data=d)
sexe <- data.frame(sexe = c("Féminin", "Masculin"), Freq=nrow(d)*c(0.516,0.484)) # http://www.insee.fr/fr/themes/detail.asp?ref_id=bilan-demo&reg_id=0&page=donnees-detaillees/bilan-demo/pop_age2.htm
csp <- data.frame(csp = c("Inactif", "Ouvrier", "Cadre", "Indépendant", "Intermédiaire", "Retraité", "Employé", "Agriculteur"),
Freq=nrow(d)*c(0.1244,0.1214,0.0943,0.0341,0.1364,0.3279,0.1535,0.008))
region <- data.frame(region = c("autre","ARA", "Est", "Nord", "IDF", "Ouest", "SO", "Occ", "Centre", "PACA"),
Freq=nrow(d)*c(0.001,0.124,0.129,0.093,0.189,0.103,0.093,0.091,0.099,0.078))
age <- data.frame(age = c("18-24", "25-34", "35-49", "50-64", "65+"),
Freq=nrow(d)*c(0.117,0.147,0.242,0.242,0.252)) # Données/estim-pop-reg-sexe...
taille_agglo <- data.frame(taille_agglo = c(1:5), Freq=nrow(d)*c(0.2166,0.1710,0.1408,0.3083,0.1633))
# revenu <- data.frame(revenu = c(), Freq=nrow(d)*c())
diplome4 <- data.frame(diplome4 = c("Aucun diplôme ou brevet", "CAP ou BEP", "Baccalauréat", "Supérieur"),  # http://webcache.googleusercontent.com/search?q=cache:rUvf6u0uCnEJ:www.insee.fr/fr/themes/tableau.asp%3Freg_id%3D0%26ref_id%3Dnattef07232+&cd=1&hl=fr&ct=clnk&gl=fr&lr=lang_en%7Clang_es%7Clang_fr
Freq=nrow(d)*c(0.301, 0.246, 0.168, 0.285))
if (length(which(is.na(d$taille_agglo)))>0) raked <- rake(design= unweigthed, sample.margins = list(~sexe,~diplome4,~region,~csp,~age),
population.margins = list(sexe,diplome4,region,csp,age))
else raked <- rake(design= unweigthed, sample.margins = list(~sexe,~diplome4,~taille_agglo,~region,~csp,~age),
population.margins = list(sexe,diplome4,taille_agglo,region,csp,age))
if (printWeights) {    print(summary(weights(raked))  )
print(sum( weights(raked) )^2/(length(weights(raked))*sum(weights(raked)^2)) ) # <0.5 : problématique
print( length(which(weights(raked)<0.25 | weights(raked)>4))/ length(weights(raked)))
}
return(weights(trimWeights(raked, lower=0.25, upper=4, strict=TRUE)))
}
prepare_s <- function(exclude_speeder=TRUE, exclude_screened=TRUE, only_finished=TRUE, only_known_agglo=T) { # , exclude_quotas_full=TRUE
# setwd("/home/adrien/Google Drive/Economie/Travail/enquete/codes")
# setwd("C:/Users/a.fabre/Google Drive/Economie/Travail/enquete/codes")
# pes <<- read.csv("fin.csv", sep=";")
# s <<- read.delim("politique.tsv", fileEncoding="UTF-16")
# f_data <- read.delim("fin.tsv", fileEncoding="UTF-16")
s <<- read_csv("survey.csv")
for (i in 1:length(s)) { label(s[[i]]) <<- toString(s[i][[1]][1]) } # Use the first line to create variable names labels then remove it - to run only once # TODO: bug
s <<- s[-c(1,2),c(1:91,94:115,117:235,241,247:310,313:319,92,93,116,311,312,236:240,242:246)]
# if (exclude_screened) { s <<- s[s$Q_TerminateFlag=="",] } # remove Screened
# if (exclude_speeder) { s <<- s[n(s$`Duration (in seconds)`) > 540,] } # remove speedest
# if (exclude_quotas_full) { s <<- s[s[101][[1]] %in% c(1:5),]  } # remove those with a problem for the taille d'agglo
# if (exclude_quotas_full) { s <<- s[s$Q_TerminateFlag=="",]  } # remove those with a problem for the taille d'agglo
# if (only_finished) { s <<- s[as.vector(s$Finished)=="True",] }
relabel_and_rename_s()
print(paste(length(which(s$exclu=="QuotaMet")), "QuotaMet"))
s$fini[s$exclu=="QuotaMet" | is.na(s$revenu)] <<- "False" # To check the number of QuotaMet that shouldn't have incremented the quota, comment this line and: decrit(s$each_strate[s$exclu=="QuotaMet" & s$csp=="Employé" & !grepl("2019-03-04 07", s$date)])
if (exclude_screened) { s <<- s[is.na(s$exclu),] } # remove Screened
if (exclude_speeder) { s <<- s[as.numeric(as.vector(s$duree)) > 420,] } # remove speedest /!\ was 540 before 22-02-11:00 (EST Coast time)
# if (exclude_quotas_full) { s <<- s[s[101][[1]] %in% c(1:5),]  } # remove those with a problem for the taille d'agglo
# if (exclude_quotas_full) { s <<- s[s$Q_TerminateFlag=="",]  } # remove those with a problem for the taille d'agglo
if (only_finished) { s <<- s[s$fini=="True",] }
agglos <- read.csv2('agglos.csv')
names(agglos) <- c("id", "taille_agglo2")
s <<- merge(s, agglos, by="id", all.x=T)
s$taille_agglo[is.na(s$taille_agglo)] <<- s$taille_agglo2[is.na(s$taille_agglo)]
s <<- s[, which(names(s)!="taille_agglo2")]
print(paste(length(which(is.na(s$taille_agglo))), "tailles d'agglo sont manquantes"))
# id_agglo_manquante <- s$id[is.na(s$taille_agglo)]
# write.csv(id_agglo_manquante, "ID_agglo_manquante.csv")
if (only_known_agglo) s <<- s[!is.na(s$taille_agglo),]
convert_s()
s$sample <<- "a"
s$sample[s$fini=="True"] <<- "e"
s$sample[s$fini=="True" & n(s$duree) > 540] <<- "p"
s$sample[s$fini=="True" & n(s$duree) > 540 & s$test_qualite=='Un peu'] <<- "f" # "q"? excluded because out of quotas
s$sample[s$fini=="True" & n(s$duree) > 540 & s$exclu==""] <<- "r"
# s <<- s[-which(is.element(s$id, s$id[duplicated(s$id)]) & !duplicated(s$id)),] # TODO: check duplicates
s$weight <<- weighting_s(s)
}
CImedian <- function(vec) { # 95% confidence interval
res <- tryCatch(unlist(ci.median(vec[!is.na(vec) & vec!=-1])), error=function(e) {print('NA')})
return(paste(res[paste('ci.lower')], res[paste('ci.median')], res[paste('ci.upper')], length(which(!is.na(vec) & vec!=-1)))) }
# from http://pcwww.liv.ac.uk/~william/R/crosstab.r http://rstudio-pubs-static.s3.amazonaws.com/6975_c4943349b6174f448104a5513fed59a9.html
Crosstab <- function (..., dec.places = NULL, type = NULL, style = "wide", row.vars = NULL, col.vars = NULL, percentages = TRUE,  addmargins = TRUE, subtotals=TRUE) {
#Declare function used to convert frequency counts into relevant type of proportion or percentage
mk.pcnt.tbl <- function(tbl, type) {
a <- length(row.vars)
b <- length(col.vars)
mrgn <- switch(type, column.pct = c(row.vars[-a], col.vars),
row.pct = c(row.vars, col.vars[-b]),
joint.pct = c(row.vars[-a], col.vars[-b]),
total.pct = NULL)
tbl <- prop.table(tbl, mrgn)
if (percentages) {
tbl <- tbl * 100
}
tbl
}
#Find no. of vars (all; row; col) for use in subsequent code
n.row.vars <- length(row.vars)
n.col.vars <- length(col.vars)
n.vars <- n.row.vars + n.col.vars
#Check to make sure all user-supplied arguments have valid values
stopifnot(as.integer(dec.places) == dec.places, dec.places > -1)
#type: see next section of code
stopifnot(is.character(style))
stopifnot(is.logical(percentages))
stopifnot(is.logical(addmargins))
stopifnot(is.logical(subtotals))
stopifnot(n.vars>=1)
#Convert supplied table type(s) into full text string (e.g. "f" becomes "frequency")
#If invalid type supplied, failed match gives user automatic error message
types <- NULL
choices <- c("frequency", "row.pct", "column.pct", "joint.pct", "total.pct")
for (tp in type) types <- c(types, match.arg(tp, choices))
type <- types
#If no type supplied, default to 'frequency + total' for univariate tables and to
#'frequency' for multi-dimenstional tables
#For univariate table....
if (n.vars == 1) {
if (is.null(type)) {
# default = freq count + total.pct
type <- c("frequency", "total.pct")
#row.vars <- 1
} else {
#and any requests for row / col / joint.pct must be changed into requests for 'total.pct'
type <- ifelse(type == "frequency", "frequency", "total.pct")
}
#For multivariate tables...
} else if (is.null(type)) {
# default = frequency count
type <- "frequency"
}
#Check for integrity of requested analysis and adjust values of function arguments as required
if ((addmargins==FALSE) & (subtotals==FALSE)) {
warning("WARNING: Request to suppress subtotals (subtotals=FALSE) ignored because no margins requested (addmargins=FALSE)")
subtotals <- TRUE
}
if ((n.vars>1) & (length(type)>1) & (addmargins==TRUE)) {
warning("WARNING: Only row totals added when more than one table type requested")
#Code lower down selecting type of margin implements this...
}
if ((length(type)>1) & (subtotals==FALSE)) {
warning("WARNING: Can only request supply one table type if requesting suppression of subtotals; suppression of subtotals not executed")
subtotals <- TRUE
}
if ((length(type)==1) & (subtotals==FALSE)) {
choices <- c("frequency", "row.pct", "column.pct", "joint.pct", "total.pct")
tp <- match.arg(type, choices)
if (tp %in% c("row.pct","column.pct","joint.pct")) {
warning("WARNING: subtotals can only be suppressed for tables of type 'frequency' or 'total.pct'")
subtotals<- TRUE
}
}
if ((n.vars > 2) & (n.col.vars>1) & (subtotals==FALSE))
warning("WARNING: suppression of subtotals assumes only 1 col var; table flattened accordingly")
if ( (subtotals==FALSE) & (n.vars>2) )  {
#If subtotals not required AND total table vars > 2
#Reassign all but last col.var as row vars
#[because, for simplicity, Crosstabs assumes removal of subtotals uses tables with only ONE col var]
#N.B. Subtotals only present in tables with > 2 cross-classified vars...
if (length(col.vars)>1) {
row.vars <- c(row.vars,col.vars[-length(col.vars)])
col.vars <- col.vars[length(col.vars)]
n.row.vars <- length(row.vars)
n.col.vars <- 1
}
}
#If dec.places not set by user, set to 2 unlesss only one table of type frequency requested,
#in which case set to 0.  [Leaves user with possibility of having frequency tables with > 0 dp]
if (is.null(dec.places)) {
if ((length(type)==1) & (type[1]=="frequency")) {
dec.places <- 0
} else {
dec.places <-2
}
}
#Take the original input data, whatever form originally supplied in,
#convert into table format using requested row and col vars, and save as 'tbl'
args <- list(...)
if (length(args) > 1) {
if (!all(sapply(args, is.factor)))
stop("If more than one argument is passed then all must be factors")
tbl <- table(...)
}
else {
if (is.factor(...)) {
tbl <- table(...)
}
else if (is.table(...)) {
tbl <- eval(...)
}
else if (is.data.frame(...)) {
#tbl <- table(...)
if (is.null(row.vars) && is.null(col.vars)) {
tbl <- table(...)
}
else {
var.names <- c(row.vars,col.vars)
A <- (...)
tbl <- table(A[var.names])
if(length(var.names==1)) names(dimnames(tbl)) <- var.names
#[table() only autocompletes dimnames for multivariate Crosstabs of dataframes]
}
}
else if (class(...) == "ftable") {
tbl <- eval(...)
if (is.null(row.vars) && is.null(col.vars)) {
row.vars <- names(attr(tbl, "row.vars"))
col.vars <- names(attr(tbl, "col.vars"))
}
tbl <- as.table(tbl)
}
else if (class(...) == "ctab") {
tbl <- eval(...)
if (is.null(row.vars) && is.null(col.vars)) {
row.vars <- tbl$row.vars
col.vars <- tbl$col.vars
}
for (opt in c("dec.places", "type", "style", "percentages",
"addmargins", "subtotals")) if (is.null(get(opt)))
assign(opt, eval(parse(text = paste("tbl$", opt,
sep = ""))))
tbl <- tbl$table
}
else {
stop("first argument must be either factors or a table object")
}
}
#Convert supplied table style into full text string (e.g. "l" becomes "long")
style <- match.arg(style, c("long", "wide"))
#Extract row and col names to be used in creating 'tbl' from supplied input data
nms <- names(dimnames(tbl))
z <- length(nms)
if (!is.null(row.vars) && !is.numeric(row.vars)) {
row.vars <- order(match(nms, row.vars), na.last = NA)
}
if (!is.null(col.vars) && !is.numeric(col.vars)) {
col.vars <- order(match(nms, col.vars), na.last = NA)
}
if (!is.null(row.vars) && is.null(col.vars)) {
col.vars <- (1:z)[-row.vars]
}
if (!is.null(col.vars) && is.null(row.vars)) {
row.vars <- (1:z)[-col.vars]
}
if (is.null(row.vars) && is.null(col.vars)) {
col.vars <- z
row.vars <- (1:z)[-col.vars]
}
#Take the original input data, converted into table format using supplied row and col vars (tbl)
#and create a second version (Crosstab) which stores results as percentages if a percentage table type is requested.
if (type[1] == "frequency")
Crosstab <- tbl
else
Crosstab <- mk.pcnt.tbl(tbl, type[1])
#If multiple table types requested, create and add these to
if (length(type) > 1) {
tbldat <- as.data.frame.table(Crosstab)
z <- length(names(tbldat)) + 1
tbldat[z] <- 1
pcntlab <- type
pcntlab[match("frequency", type)] <- "Count"
pcntlab[match("row.pct", type)] <- "Row %"
pcntlab[match("column.pct", type)] <- "Column %"
pcntlab[match("joint.pct", type)] <- "Joint %"
pcntlab[match("total.pct", type)] <- "Total %"
for (i in 2:length(type)) {
if (type[i] == "frequency")
Crosstab <- tbl
else Crosstab <- mk.pcnt.tbl(tbl, type[i])
Crosstab <- as.data.frame.table(Crosstab)
Crosstab[z] <- i
tbldat <- rbind(tbldat, Crosstab)
}
tbldat[[z]] <- as.factor(tbldat[[z]])
levels(tbldat[[z]]) <- pcntlab
Crosstab <- xtabs(Freq ~ ., data = tbldat)
names(dimnames(Crosstab))[z - 1] <- ""
}
#Add margins if required, adding only those margins appropriate to user request
if (addmargins==TRUE) {
vars <- c(row.vars,col.vars)
if (length(type)==1) {
if (type=="row.pct")
{ Crosstab <- addmargins(Crosstab,margin=c(vars[n.vars]))
tbl <- addmargins(tbl,margin=c(vars[n.vars]))
}
else
{ if (type=="column.pct")
{ Crosstab <- addmargins(Crosstab,margin=c(vars[n.row.vars]))
tbl <- addmargins(tbl,margin=c(vars[n.row.vars]))
}
else
{ if (type=="joint.pct")
{ Crosstab <- addmargins(Crosstab,margin=c(vars[(n.row.vars)],vars[n.vars]))
tbl <- addmargins(tbl,margin=c(vars[(n.row.vars)],vars[n.vars]))
}
else #must be total.pct OR frequency
{ Crosstab <- addmargins(Crosstab)
tbl <- addmargins(tbl)
}
}
}
}
#If more than one table type requested, only adding row totals makes any sense...
if (length(type)>1) {
Crosstab <- addmargins(Crosstab,margin=c(vars[n.vars]))
tbl <- addmargins(tbl,margin=c(vars[n.vars]))
}
}
#If subtotals not required, and total vars > 2, create dataframe version of table, with relevent
#subtotal rows / cols dropped [Subtotals only present in tables with > 2 cross-classified vars]
t1 <- NULL
if ( (subtotals==FALSE) & (n.vars>2) )  {
#Create version of Crosstab in ftable format
t1 <- Crosstab
t1 <- ftable(t1,row.vars=row.vars,col.vars=col.vars)
#Convert to a dataframe
t1 <- as.data.frame(format(t1),stringsAsFactors=FALSE)
#Remove backslashes from category names AND colnames
t1 <- apply(t1[,],2, function(x) gsub("\"","",x))
#Remove preceding and trailing spaces from category names to enable accurate capture of 'sum' rows/cols
#[Use of grep might extrac category labels with 'sum' as part of a longer one or two word string...]
t1 <- apply(t1,2,function(x) gsub("[[:space:]]*$","",gsub("^[[:space:]]*","",x)))
#Reshape dataframe to that variable and category labels display as required
#(a) Move col category names down one row; and move col variable name one column to right
t1[2,(n.row.vars+1):ncol(t1)] <- t1[1,(n.row.vars+1):ncol(t1)]
t1[1,] <- ""
t1[1,(n.row.vars+2)] <- t1[2,(n.row.vars+1)]
#(b) Drop the now redundant column separating the row.var labels from the table data + col.var labels
t1 <- t1[,-(n.row.vars+1)]
#In 'lab', assign category labels for each variable to all rows (to allow identification of sub-totals)
lab <- t1[,1:n.row.vars]
for (c in 1:n.row.vars) {
for (r in 2:nrow(lab)) {
if (lab[r,c]=="") lab[r,c] <- lab[r-1,c]
}
}
lab <- (apply(lab[,1:n.row.vars],2,function(x) x=="Sum"))
lab <- apply(lab,1,sum)
#Filter out rows of dataframe containing subtotals
t1 <- t1[((lab==0) | (lab==n.row.vars)),]
#Move the 'Sum' label associated with last row to the first column; in the process
#setting the final row labels associated with other row variables to ""
t1[nrow(t1),1] <- "Sum"
t1[nrow(t1),(2:n.row.vars)] <- ""
#set row and column names to NULL
rownames(t1) <- NULL
colnames(t1) <- NULL
}
#Create output object 'result' [class: Crosstab]
result <- NULL
#(a) record of argument values used to produce tabular output
result$row.vars <- row.vars
result$col.vars <- col.vars
result$dec.places <- dec.places
result$type <- type
result$style <- style
result$percentages <- percentages
result$addmargins <- addmargins
result$subtotals <- subtotals
#(b) tabular output [3 variants]
result$table <- tbl  #Stores original cross-tab frequency counts without margins [class: table]
result$Crosstab <- Crosstab #Stores cross-tab in table format using requested style(frequency/pct) and table margins (on/off)
#[class: table]
result$Crosstab.nosub <- t1  #Crosstab with subtotals suppressed [class: dataframe; or NULL if no subtotals suppressed]
class(result) <- "Crosstab"
#Return 'result' as output of function
result
}
print.Crosstab <- function(x,dec.places=x$dec.places,subtotals=x$subtotals,...) {
row.vars <- x$row.vars
col.vars <- x$col.vars
n.row.vars <- length(row.vars)
n.col.vars <- length(col.vars)
n.vars <- n.row.vars + n.col.vars
if (length(x$type)>1) {
z<-length(names(dimnames(x$Crosstab)))
if (x$style=="long") {
row.vars<-c(row.vars,z)
} else {
col.vars<-c(z,col.vars)
}
}
if (n.vars==1) {
if (length(x$type)==1) {
tmp <- data.frame(round(x$Crosstab,x$dec.places))
colnames(tmp)[2] <- ifelse(x$type=="frequency","Count","%")
print(tmp,row.names=FALSE)
} else {
print(round(x$Crosstab,x$dec.places))
}
}
#If table has only 2 dimensions, or subtotals required for >2 dimensional table,
#print table using ftable() on x$Crosstab
if ((n.vars == 2) | ((subtotals==TRUE) & (n.vars>2))) {
tbl <- ftable(x$Crosstab,row.vars=row.vars,col.vars=col.vars)
if (!all(as.integer(tbl)==as.numeric(tbl))) tbl <- round(tbl,dec.places)
print(tbl,...)
}
#If subtotals NOT required AND > 2 dimensions, print table using write.table() on x$Crosstab.nosub
if ((subtotals==FALSE) & (n.vars>2))  {
t1 <- x$Crosstab.nosub
#Convert numbers to required decimal places, right aligned
width <- max( nchar(t1[1,]), nchar(t1[2,]), 7 )
dec.places <- x$dec.places
number.format <- paste("%",width,".",dec.places,"f",sep="")
t1[3:nrow(t1),((n.row.vars+1):ncol(t1))] <- sprintf(number.format,as.numeric(t1[3:nrow(t1),((n.row.vars+1):ncol(t1))]))
#Adjust column variable label to same width as numbers, left aligned, padding with trailing spaces as required
col.var.format <- paste("%-",width,"s",sep="")
t1[1,(n.row.vars+1):ncol(t1)] <- sprintf(col.var.format,t1[1,(n.row.vars+1):ncol(t1)])
#Adjust column category labels to same width as numbers, right aligned, padding with preceding spaces as required
col.cat.format <- paste("%",width,"s",sep="")
t1[2,(n.row.vars+1):ncol(t1)] <- sprintf(col.cat.format,t1[2,(n.row.vars+1):ncol(t1)])
#Adjust row labels so that each column is of fixed width, using trailing spaces as required
for (i in 1:n.row.vars) {
width <- max(nchar(t1[,i])) + 2
row.lab.format <- paste("%-",width,"s",sep="")
t1[,i] <- sprintf(row.lab.format,t1[,i])
}
write.table(t1,quote=FALSE,col.names=FALSE,row.names=FALSE)
}
}
round(Crosstab(s[s$simule_gagnant==0,], row.vars="gagnant_categorie", col.vars="gagnant_feedback_categorie", type="r", dec.places = 0)$Crosstab)
round(Crosstab(s[s$simule_gagnant==1,], row.vars="gagnant_categorie", col.vars="gagnant_feedback_categorie", type="r", dec.places = 0)$Crosstab)
crosstab(s$gagnant_feedback_categorie, s$gagnant_categorie, weight = s$weight)
crosstab(s$gagnant_feedback_categorie, s$gagnant_categorie)
CrossTable(s$gagnant_feedback_categorie, s$gagnant_categorie)
CrossTable(s$gagnant_categorie, s$gagnant_feedback_categorie)
CrossTable(s$gagnant_categorie, s$gagnant_feedback_categorie, digits=0, prop.col=FALSE, prop.T=FALSE, prop.chisq = FALSE)
CrossTable(s$gagnant_categorie, s$gagnant_feedback_categorie, digits=2, prop.col=FALSE, prop.T=FALSE, prop.chisq = FALSE)
CrossTable(s$gagnant_categorie, s$gagnant_feedback_categorie, prop.col=FALSE, prop.T=FALSE, prop.chisq = FALSE)
CrossTable(s$gagnant_categorie, s$gagnant_feedback_categorie, digits=2, prop.c=FALSE, prop.t=FALSE, prop.chisq = FALSE)
CrossTable(s$gagnant_categorie, s$gagnant_feedback_categorie, cell.layout=FALSE, digits=2, prop.c=FALSE, prop.t=FALSE, prop.chisq = FALSE)
crosstab(s$gagnant_feedback_categorie, s$gagnant_categorie, s$weight)
crosstab(s$gagnant_feedback_categorie[s$variante_taxe_info=='f' & s$simule_gagnant==1], s$gagnant_categorie[s$variante_taxe_info=='f' & s$simule_gagnant==1], s$weight[s$variante_taxe_info=='f' & s$simule_gagnant==1])
decrit(s$gagnant_feedback_categorie[s$variante_taxe_info=='f' & s$simule_gagnant==1])
decrit(s$weight[s$variante_taxe_info=='f' & s$simule_gagnant==1])
decrit(s$gagnant_categorie[s$variante_taxe_info=='f' & s$simule_gagnant==1])
educ <- sample(c(1, 2), 200, replace = TRUE, prob = c(0.3, 0.7))
educ <- factor(educ, levels = c(1, 2), labels = c("Low", "High"))
opinion <- sample(c(1, 2, 9), 200, replace = TRUE,
prob = c(0.4, 0.55, 0.05))
opinion <- factor(opinion, levels = c(1, 2, 9),
labels = c("Disagree", "Agree", "Don't know"))
attr(educ, "label") <- "Education level"
attr(opinion, "label") <- "Opinion"
weight <- sample(c(10, 15, 19), 200, replace = TRUE)
crosstab(opinion, educ, xlab = "Education", ylab = "Opinion")
ct <- crosstab(opinion, educ, weight,
dnn = c("Opinion", "Education"),
user.missing.dep = "Don't know",
expected = TRUE, prop.c = TRUE, prop.r = TRUE,
plot = FALSE)
ct
package("descr")
rm(crosstab)
package("descr")
crosstab(s$gagnant_feedback_categorie, s$gagnant_categorie, s$weight)
crosstab(s$gagnant_feedback_categorie, s$gagnant_categorie, s$weight, dnn=c('gagnant_feedback_categorie', 'gagnant_categorie'))
crosstab(s$gagnant_feedback_categorie, s$gagnant_categorie, s$weight, dnn=c('gagnant_feedback_categorie', 'gagnant_categorie'), prop.r=T)
crosstab(s$gagnant_feedback_categorie[s$simule_gagnant==1], s$gagnant_categorie[s$simule_gagnant==1], s$weight[s$simule_gagnant==1], dnn=c('gagnant_feedback_categorie', 'gagnant_categorie'), prop.r=T)
crosstab(s$gagnant_feedback_categorie[s$simule_gagnant==1], s$gagnant_categorie[s$simule_gagnant==1], s$weight[s$simule_gagnant==1], dnn=c('gagnant_feedback_categorie', 'gagnant_categorie'), prop.c=T)
crosstab(s$gagnant_feedback_categorie[s$simule_gagnant==0], s$gagnant_categorie[s$simule_gagnant==0], s$weight[s$simule_gagnant==0], dnn=c('gagnant_feedback_categorie', 'gagnant_categorie'), prop.c=T)
ct_simule_gagnant <- crosstab(s$gagnant_feedback_categorie[s$simule_gagnant==1], s$gagnant_categorie[s$simule_gagnant==1], s$weight[s$simule_gagnant==1], dnn=c('gagnant_feedback_categorie', 'gagnant_categorie'), prop.c=T)
plot(ct_simule_gagnant, inv.y=T)
plot(ct_simule_gagnant, inv.x=T)
plot(ct_simule_gagnant, inv.axis=T)
plot(ct_simule_gagnant)
crosstab(s$gagnant_feedback_categorie[s$simule_gagnant==1], s$gagnant_categorie[s$simule_gagnant==1], s$weight[s$simule_gagnant==1], dnn=c('gagnant_feedback_categorie', 'gagnant_categorie'), prop.c=T, format="SAS")
crosstab(s$gagnant_feedback_categorie[s$simule_gagnant==1], s$gagnant_categorie[s$simule_gagnant==1], s$weight[s$simule_gagnant==1], dnn=c('gagnant_feedback_categorie', 'gagnant_categorie'), prop.c=T)
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1], s$weight[s$simule_gagnant==1], dnn=c('gagnant_feedback_categorie', 'gagnant_categorie'), prop.c=T)
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1], s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'), prop.c=T)
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1], s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'), prop.r=T)
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1], s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'), prop.r=T)
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1], s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'), prop.r=T)
crosstab(s$gagnant_feedback_categorie[s$simule_gagnant==0], s$gagnant_categorie[s$simule_gagnant==0], s$weight[s$simule_gagnant==0], dnn=c('gagnant_feedback_categorie', 'gagnant_categorie'), prop.c=T)
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1], s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'), prop.r=T)
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1], s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'), prop.r=T, dir=c("h", "v"))
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1], s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'), prop.r=T, dir=c("h", "v"), inv.x=T, inv.y=T)
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1], s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'), prop.r=T, dir=c("h", "v"), inv.x=T, inv.y=T, inv.col=T)
# weighted:
decrit(s$simule_gagnant, weights = s$weight)
decrit(s$gagnant_categorie[s$simule_gagnant==1], weights = s$weight[s$simule_gagnant==1])
decrit(s$gagnant_feedback_categorie[s$simule_gagnant==1], weights = s$weight[s$simule_gagnant==1])
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1], s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'), prop.r=T, dir=c("h", "v")) # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
=======
=======
<<<<<<< refs/remotes/origin/master
>>>>>>> transition matrix
# length(which(n(sid$duree) > 7*60))
# decrit(sid$test_qualite)
>>>>>>> transition matrix
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1], s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'), prop.r=T, dir=c("h", "v")) # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
View(data1)
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1], s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'), prop.r=T, prop.c=T, dir=c("h", "v")) # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, dir=c("h", "v"), sort=2:1) # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T) # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, dir=c("h", "v"), sort=2:1) # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, sort=2:1) # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, sort=2:1, sub='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, sort=2:1, main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, sort=2:1, main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, sort=2:1, xlab='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, sort=2:1, ylab='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1],# dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, sort=2:1, main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, sort=2:1, title='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, sort=2:1, main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1, main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
ct_simule_gagnant <- crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1, main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
plot(ct_simule_gagnant, main='Winning category, After')
plot(ct_simule_gagnant, sub='Winning category, After')
axes(3)
axis(3)
ct_simule_gagnant <- crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1, main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
plot(ct_simule_gagnant, sub='Winning category, After')
ct_simule_gagnant <- crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1, dir=c("h", "v"), main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
ct_simule_gagnant <- crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, sort=2:1, dir=c("v", "h"), main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
ct_simule_gagnant <- crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, sort=2:1, main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
ct_simule_gagnant <- crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1, main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
ct_simule_gagnant <- crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1, main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1, main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
ct_simule_gagnant <- crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1, main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
plot(ct_simule_gagnant, sub='Winning category, After')
ct_simule_gagnant <- crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, main='Winning category, After') # sort=2:1, , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
plot(ct_simule_gagnant, sub='Winning category, After')
plot(ct_simule_gagnant, sub='Winning category, After', dir=c("h", "v"))
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1, main='Winning category, After') # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
plot(ct_simule_gagnant, sub='Winning category, After', dir=c("h", "v"))
plot(ct_simule_gagnant, sub='Winning category, After', sort=2:1, dir=c("h", "v"))
plot(ct_simule_gagnant, sub='Winning category, After', sort=2:1)
ct_simule_gagnant <- crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1, main='Winning category, After') # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
plot(ct_simule_gagnant, sub='Winning category, After', sort=2:1)
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1, main='Winning category, After') # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
plot(ct_simule_gagnant, main='Winning category, After', sort=2:1)
axis(3, xlab='ct_simule_gagnant <- ')
plot(ct_simule_gagnant, sort=2:1)
axis(3, xlab='ct_simule_gagnant <- ')
axis(3, main='ct_simule_gagnant <- ')
axis(3, title='ct_simule_gagnant <- ')
plot(ct_simule_gagnant, sort=2:1)
mtext(3, "Explanatory Variable", line = 2)
mtext(side=3, "Explanatory Variable", line = 2)
axis(3, lwd=0)
plot(ct_simule_gagnant, sort=2:1)
axis(3, lwd=0, labels=NA)
mtext(side=3, "Explanatory Variable", line = 2)
plot(ct_simule_gagnant, sort=2:1, main='Winning category, After')
plot(ct_simule_gagnant, sort=2:1)
plot(ct_simule_gagnant, sort=2:1) #, main='Matrix transition among winners'
axis(3, lwd=0, labels=NA)
mtext(side=3, "Winning category, After", line = 2)
# weighted:
<<<<<<< refs/remotes/thomasdouenne/master
decrit(s$simule_gagnant, weights = s$weight)
decrit(s$gagnant_categorie[s$simule_gagnant==0], weights = s$weight[s$simule_gagnant==0])
decrit(s$gagnant_feedback_categorie[s$simule_gagnant==0], weights = s$weight[s$simule_gagnant==0])
crosstab(s$gagnant_feedback_categorie[s$simule_gagnant==0], s$gagnant_categorie[s$simule_gagnant==0], s$weight[s$simule_gagnant==0], dnn=c('gagnant_feedback_categorie', 'gagnant_categorie'), prop.r=T, dir=c("h", "v")) # , inv.x=T, inv.y=T
crosstab(s$gagnant_feedback_categorie[s$simule_gagnant==0], s$gagnant_categorie[s$simule_gagnant==0], s$weight[s$simule_gagnant==0], dnn=c('gagnant_feedback_categorie', 'gagnant_categorie'), prop.r=T, dir=c("h", "v")) # , inv.x=T, inv.y=T
crosstab( s$gagnant_categorie[s$simule_gagnant==0], s$gagnant_feedback_categorie[s$simule_gagnant==0],s$weight[s$simule_gagnant==0], dnn=c('Winning category, Before', 'Winning category, After'), prop.r=T, dir=c("h", "v")) # , inv.x=T, inv.y=T
>>>>>>> transition matrix
=======
s$winning_category <- s$gagnant_categorie
s$winning_feedback_category <- s$gagnant_feedback_categorie
s$winning_category <- relabel(s$winning_category, c("Gagnant"="Winner"))
levels(s$winning_category)
labels(s$winning_category)
# weighted:
s$winning_category <- as.factor(s$gagnant_categorie)
labels(s$winning_category)
levels(s$winning_category)
# weighted:
s$winning_category <- as.factor(s$gagnant_categorie)
s$winning_feedback_category <- as.factor(s$gagnant_feedback_categorie)
levels(s$winning_category) <- c('Winner', 'Unaffected', 'Loser')
levels(s$winning_feedback_category) <- c('Winner', 'Unaffected', 'Loser')
ct_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
ct_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab( s$winning_category[s$simule_gagnant==0], s$winning_feedback_category[s$simule_gagnant==0],s$weight[s$simule_gagnant==0], dnn=c('Winning category, Before', 'Winning category, After'), prop.r=T, dir=c("h", "v")) # , inv.x=T, inv.y=T
ct_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
plot(ct_simule_gagnant, sort=2:1) #, main='Matrix transition among winners'
axis(3, lwd=0, labels=NA)
mtext(side=3, "Winning category, After", line = 2)
ct_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
axis(3, lwd=0, labels=NA)
mtext(side=3, "Winning category, After", line = 2)
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
# plot(ct_simule_gagnant, sort=2:1) #, main='Matrix transition among winners'
axis(3, lwd=0, labels=NA)
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, <b>Before</b> feedback', ''),
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), cex.axis=2,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), cex.axis=1.3,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), cex.axis=1.1,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), cex.axis=1,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), cex.axis=0.8,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), cex.axis=0.9,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), cex.axis=0.8,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), #cex.axis=0.8,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), cex.axis=0.8,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
par()
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), cex.axis=0.8, cex.lab=1.2,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), cex.axis=0.8, mar = c(0.1, 3.1, 3.1, 0.1),
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
par(mar = c(0.1, 3.1, 3.1, 0.1), cex.lab=1.2)
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), cex.axis=0.8,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
par(mar = c(0.1, 3.1, 3.1, -0.6), cex.lab=1.2)
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), cex.axis=0.8,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
par(mar = c(0.1, 3.1, 3.1, 0), cex.lab=1.2)
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), cex.axis=0.8,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), cex.axis=1,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), cex.axis=0.9,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
# plot(ct_simule_gagnant, sort=2:1) #, main='Matrix transition among winners'
axis(3, lwd=0, labels=NA)
mtext(side=3, "Winning category, After", line = 2)
# plot(ct_simule_gagnant, sort=2:1) #, main='Matrix transition among winners'
axis(3, lwd=0, labels=NA)
mtext(side=3, "Winning category, After")
mtext(side=3, "Winning category, After", line=1, cex = 1.2)
par(mar = c(0.1, 3.1, 2.1, 0), cex.lab=1.2)
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), cex.axis=0.9,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
# plot(ct_simule_gagnant, sort=2:1) #, main='Matrix transition among winners'
axis(3, lwd=0, labels=NA)
mtext(side=3, "Winning category, After", line=1, cex = 1.2)
mtext(side=3, "Winning category, After", line=0.8, cex = 1.2)
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), cex.axis=0.9,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
# plot(ct_simule_gagnant, sort=2:1) #, main='Matrix transition among winners'
axis(3, lwd=0, labels=NA)
mtext(side=3, "Winning category, After", line=0.8, cex = 1.2)
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c(expression('Winning category,', blod('Before'), 'feedback'), ''), cex.axis=0.9,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c(expression('Winning category,', bold('Before'), 'feedback'), ''), cex.axis=0.9,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
mtext(side=3, expression('Winning category,', bold('Before'), line=0.8, cex = 1.2)
# plot(ct_simule_gagnant, sort=2:1) #, main='Matrix transition among winners'
axis(3, lwd=0, labels=NA)
# plot(ct_simule_gagnant, sort=2:1) #, main='Matrix transition among winners'
axis(3, lwd=0, labels=NA)
mtext(side=3, expression('Winning category,', bold('Before'), 'feedback'), line=0.8, cex = 1.2)
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), cex.axis=0.9,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
# plot(ct_simule_gagnant, sort=2:1) #, main='Matrix transition among winners'
axis(3, lwd=0, labels=NA)
mtext(side=3, expression('Winning category,', bold('Before'), 'feedback'), line=0.8, cex = 1.2)
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c(paste('Winning category,', expression(bold('Before')), 'feedback'), ''), cex.axis=0.9,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
mtext(side=3, paste('Winning category,', expression(bold('Before')), 'feedback'), line=0.8, cex = 1.2)
plot(1:2, 1:2, main=paste('Winning category,', expression(bold('Before')), 'feedback'))
plot(1:2, 1:2, ylab=paste('Winning category,', expression(bold('Before')), 'feedback'))
par(mar = c(3.1, 3.1, 2.1, 0), cex.lab=1.2)
plot(1:2, 1:2, xlab=paste('Winning category,', expression(bold('Before')), 'feedback'))
par(mar = c(8.1, 3.1, 2.1, 0), cex.lab=1.2)
plot(1:2, 1:2, xlab=paste('Winning category,', expression(bold('Before')), 'feedback'))
par(mar = c(0.1, 3.1, 2.1, 0), cex.lab=1.2)
par(mar = c(8.1, 3.1, 2.1, 0), cex.lab=1.2)
plot(1:2, 1:2, xlab=paste('Winning category,', expression(bold(Before)), 'feedback'))
plot(1:2, 1:2, xlab=expression(bold(Before)~feedback))
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c(expression('Winning category,'~bold(Before)~feedback), ''), cex.axis=0.9,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
par(mar = c(0.1, 3.1, 2.1, 0), cex.lab=1.2)
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c(expression('Winning category,'~bold(Before)~feedback), ''), cex.axis=0.9,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
# plot(ct_simule_gagnant, sort=2:1) #, main='Matrix transition among winners'
# axis(3, lwd=0, labels=NA)
mtext(side=3, expression('Winning category,'~bold(After)~feedback), line=0.8, cex = 1.2)
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], #dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
# plot(ct_simule_gagnant, sort=2:1) #, main='Matrix transition among winners'
# axis(3, lwd=0, labels=NA)
mtext(side=3, expression('Winning category,'~bold(After)~feedback), line=0.8, cex = 1.2)
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab_simule_gagnant
plot(crosstab_simule_gagnant, ylab = expression('Winning category,'~bold(Before)~feedback), xlab=NA)
mtext(side=3, expression('Winning category,'~bold(After)~feedback), line=0.8, cex = 1.2)
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab_simule_gagnant
plot(crosstab_simule_gagnant, sort=2:1, cex.axis=0.9, ylab = expression('Winning category,'~bold(Before)~feedback), xlab=NA)
mtext(side=3, expression('Winning category,'~bold(After)~feedback), line=0.8, cex = 1.2)
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9, labelling_cells=T) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab_simule_gagnant
plot(crosstab_simule_gagnant, sort=2:1, cex.axis=0.9, labelling_cells=T, ylab = expression('Winning category,'~bold(Before)~feedback), xlab=NA)
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
labelling_cells()
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9, labeling_cells=T) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab_simule_gagnant
plot(crosstab_simule_gagnant, sort=2:1, cex.axis=0.9, labeling_cells=T, ylab = expression('Winning category,'~bold(Before)~feedback), xlab=NA)
labeling_cells()
?labeling_cells
package("graphics")
labeling_cells()
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9, labeling=1:9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
plot(crosstab_simule_gagnant, sort=2:1, cex.axis=0.9, labeling=1:9, ylab = expression('Winning category,'~bold(Before)~feedback), xlab=NA)
mosaicplot(crosstab_simule_gagnant, sort=2:1, cex.axis=0.9, ylab = expression('Winning category,'~bold(Before)~feedback), xlab=NA)
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab_simule_gagnant
labeling_cells()
plot(crosstab_simule_gagnant, sort=2:1, cex.axis=0.9, ylab = expression('Winning category,'~bold(Before)~feedback), xlab=NA)
mtext(side=3, expression('Winning category,'~bold(After)~feedback), line=0.8, cex = 1.2)
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==0], s$winning_feedback_category[s$simule_gagnant==0],
s$weight[s$simule_gagnant==0], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab_simule_gagnant
plot(crosstab_simule_gagnant, sort=2:1, cex.axis=0.9, ylab = expression('Winning category,'~bold(Before)~feedback), xlab=NA)
mtext(side=3, expression('Winning category,'~bold(After)~feedback), line=0.8, cex = 1.2)
mosaic(crosstab_simule_gagnant)
package('vcd')
mosaic(crosstab_simule_gagnant)
mosaicplot(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9)
mosaicplot(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, cex.axis=0.9)
mosaic(crosstab_simule_gagnant$tab)
mosaic(crosstab_simule_gagnant$tab, labeling=1:9)
?mosaic
mosaic(crosstab_simule_gagnant$tab)
labeling_cells()
labeling_cells(text = crosstab_simule_gagnant$tab, margin = 0)(crosstab_simule_gagnant$tab)
labeling_cells(text = as.table(crosstab_simule_gagnant$tab), margin = 0)(as.table(crosstab_simule_gagnant$tab))
mosaic(crosstab_simule_gagnant$tab)
labeling_cells(text = as.table(crosstab_simule_gagnant$tab), margin = 0)(as.table(crosstab_simule_gagnant$tab))
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
mosaic(crosstab_simule_gagnant$tab)
labeling_cells(text = as.table(crosstab_simule_gagnant$tab), margin = 0)(as.table(crosstab_simule_gagnant$tab))
labeling_cells(text = 1:9, margin = 0)(as.table(crosstab_simule_gagnant$tab))
labeling_cells(text = 1:9, margin = 0)(1:9)
as.table(crosstab_simule_gagnant$tab)
labeling_cells(text = as.table(crosstab_simule_gagnant$tab), margin = 0) #(as.table(crosstab_simule_gagnant$tab))
labeling_cells(text = as.table(crosstab_simule_gagnant$tab), margin = 0)(as.table(crosstab_simule_gagnant$tab))
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
labeling_cells(text = prop.table(crosstab_simule_gagnant$tab), margin = 0)(as.table(crosstab_simule_gagnant$tab))
labeling_cells(text = round(100*prop.table(crosstab_simule_gagnant$tab)), margin = 0)(as.table(crosstab_simule_gagnant$tab))
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
labeling_cells(text = round(100*prop.table(crosstab_simule_gagnant$tab)), margin = 0)(as.table(crosstab_simule_gagnant$tab))
crosstab_simule_gagnant$tab
crosstab_simule_gagnant$prop.r
labeling_cells(text = round(100*prop.table(crosstab_simule_gagnant$prop.r)), margin = 0)(as.table(crosstab_simule_gagnant$tab))
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
labeling_cells(text = round(100*prop.table(crosstab_simule_gagnant$prop.r)), margin = 0)(as.table(crosstab_simule_gagnant$tab))
mosaicplot(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9)
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
labeling_cells(text = round(100*prop.table(crosstab_simule_gagnant$prop.r)), margin = 0)(as.table(crosstab_simule_gagnant$tab))
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
mosaic(crosstab_simule_gagnant$tab)
labeling_cells(text = round(100*prop.table(crosstab_simule_gagnant$prop.r)), margin = 0)(as.table(crosstab_simule_gagnant$tab))
mosaicplot(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9)
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
labeling_cells(text = round(100*prop.table(crosstab_simule_gagnant$prop.r)), margin = 0)(as.table(crosstab_simule_gagnant$tab))
mosaicplot(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9)
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
labeling_cells(text = round(100*prop.table(crosstab_simule_gagnant$prop.r)), margin = 0)(as.table(crosstab_simule_gagnant$tab))
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
labeling_cells(text = round(100*prop.table(crosstab_simule_gagnant$prop.r)), margin = 0)(as.table(crosstab_simule_gagnant$tab))
mosaic(crosstab_simule_gagnant$tab)
labeling_cells(text = round(100*prop.table(crosstab_simule_gagnant$prop.r)), margin = 0)(as.table(crosstab_simule_gagnant$tab))
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
labeling_cells(text = round(100*prop.table(crosstab_simule_gagnant$prop.r)), margin = 0)(as.table(crosstab_simule_gagnant$tab))
labeling_cells(text = round(100*prop.table(crosstab_simule_gagnant$prop.r)), margin = 0)(as.table(crosstab_simule_gagnant$prop.r))
round(100*prop.table(crosstab_simule_gagnant$prop.r)
)
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
round(100*prop.table(crosstab_simule_gagnant$prop.r))
round(100*crosstab_simule_gagnant$prop.r)
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
labeling_cells(text = round(100*crosstab_simule_gagnant$prop.r), margin = 0)(as.table(crosstab_simule_gagnant$prop.r))
labeling_cells(text = round(100*crosstab_simule_gagnant$prop.r)+'%', margin = 0)(as.table(crosstab_simule_gagnant$prop.r))
labeling_cells(text = paste(round(100*crosstab_simule_gagnant$prop.r),'%',sep=''), margin = 0)(as.table(crosstab_simule_gagnant$prop.r))
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
labeling_cells(text = paste(round(100*crosstab_simule_gagnant$prop.r),'%',sep=''), margin = 0)(as.table(crosstab_simule_gagnant$prop.r))
labeling_cells(text = round(100*prop.table(crosstab_simule_gagnant$prop.r)), margin = 0)(as.table(crosstab_simule_gagnant$prop.r))
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
labeling_cells(text = round(100*prop.table(crosstab_simule_gagnant$prop.r)), margin = 0)(as.table(crosstab_simule_gagnant$prop.r))
prop.table(crosstab_simule_gagnant$prop.r)
prop.table(crosstab_simule_gagnant$tab)
prop.r.table(crosstab_simule_gagnant$tab)
round(100*crosstab_simule_gagnant$prop.r)
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
labeling_cells(text = round(100*crosstab_simule_gagnant$prop.r), margin = 0)(as.table(crosstab_simule_gagnant$prop.r))
mosaicplot(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9, labeling=c(1:9))
mosaicplot(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9)
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9, labeling=c(1:9)) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
labeling_cells(text = round(100*crosstab_simule_gagnant$prop.r), margin = 0)(as.table(crosstab_simule_gagnant$prop.r))
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
labeling_cells(text = round(100*crosstab_simule_gagnant$prop.r), margin = 0)(as.table(crosstab_simule_gagnant$prop.r))
# mosaicplot(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
#          s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
#          prop.r=T, sort=2:1, cex.axis=0.9)
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
# mosaicplot(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
#          s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
#          prop.r=T, sort=2:1, cex.axis=0.9)
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9), ylab = expression('Winning category,'~bold(Before)~feedback), xlab=NA)
mtext(side=3, expression('Winning category,'~bold(After)~feedback), line=0.8, cex = 1.2)
# mosaicplot(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
#          s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
#          prop.r=T, sort=2:1, cex.axis=0.9)
mosaic(crosstab_simule_gagnant$tab, ylab = expression('Winning category,'~bold(Before)~feedback), xlab=NA, labeling=c(1:9))
mtext(side=3, expression('Winning category,'~bold(After)~feedback), line=0.8, cex = 1.2)
# mosaicplot(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
#          s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
#          prop.r=T, sort=2:1, cex.axis=0.9)
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
mtext(side=3, expression('Winning category,'~bold(After)~feedback), ylab = expression('Winning category,'~bold(Before)~feedback), xlab=NA, line=0.8, cex = 1.2)
mtext(side=3, expression('Winning category,'~bold(After)~feedback), line=0.8, cex = 1.2)
# mosaicplot(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
#          s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
#          prop.r=T, sort=2:1, cex.axis=0.9)
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
mtext(side=3, expression('Winning category,'~bold(After)~feedback), line=0.8, cex = 1.2)
labeling_cells(text = round(100*crosstab_simule_gagnant$prop.r), margin = 0)(as.table(crosstab_simule_gagnant$prop.r))
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
# mosaicplot(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
#          s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
#          prop.r=T, sort=2:1, cex.axis=0.9)
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
mtext(side=3, expression('Winning category,'~bold(After)~feedback), line=0.8, cex = 1.2)
labeling_cells(text = round(100*crosstab_simule_gagnant$prop.r), margin = 0)(as.table(crosstab_simule_gagnant$prop.r))
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
# mosaicplot(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
#          s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
#          prop.r=T, sort=2:1, cex.axis=0.9)
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
labeling_cells(text = round(100*crosstab_simule_gagnant$prop.r), margin = 0)(as.table(crosstab_simule_gagnant$prop.r))
mtext(side=3, expression('Winning category,'~bold(After)~feedback), line=0.8, cex = 1.2)
# mosaicplot(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
#          s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
#          prop.r=T, sort=2:1, cex.axis=0.9)
mosaic(crosstab_simule_gagnant$tab, shade=T, labeling=c(1:9))
mosaicplot(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9)
mosaicplot(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9)
mosaicplot(crosstab_simule_gagnant$tab, # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9)
labeling_cells(text = round(100*crosstab_simule_gagnant$prop.r), margin = 0)(as.table(crosstab_simule_gagnant$prop.r))
mosaicplot(crosstab_simule_gagnant$tab, # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9, labeling=c(1:9))
labeling_cells(text = round(100*crosstab_simule_gagnant$prop.r), margin = 0)(as.table(crosstab_simule_gagnant$prop.r))
mosaicplot(crosstab_simule_gagnant$tab, # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
sort=2:1, cex.axis=0.9, labeling=c(1:9))
labeling_cells(text = round(100*crosstab_simule_gagnant$prop.r), margin = 0)(as.table(crosstab_simule_gagnant$prop.r))
mosaic(crosstab_simule_gagnant$tab, shade=T, labeling=c(1:9))
labeling_cells(text = round(100*crosstab_simule_gagnant$prop.r), margin = 0)(as.table(crosstab_simule_gagnant$prop.r))
mosaic(crosstab_simule_gagnant$tab, shade=FALSE, labeling=c(1:9))
mosaicplot(crosstab_simule_gagnant$tab, # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
sort=2:1, cex.axis=0.9, labeling=c(1:9))
<<<<<<< refs/remotes/thomasdouenne/master
=======
=======
hovers <- c()
if (nsp) {
for (i in 1:(length(hover)-1)) {
for (j in 1:length(labels)) {
hovers <- c(hovers, paste(hover[i], '<br>', round(100*data[i, j]/(1+data[length(hover), j])), '% des réponses<br>', round(100*data[i, j]), '% des réponses exprimées') )
}
temp <- (s$parle_CC=='Plusieurs fois par an') + 2*(s$parle_CC=='Plusieurs fois par mois') - (s$parle_CC=="NSP")
s$parle_CC <<- as.item(temp, labels = structure(c(-1:2),
names = c("NSP","Presque jamais","Plusieurs fois par an","Plusieurs fois par mois")),
missing.values = -1, annotation=Label(s$parle_CC))
temp <- grepl("Faibles", s$effets_CC) + 2*grepl("Graves", s$effets_CC) + 3*grepl("Désastreux", s$effets_CC) + 4*grepl("Cataclysmiques", s$effets_CC) - (s$effets_CC=="NSP")
s$effets_CC <<- as.item(temp, labels = structure(c(-1:4),
names = c("NSP","Insignifiants","Faibles","Graves","Désastreux","Cataclysmiques")),
# names = c("NSP","Insignifiants, voire bénéfiques","Faibles, car les humains sauraient vivre avec","Graves, car il y aurait plus de catastrophes naturelles","Désastreux, les modes de vie seraient largement altérés","Cataclysmiques, l'humanité disparaîtrait")),
missing.values = -1, annotation=Label(s$effets_CC))
temp <- (s$transports_frequence=="Entre quatre fois par jour et une fois par heure") + 2*(s$transports_frequence=="Une ou deux fois par heure") + 3*(s$transports_frequence=="Plus que trois fois par heure") - (s$transports_frequence=="NSP")
s$transports_frequence <<- as.item(temp, labels = structure(c(-1:3),
names = c("NSP","< 3/jour","1/h - 4/jour","1/h - 2/h","> 3/heure")),
# names = c("NSP","Moins de trois fois par jour","Entre quatre fois par jour et une fois par heure","Une ou deux fois par heure","Plus que trois fois par heure")),
missing.values = -1, annotation=Label(s$transports_frequence))
temp <- (s$transports_avis=="Limitée, mais suffisante") + 2*(s$transports_avis=="Convenable, mais devrait être accrue") + 3*(s$transports_avis=="Satisfaisante") - (s$transports_avis=="NSP")
s$transports_avis <<- as.item(temp, labels = structure(c(-1:3),
names = c("NSP","Insuffisante","Limitée","Convenable","Satisfaisante")),
# names = c("NSP","Insuffisante","Limitée, mais suffisante","Convenable, mais devrait être accrue","Satisfaisante")),
missing.values = -1, annotation=Label(s$transports_avis))
# labels(s$transports_travail_commun) <<- c("Non"="Non", "NSP"="NSP", "Oui, aucun pb"="Oui, ça ne me poserait pas de grande difficulté", "Oui, embêtant"="Oui, mais ça m'embêterait")
# labels(s$transports_travail_actif) <<- c("Non"="Non", "NSP"="NSP", "Oui, aucun pb"="Oui, ça ne me poserait pas de grande difficulté", "Oui, embêtant"="Oui, mais ça m'embêterait")
s$Transports_travail_commun <<- s$transports_travail_commun
s$Transports_travail_actif <<- s$transports_travail_actif
s$Transports_travail_commun[is.na(s$Transports_travail_commun)] <<- "Non concerné"
s$Transports_travail_actif[is.na(s$Transports_travail_actif)] <<- "Non concerné"
s$Transports_travail_actif <<- as.item(as.character(s$Transports_travail_actif), missing.values=c('NSP', "Non concerné"), annotation="Transports_travail_actif: (transports_travail_actif sans NA) Sans changer de logement ni de lieu de travail, il serait possible pour le répondant prenant sa voiture d'effectuer ses trajets domicile-travail en marchant ou en vélo (Non/Oui mais ça l'embêterait/Oui ça ne lui poserait pas de grande difficulté/NSP)")
s$Transports_travail_commun <<- as.item(as.character(s$Transports_travail_commun), missing.values=c('NSP', "Non concerné"), annotation="Transports_travail_commun: (transports_travail_commun sans NA) Sans changer de logement ni de lieu de travail, il serait possible pour le répondant prenant sa voiture de prendre les transports en commun pour ses trajets domicile-travail (Non/Oui mais ça l'embêterait/Oui ça ne lui poserait pas de grande difficulté/NSP)")
s$Transports_distance <<- s$transports_distance
s$Transports_distance[is.na(s$Transports_distance)] <<- mean(s$transports_distance, na.rm=T)
s$Transports_distance <<- as.item(n(s$Transports_distance), missing.values = mean(s$transports_distance, na.rm=T), annotation="Transports_distance: (transports_distance sans NA) L'arrêt de transport en commun le plus proche de chez le répondant est à X minutes de marche")
# TODO: récupérer le vrai âge à partir de ID_age_dep_device.csv
temp <- 20.90*(s$age == "18 à 24 ans") + 29.61*(s$age == "25 à 34 ans") + 42.14*(s$age == "35 à 49 ans") + 56.84*(s$age == "50 à 64 ans") + 75.43*(s$age == "65 ans ou plus")
s$age <<- as.item(temp, labels = structure(c(20.90, 29.61, 42.14, 56.84, 75.43), names = c("18-24", "25-34", "35-49", "50-64", "65+")), annotation=Label(s$age))
# s$Age <<- (s$age == "18 à 24 ans") + 2*(s$age == "25 à 34 ans") + 3.3*(s$age == "35 à 49 ans") + 4.6*(s$age == "50 à 64 ans") + 7*(s$age == "65 ans ou plus")
s$taille_agglo <<- as.item(as.numeric(s$taille_agglo), labels = structure(1:5, names = c("rural", "-20k", "20-100k", "+100k", "Paris")), annotation=Label(s$taille_agglo))
s$Diplome <<- (s$diplome == "Brevet des collèges") + 2*(s$diplome=="CAP ou BEP") + 3*(s$diplome=="Baccalauréat") + 4*(s$diplome=="Bac +2 (BTS, DUT, DEUG, écoles de formation sanitaires et sociales...)") + 5*(s$diplome=="Bac +3 (licence...)") + 6*(s$diplome=="Bac +5 ou plus (master, école d'ingénieur ou de commerce, doctorat, médecine, maîtrise, DEA, DESS...)") - (s$diplome=="NSP (Ne se prononce pas)")
s$diplome4 <<- as.item(pmin(pmax(s$Diplome, 1), 4), labels = structure(1:4, names = c("Aucun diplôme ou brevet", "CAP ou BEP", "Baccalauréat", "Supérieur")), annotation=Label(s$diplome))
# s$diplome4 <<- as.character(s$diplome)
# s$diplome4[s$Diplome<2] <<- "Aucun diplôme ou brevet"
# s$diplome4[s$Diplome>3] <<- "Supérieur"
labels(s$mode_chauffage) <<- c("individuel"="Chauffage individuel", "collectif"="Chauffage collectif", "NSP"="NSP")
labels(s$chauffage) <<- c("Gaz réseau"="Gaz de ville", "Gaz bouteille"="Butane, propane, gaz en citerne", "Fioul"="Fioul, mazout, pétrole", "Électricité"="Électricité", "Bois, solaire..."="Bois, solaire, géothermie, aérothermie (pompe à chaleur)", "Autre"="Autre", "NSP"="NSP")
labels(s$schiste_CC) <<- c("malvenue"="Elle est malvenue : il faudrait mettre fin aux émissions, pas seulement les ralentir", "valable"="Elle est valable : toute baisse des émissions va dans la bonne direction", "NSP"="NSP")
labels(s$cause_CC) <<- c("n'existe pas"="n'est pas une réalité", "naturel"="est principalement dû à la variabilité naturelle du climat", "anthropique"="est principalement dû à l'activité humaine", "NSP"="NSP")
s$Compris_depenses <<- as.character(s$compris_depenses)
s$Compris_depenses[is.na(s$Compris_depenses)] <<- "NA"
s$compris_depenses <<- as.item(as.character(s$compris_depenses),
labels = structure(c("", "Oui","Non","Bug: le graphique ne s'est pas affiché correctement."), names = c("NA", "Oui","Non","Bug")), annotation=attr(s$compris_depenses, "label"))
s$enfant_CC[is.na(s$enfant_CC)] <<- "NSP"
s$enfant_CC_pour_CC[s$enfant_CC=='Non'] <<- 'Non concerné'
s$enfant_CC_pour_CC <<- as.item(as.character(s$enfant_CC_pour_CC), labels = structure(c(T, FALSE, 'Non concerné'), names=c('TRUE', 'FALSE', 'Non concerné')),
missing.values='Non concerné', annotation=Label(s$enfant_CC_pour_CC))
s$enfant_CC_pour_lui[s$enfant_CC=='Non'] <<- 'Non concerné'
s$enfant_CC_pour_lui <<- as.item(as.character(s$enfant_CC_pour_lui), labels = structure(c(T, FALSE, 'Non concerné'), names=c('TRUE', 'FALSE', 'Non concerné')),
missing.values='Non concerné', annotation=Label(s$enfant_CC_pour_lui))
s$gauche_droite <<- pmax(-2,pmin(2,-2 * grepl("extrême gauche", s$extr_gauche) - grepl("De gauche", s$gauche) + grepl("De droite", s$droite) + 2 * grepl("extrême droite", s$extr_droite)))
is.na(s$gauche_droite) <<- (s$gauche_droite == 0) & !grepl("centre", s$centre)
s$Gauche_droite <<- as.factor(s$gauche_droite)
s$gauche_droite <<- as.item(as.numeric(as.vector(s$gauche_droite)), labels = structure(c(-2:2),
names = c("Extrême gauche","Gauche","Centre","Droite","Extrême droite")), annotation="gauche_droite:échelle de -2 (extr_gauche) à +2 (extr_droite) - Orientation politique (Comment vous définiriez-vous ? Plusieurs réponses possibles: (D'extrême) gauche/Du centre/(D'extrême) droite/Libéral/Humaniste/Patriote/Apolitique/Écologiste/Conservateur (champ libre)/NSP)")
levels(s$Gauche_droite) <<- c("Extreme-left", "Left", "Center", "Right", "Extreme-right", "Indeterminate")
s$Gauche_droite[is.na(s$Gauche_droite)] <<- "Indeterminate"
temp <- Label(s$interet_politique)
s$interet_politique <<- 1*(s$interet_politique=='Un peu') + 2*(s$interet_politique=='Beaucoup')
s$interet_politique <<- as.item(s$interet_politique, labels=structure(c(0:2), names=c('Presque pas', 'Un peu', 'Beaucoup')), annotation=temp)
# s$gilets_jaunes[s$gilets_jaunes_NSP==T] <<- -99
s$gilets_jaunes[s$gilets_jaunes_compris==T] <<- 0 # total à 115%
s$gilets_jaunes[s$gilets_jaunes_oppose==T] <<- -1 # 2 oppose et soutien en même temps
s$gilets_jaunes[s$gilets_jaunes_soutien==T] <<- 1
s$gilets_jaunes[s$gilets_jaunes_dedans==T] <<- 2
label(s$gilets_jaunes) <<- "gilets_jaunes: -1: s'oppose / 0: comprend sans soutenir ni s'opposer / 1: soutient / 2: fait partie des gilets jaunes (gilets_jaunes_compris/oppose/soutien/dedans/NSP)"
s$gilets_jaunes <<- as.item(n(s$gilets_jaunes), labels = structure(c(-1:2), names=c('oppose', 'comprend', 'soutient', 'est_dedans')),
annotation=attr(s$gilets_jaunes, "label"))
# temp <- label(s$diplome)
# s$diplome <<- factor(s$diplome, c("","Aucun diplôme","Brevet des collèges","CAP ou BEP","Baccalauréat","Bac +2 (BTS, DUT, DEUG, écoles de formation sanitaires et sociales...)","Bac +3 (licence...)","Bac +5 ou plus (master, école d'ingénieur ou de commerce, doctorat, médecine, maîtrise, DEA, DESS...)","NSP (Ne se prononce pas)") )
# label(s$diplome) <<- temp
# temp <- label(s$interet_politique)
# s$interet_politique <<- factor(s$interet_politique, c("","Beaucoup","Un peu","Presque pas (ou pas du tout)","NSP","NSP (Je ne veux pas répondre)","Q20 - À quel point êtes-vous intéressé·e par la politique ?"))
# label(s$interet_politique) <<- temp
s$revenu_conjoint <<- s$rev_tot - s$revenu
s$revdisp <<- round((s$rev_tot -  irpp(s$rev_tot, s$nb_adultes, s$taille_menage)))
s$uc <<- uc(s$taille_menage, s$nb_14_et_plus)
s$niveau_vie <<- s$revdisp / s$uc
# s$age <<- as.factor(as.character(s$age))
# s$Region <<- as.factor(as.character(s$region))
# s$taille_agglo <<- as.factor(gsub("[[:alpha:] ]", "", s$taille_agglo))
# s <<- s[s$taille_agglo!="%1%",]
# pourquoi 91 missing regions? Sûrement un bug du Javascript côté utilisateur (certains types de device/navigateur?): 56% ont un bug sur compris_depenses contre 3% pour les autres
region_code <- function(code) {
reg <- "autre"
regions <- list(
"ARA" = c('01', '03', '07', '15', '26', '38', '42', '43', '63', '69', '73', '74'),
"Est" = c('21', '25', '39', '58', '70', '71', '89', '90', '08', '10', '51', '52', '54', '55', '57', '67', '68', '88'),
"Ouest" = c('22', '29', '35', '56', '14', '27', '50', '61', '76' ),
"Centre" = c('18', '28', '36', '37', '41', '45', '44', '49', '53', '72', '85'),
"Nord" = c('02', '59', '60', '62', '80'),
"IDF" = c('75', '77', '78', '91', '92', '93', '94', '95'),
"SO" = c('16', '17', '19', '23', '24', '33', '40', '47', '64', '79', '86', '87'),
"Occ" = c('09', '11', '12', '30', '31', '32', '34', '46', '48', '65', '66', '81', '82'),
"PACA" = c( '04', '05', '06', '13', '83', '84')
)
for (i in 1:9) if (as.numeric(code) %in% as.numeric(regions[[i]])) reg <- names(regions)[i]
return(reg)
} # TODO: pourquoi Centre excède de 20% le quota? Pourquoi y a-t-il aussi des excès dee quotas dans taille_agglo?
region_dep <- rep("", 95)
for (i in 1:95) region_dep[i] <- region_code(i)
s$region <<- "autre"
s$region[as.numeric(substr(s$code_postal, 1, 2)) %in% 1:95] <<- region_dep[as.numeric(substr(s$code_postal, 1, 2))]
# TODO: missing schiste_traite? dep_traites <- c(01, 02, 04, 06, 07, 08, 10, 11, 12, 13, 24, 25, 26, 30, 31, 32, 33, 34, 38, 39, 40, 45, 46, 48, 51, 54, 55, 57, 59, 60, 62, 64, 65, 67, 68, 69, 71, 73, 74, 77, 78, 82, 83, 84, 89, 90, 91, 93, 94, 95)
s$nb_vehicules <<- (s$nb_vehicules_texte=='Un') + 2*(s$nb_vehicules_texte=='Deux ou plus')
s$variante_partielle <<- 'NA'
s$variante_partielle[!is.na(s$gagnant_chauffage_categorie)] <<- 'c'
s$variante_partielle[!is.na(s$gagnant_fuel_categorie)] <<- 'f'
label(s$variante_partielle) <<- "variante_partielle: Variante aléatoire (c/f) de la taxe partielle sur le chauffage ou les carburants (=fuel)"
s$perte_relative_partielle[s$variante_partielle=='c'] <<- s$perte_relative_chauffage[s$variante_partielle=='c']
s$perte_relative_partielle[s$variante_partielle=='f'] <<- s$perte_relative_fuel[s$variante_partielle=='f']
label(s$perte_relative_partielle) <<- "perte_relative_partielle: Une hausse des taxes sur variante_partielle (chauffage ou fuel) ferait perdre plus à votre ménage que la moyenne (Oui, beaucoup/un peu plus/Autant que la moyenne/Non, un peu/beaucoup moins/NSP) - Q155, 162"
# s$gain_fuel <- NA
s$gain_fuel[s$gagnant_fuel_categorie=='Non affecté' & s$variante_partielle=='f'] <<- 0
s$gain_fuel[s$gagnant_fuel_categorie=='Gagnant' & s$variante_partielle=='f'] <<- 1 + as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$gain_taxe_fuel_hausse[s$gagnant_fuel_categorie=='Gagnant' & s$variante_partielle=='f']))))/25
s$gain_fuel[s$gagnant_fuel_categorie=='Perdant' & s$variante_partielle=='f'] <<- - 1 - as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$gain_taxe_fuel_baisse[s$gagnant_fuel_categorie=='Perdant' & s$variante_partielle=='f']))))/25
label(s$gain_fuel) <<- "gain_fuel: Catégorie de gain-perte de pouvoir d'achat par UC, suite à hausse taxe carburants compensée, dans [-6;5] (seuils: -160/-110/-70/-40/-15/0/10/20/30/40)"
s$gain_chauffage[s$gagnant_chauffage_categorie=='Non affecté' & s$variante_partielle=='c'] <<- 0
s$gain_chauffage[s$gagnant_chauffage_categorie=='Gagnant' & s$variante_partielle=='c'] <<- 1 + as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$gain_taxe_chauffage_hausse[s$gagnant_chauffage_categorie=='Gagnant' & s$variante_partielle=='c']))))/25
s$gain_chauffage[s$gagnant_chauffage_categorie=='Perdant' & s$variante_partielle=='c'] <<- - 1 - as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$gain_taxe_chauffage_baisse[s$gagnant_chauffage_categorie=='Perdant' & s$variante_partielle=='c']))))/25
label(s$gain_chauffage) <<- "gain_fuel: Catégorie de gain-perte de pouvoir d'achat par UC, suite à hausse taxe chauffage compensée, dans [-6;5] (seuils: -160/-110/-70/-40/-15/0/10/20/30/40)"
s$gagnant_partielle_categorie[s$variante_partielle=='c'] <<- s$gagnant_chauffage_categorie[s$variante_partielle=='c']
s$gagnant_partielle_categorie[s$variante_partielle=='f'] <<- s$gagnant_fuel_categorie[s$variante_partielle=='f']
label(s$gagnant_partielle_categorie) <<- "gagnant_partielle_categorie: Ménage Gagnant/Non affecté/Perdant par hausse taxe partielle (chauffage ou fuel) compensée, dans [-6;5] (seuils: -160/-110/-70/-40/-15/0/10/20/30/40) (gagnant_fuel_categorie/chauffage)"
s$gain_partielle[s$variante_partielle=='c'] <<- s$gain_chauffage[s$variante_partielle=='c']
s$gain_partielle[s$variante_partielle=='f'] <<- s$gain_fuel[s$variante_partielle=='f']
label(s$gain_partielle) <<- "gain_partielle: Catégorie de gain-perte de pouvoir d'achat par UC, suite à hausse taxe partielle (chauffage ou fuel) compensée, dans [-6;5] (seuils: -160/-110/-70/-40/-15/0/10/20/30/40) (gain_fuel/chauffage)"
s$gain[s$gagnant_categorie=='Non affecté' & s$variante_partielle!='NA'] <<- 0
s$gain[s$gagnant_categorie=='Gagnant' & s$variante_partielle!='NA'] <<- 1 + as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$gain_taxe_hausse[s$gagnant_categorie=='Gagnant' & s$variante_partielle!='NA']))))/50
s$gain[s$gagnant_categorie=='Perdant' & s$variante_partielle!='NA'] <<- - 1 - as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$gain_taxe_baisse[s$gagnant_categorie=='Perdant' & s$variante_partielle!='NA']))))/50
label(s$gain) <<- "gain: Catégorie de gain-perte de pouvoir d'achat par UC, suite à hausse taxe carbone compensée, dans [-6;5] (seuils: -280/-190/-120/-70/-30/0/20/40/60/80)"
s$gain_echelle <<- s$gain
s$gain_fuel_echelle <<- s$gain_fuel
s$gain_chauffage_echelle <<- s$gain_chauffage
s$gain_partielle_echelle <<- s$gain_fuel
s$gain_partielle_echelle[!is.na(s$gain_chauffage_echelle)] <<- s$gain_chauffage_echelle[!is.na(s$gain_chauffage_echelle)]
label(s$gain) <<- "gain: Catégorie de gain-perte de pouvoir d'achat par UC, suite à hausse taxe carbone compensée, dans [-6;5] (seuils: -280/-190/-120/-70/-30/0/20/40/60/80)"
label(s$gain_chauffage_echelle) <<- "gain_chauffage_echelle: Catégorie de gain-perte de pouvoir d'achat par UC, suite à hausse taxe chauffage compensée, dans [-6;5] (seuils: -160/-110/-70/-40/-15/0/10/20/30/40)"
label(s$gain_fuel_echelle) <<- "gain_fuel_echelle: Catégorie de gain-perte de pouvoir d'achat par UC, suite à hausse taxe carburants compensée, dans [-6;5] (seuils: -160/-110/-70/-40/-15/0/10/20/30/40)"
label(s$gain_partielle_echelle) <<- "gain_partielle_echelle: Catégorie de gain-perte de pouvoir d'achat par UC, suite à hausse taxe partielle (carburants ou chauffage) compensée, dans [-6;5] (seuils: -160/-110/-70/-40/-15/0/10/20/30/40)"
# cf. consistency_belief_losses.py pour les imputations
s$gain_min <<- -1000*(s$gain==-6) - 280*(s$gain==-5) - 190*(s$gain==-4) - 120*(s$gain==-3) - 70*(s$gain==-2) - 30*(s$gain==-1) + 0*(s$gain==1) + 20*(s$gain==2) + 40*(s$gain==3) + 60*(s$gain==4) + 80*(s$gain==5)
s$gain_max <<- -280*(s$gain==-6) - 190*(s$gain==-5) - 120*(s$gain==-4) - 70*(s$gain==-3) - 30*(s$gain==-2) - 0*(s$gain==-1) + 20*(s$gain==1) + 40*(s$gain==2) + 60*(s$gain==3) + 80*(s$gain==4) + 2000*(s$gain==5)
s$gain_fuel_min <<- -1000*(s$gain_fuel==-6) - 160*(s$gain_fuel==-5) - 110*(s$gain_fuel==-4) - 70*(s$gain_fuel==-3) - 40*(s$gain_fuel==-2) - 15*(s$gain_fuel==-1) + 0*(s$gain_fuel==1) + 10*(s$gain_fuel==2) + 20*(s$gain_fuel==3) + 30*(s$gain_fuel==4) + 40*(s$gain_fuel==5)
s$gain_fuel_max <<- -160*(s$gain_fuel==-6) - 110*(s$gain_fuel==-5) - 70*(s$gain_fuel==-4) - 40*(s$gain_fuel==-3) - 15*(s$gain_fuel==-2) - 0*(s$gain_fuel==-1) + 10*(s$gain_fuel==1) + 20*(s$gain_fuel==2) + 30*(s$gain_fuel==3) + 40*(s$gain_fuel==4) + 1000*(s$gain_fuel==5)
s$gain_chauffage_min <<- -1000*(s$gain_chauffage==-6) - 160*(s$gain_chauffage==-5) - 110*(s$gain_chauffage==-4) - 70*(s$gain_chauffage==-3) - 40*(s$gain_chauffage==-2) - 15*(s$gain_chauffage==-1) + 0*(s$gain_chauffage==1) + 10*(s$gain_chauffage==2) + 20*(s$gain_chauffage==3) + 30*(s$gain_chauffage==4) + 40*(s$gain_chauffage==5)
s$gain_chauffage_max <<- -160*(s$gain_chauffage==-6) - 110*(s$gain_chauffage==-5) - 70*(s$gain_chauffage==-4) - 40*(s$gain_chauffage==-3) - 15*(s$gain_chauffage==-2) - 0*(s$gain_chauffage==-1) + 10*(s$gain_chauffage==1) + 20*(s$gain_chauffage==2) + 30*(s$gain_chauffage==3) + 40*(s$gain_chauffage==4) + 1000*(s$gain_chauffage==5)
temp <- -405.55*(s$gain==-6) - 224.25*(s$gain==-5) - 147.91*(s$gain==-4) - 92.83*(s$gain==-3) - 48.28*(s$gain==-2) - 13.72*(s$gain==-1) + 10.39*(s$gain==1) + 30.36*(s$gain==2) + 49.96*(s$gain==3) + 69.72*(s$gain==4) + 106.89*(s$gain==5) #  - 1.66*(s$gain==0)
s$gain <<- as.item(temp, labels = structure(c(-405.55, -224.25, -147.91, -92.83, -48.28, -13.72, 0, 10.39, 30.36, 49.96, 69.72, 106.89), names = c("<-280", "-280_-190", "-190_-120", "-120_-70", "-70_-30", "-30_0", "0", "0_20", "20_40", "40_60", "60_80", ">80")), annotation=Label(s$gain))
temp <- NA
temp[!is.na(s$gain_fuel)] <- (-248.76*(s$gain_fuel==-6) - 131.21*(s$gain_fuel==-5) - 87.36*(s$gain_fuel==-4) - 53.27*(s$gain_fuel==-3) - 25.49*(s$gain_fuel==-2) - 7.51*(s$gain_fuel==-1) + 5.17*(s$gain_fuel==1) + 14.73*(s$gain_fuel==2) + 24.85*(s$gain_fuel==3) + 34.89*(s$gain_fuel==4) + 57.42*(s$gain_fuel==5))[!is.na(s$gain_fuel)] #  - 1.17*(s$gain_fuel==0)
s$gain_fuel <<- as.item(temp, labels = structure(c(-248.76, -131.21, -87.36, -53.27, -25.49, -7.51, 0, 5.17, 14.73, 24.85, 34.89, 57.42), names = c("<-160", "-160_-110", "-110_-70", "-70_-40", "-40_-15", "-15_0", "0", "0_10", "10_20", "20_30", "30_40", ">40")), annotation=Label(s$gain_fuel))
temp <- NA
temp[!is.na(s$gain_chauffage)] <- (-262.07*(s$gain_chauffage==-6) - 132.69*(s$gain_chauffage==-5) - 87.05*(s$gain_chauffage==-4) - 53.65*(s$gain_chauffage==-3) - 26.57*(s$gain_chauffage==-2) - 7.20*(s$gain_chauffage==-1) + 4.53*(s$gain_chauffage==1) + 15.44*(s$gain_chauffage==2) + 25.26*(s$gain_chauffage==3) + 35.66*(s$gain_chauffage==4) + 54.67*(s$gain_chauffage==5))[!is.na(s$gain_chauffage)] #  - 1.34*(s$gain_chauffage==0)
s$gain_chauffage <<- as.item(temp, labels = structure(c(-262.07, -132.69, -87.05, -53.65, -26.57, -7.20, 0, 4.53, 15.44, 25.26, 35.66, 54.67), names = c("<-160", "-160_-110", "-110_-70", "-70_-40", "-40_-15", "-15_0", "0", "0_10", "10_20", "20_30", "30_40", ">40")), annotation=Label(s$gain_chauffage))
s$Elasticite_chauffage <<- as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$elasticite_chauffage))))
s$Elasticite_chauffage <<- (s$Elasticite_chauffage==0)*1.5 + (s$Elasticite_chauffage==3)*6.5 + (s$Elasticite_chauffage>3)*(s$Elasticite_chauffage + 5) # Take the average of thresholds, take 40% for >30%
s$Elasticite_chauffage <<- - round(s$Elasticite_chauffage / 30, 2) # converts into elasticity
label(s$Elasticite_chauffage) <<- "Elasticite_chauffage: Élasticité-prix des dépenses de chauffage des Français, calculée en prenant la valeur moyenne des intervalles proposées (seuils à 0/3/10/20/30% pour une hausse de 30%)"
s$Elasticite_chauffage_perso <<- as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$elasticite_chauffage_perso))))
s$Elasticite_chauffage_perso <<- (s$Elasticite_chauffage_perso==0)*1.5 + (s$Elasticite_chauffage_perso==3)*6.5 + (s$Elasticite_chauffage_perso>3)*(s$Elasticite_chauffage_perso + 5) # Take the average of thresholds, take 40% for >30%
s$Elasticite_chauffage_perso <<- - round(s$Elasticite_chauffage_perso / 30, 2) # converts into elasticity
label(s$Elasticite_chauffage_perso) <<- "Elasticite_chauffage_perso: Élasticité-prix des dépenses de chauffage du ménage, calculée en prenant la valeur moyenne des intervalles proposées (seuils à 0/3/10/20/30% pour une hausse de 30%)"
s$Elasticite_fuel <<- as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$elasticite_fuel))))
s$Elasticite_fuel <<- (s$Elasticite_fuel==0)*1.5 + (s$Elasticite_fuel==3)*6.5 + (s$Elasticite_fuel>3)*(s$Elasticite_fuel + 5) # Take the average of thresholds, take 40% for >30%
s$Elasticite_fuel <<- - round(s$Elasticite_fuel / 30, 2) # converts into elasticity
label(s$Elasticite_fuel) <<- "Elasticite_fuel: Élasticité-prix des dépenses de carburants des Français, calculée en prenant la valeur moyenne des intervalles proposées (seuils à 0/3/10/20/30% pour une hausse de 0.5€/L)"
s$Elasticite_fuel_perso <<- as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$elasticite_fuel_perso))))
s$Elasticite_fuel_perso <<- (s$Elasticite_fuel_perso==0)*1.5 + (s$Elasticite_fuel_perso==3)*6.5 + (s$Elasticite_fuel_perso>3)*(s$Elasticite_fuel_perso + 5) # Take the average of thresholds, take 40% for >30%
s$Elasticite_fuel_perso <<- - round(s$Elasticite_fuel_perso / 30, 2) # converts into elasticity
label(s$Elasticite_fuel_perso) <<- "Elasticite_fuel_perso: Élasticité-prix des dépenses de carburants du ménage, calculée en prenant la valeur moyenne des intervalles proposées (seuils à 0/3/10/20/30% pour une hausse de 0.5€/L)"
s$elasticite_partielle <<- s$elasticite_chauffage
s$elasticite_partielle[!is.na(s$elasticite_fuel)] <<- s$elasticite_fuel[!is.na(s$elasticite_fuel)]
label(s$elasticite_partielle) <<- "elasticite_partielle: Réduction de la conso de fioul et gaz OU de carburants des Français suite à augmentation du prix de 30% (0% - Je n'en consomme déjà presque pas/0% - Je suis contraint sur tous mes déplacements/de 0% à 10%/de 10% à 20%/de 20% à 30%/+ de 30% - Je changerais largement mes habitudes de déplacement)"
s$Elasticite_partielle <<- s$Elasticite_chauffage
s$Elasticite_partielle[!is.na(s$Elasticite_fuel)] <<- s$Elasticite_fuel[!is.na(s$Elasticite_fuel)]
label(s$Elasticite_partielle) <<- "Elasticite_partielle: Élasticité-prix des dépenses de fioul et gaz OU de carburants des Français, calculée en prenant la valeur moyenne des intervalles proposées"
s$elasticite_partielle_perso <<- s$elasticite_chauffage_perso
s$elasticite_partielle_perso[!is.na(s$elasticite_fuel_perso)] <<- s$elasticite_fuel_perso[!is.na(s$elasticite_fuel_perso)]
label(s$elasticite_partielle_perso) <<- "elasticite_partielle_perso: Réduction de la conso de fioul et gaz OU de carburants du ménage suite à augmentation du prix de 30% (0% - Je n'en consomme déjà presque pas/0% - Je suis contraint sur tous mes déplacements/de 0% à 10%/de 10% à 20%/de 20% à 30%/+ de 30% - Je changerais largement mes habitudes de déplacement)"
s$Elasticite_partielle_perso <<- s$Elasticite_chauffage_perso
s$Elasticite_partielle_perso[!is.na(s$Elasticite_fuel_perso)] <<- s$Elasticite_fuel_perso[!is.na(s$Elasticite_fuel_perso)]
label(s$Elasticite_partielle_perso) <<- "Elasticite_partielle_perso: Élasticité-prix des dépenses de fioul et gaz OU de carburants du ménage, calculée en prenant la valeur moyenne des intervalles proposées"
s$variante_taxe_info <<- "p"
s$variante_taxe_info[s$gagnant_feedback_categorie!=""] <<- "f"
label(s$variante_taxe_info) <<- "variante_taxe_info: (f/p) Variante aléatoire entre f: feedback (=simulation, 2/3) et p: progressivité (1/3), dans l'information donnée sur la taxe compensée avant de demander à nouveau le gain et l'approbation, ainsi que les bénéfices et problèmes"
for (v in c('CC', 'sante', 'circulation', 'revenu', 'pauvres', 'independance', 'enjeu', 'aucun', 'autre_choix', 'autre')) {
s[[paste('benefices_', v, sep="")]] <<- s[paste('benefices_', v, '_p', sep="")][[1]]
s[[paste('benefices_', v, sep="")]][s$variante_taxe_info=='f'] <<- s[paste('benefices_', v, '_f', sep="")][[1]][s$variante_taxe_info=='f']
label(s[[paste('benefices_', v, sep="")]]) <<- sub("_f: \\* ", ": ", label(s[paste('benefices_', v, '_f', sep="")][[1]]))
}
for (v in c('inefficace', 'alternatives', 'ruraux', 'revenu', 'pauvres', 'economie', 'pretexte', 'aucun', 'autre_choix', 'autre')) {
s[[paste('problemes_', v, sep="")]] <<- s[paste('problemes_', v, '_p', sep="")][[1]]
s[[paste('problemes_', v, sep="")]][s$variante_taxe_info=='f'] <<- s[paste('problemes_', v, '_f', sep="")][[1]][s$variante_taxe_info=='f']
label(s[[paste('problemes_', v, sep="")]]) <<- sub("_f: \\* ", ": ", label(s[paste('problemes_', v, '_f', sep="")][[1]]))
}
s$gagnant_info_categorie <<- s$gagnant_feedback_categorie
s$gagnant_info_categorie[!is.na(s$gagnant_progressif_categorie)] <<- s$gagnant_progressif_categorie[!is.na(s$gagnant_progressif_categorie)]
label(s$gagnant_info_categorie) <<- "gagnant_info_categorie: après info simule_gagnant et/ou progressivité: Ménage Gagnant/Non affecté/Perdant par hausse taxe carbone redistribuée à tous (+110€/an /adulte, +13/15% gaz/fioul, +0.11/13 €/L diesel/essence)"
s$taxe_info_approbation <<- s$taxe_feedback_approbation
s$taxe_info_approbation[!is.na(s$taxe_progressif_approbation)] <<- s$taxe_progressif_approbation[!is.na(s$taxe_progressif_approbation)]
annotation(s$taxe_info_approbation) <<- "taxe_info_approbation: après info simule_gagnant et/ou progressivité - Approbation d'une hausse de la taxe carbone compensée (+110€/an /adulte, +13/15% gaz/fioul, +0.11/13 €/L diesel/essence)"
s$cible[s$cible20==1] <<- '20'
s$cible[s$cible30==1] <<- '30'
s$cible[s$cible40==1] <<- '40'
s$cible[s$cible50==1] <<- '50'
s$cible <<- relevel(as.factor(s$cible), '50')
label(s$cible) <<- "cible: Ciblage du recyclage de la hausse de la taxe carbone, attribué en fonction du revenu du répondant et de son ménage (20/30/40/50% les plus modestes)"
# TODO: manage to use tidyverse without erasing observations
# s <<- merge(s, s %>% gather(key = temp, value = gain_cible, c(gagnant__20_categorie, gagnant_20_30_categorie, gagnant_30_40_categorie, gagnant_40_50_categorie, gagnant_50_70_categorie, gagnant_70__categorie)) %>% filter(gain_cible != "") %>% select(-temp), sort=FALSE) # Warning: attributes are not identical across measure variables; they will be dropped
# label(s$gain_cible) <<- "gain_cible: Ménage Gagnant/Non affecté/Perdant avec hausse taxe carbone à recyclage ciblé (cible: 20/30/40/50% les plus modestes)"
# s <<- merge(s, s %>% gather(key = temp, value = taxe_cible_approbation, c(taxe__20_approbation, taxe_20_30_approbation, taxe_30_40_approbation, taxe_40_50_approbation, taxe_50_70_approbation, taxe_70__approbation)) %>% filter(taxe_cible_approbation != "") %>% select(-temp), sort=FALSE)
# label(s$taxe_cible_approbation) <<- "taxe_cible_approbation: Approbation d'une hausse de la taxe carbone compensée par recyclage ciblé (cible: 20/30/40/50% les plus modestes)"
#
#   # s <<- s %>% gather(key = temp, value = km, c(km_0, km_1, km_2)) %>% filter(km != "") %>% select(-temp) # erases km_0, km_1, km_2
# s <<- merge(s, s %>% gather(key = temp, value = km, c(km_0, km_1, km_2)) %>% filter(km != "") %>% select(-temp), sort=FALSE) # Warning: attributes are not identical across measure variables; they will be dropped
# label(s$km) <<- "km: Nombre de kilomètres parcourus lors des 12 derniers mois en voiture ou moto (par le répondant pour nb_vehicules=0, par les véhicules sinon)"
#
# s <<- merge(s, s %>% gather(key = temp, value = conso, c(conso_1, conso_2)) %>% filter(conso != "") %>% select(-temp), sort=FALSE)
# label(s$conso) <<- "conso:  Consommation moyenne du véhicule (en litres aux 100 km)"
s$gagnant_cible_categorie[!is.na(s$gagnant__20_categorie)] <<- s$gagnant__20_categorie[!is.na(s$gagnant__20_categorie)]
s$gagnant_cible_categorie[!is.na(s$gagnant_20_30_categorie)] <<- s$gagnant_20_30_categorie[!is.na(s$gagnant_20_30_categorie)]
s$gagnant_cible_categorie[!is.na(s$gagnant_30_40_categorie)] <<- s$gagnant_30_40_categorie[!is.na(s$gagnant_30_40_categorie)]
s$gagnant_cible_categorie[!is.na(s$gagnant_40_50_categorie)] <<- s$gagnant_40_50_categorie[!is.na(s$gagnant_40_50_categorie)]
s$gagnant_cible_categorie[!is.na(s$gagnant_50_70_categorie)] <<- s$gagnant_50_70_categorie[!is.na(s$gagnant_50_70_categorie)]
s$gagnant_cible_categorie[!is.na(s$gagnant_70__categorie)] <<- s$gagnant_70__categorie[!is.na(s$gagnant_70__categorie)]
label(s$gagnant_cible_categorie) <<- "gagnant_cible_categorie: Ménage Gagnant/Non affecté/Perdant avec hausse taxe carbone à recyclage ciblé (cible: 20/30/40/50% les plus modestes)"
s$taxe_cible_approbation[!is.na(s$taxe__20_approbation)] <<- s$taxe__20_approbation[!is.na(s$taxe__20_approbation)]
s$taxe_cible_approbation[!is.na(s$taxe_20_30_approbation)] <<- s$taxe_20_30_approbation[!is.na(s$taxe_20_30_approbation)]
s$taxe_cible_approbation[!is.na(s$taxe_30_40_approbation)] <<- s$taxe_30_40_approbation[!is.na(s$taxe_30_40_approbation)]
s$taxe_cible_approbation[!is.na(s$taxe_40_50_approbation)] <<- s$taxe_40_50_approbation[!is.na(s$taxe_40_50_approbation)]
s$taxe_cible_approbation[!is.na(s$taxe_50_70_approbation)] <<- s$taxe_50_70_approbation[!is.na(s$taxe_50_70_approbation)]
s$taxe_cible_approbation[!is.na(s$taxe_70__approbation)] <<- s$taxe_70__approbation[!is.na(s$taxe_70__approbation)]
label(s$taxe_cible_approbation) <<- "taxe_cible_approbation: Approbation d'une hausse de la taxe carbone compensée par recyclage ciblé (cible: 20/30/40/50% les plus modestes)"
s$categorie_cible[!is.na(s$taxe__20_approbation)] <<- '_20'
s$categorie_cible[!is.na(s$taxe_20_30_approbation)] <<- '20_30'
s$categorie_cible[!is.na(s$taxe_30_40_approbation)] <<- '30_40'
s$categorie_cible[!is.na(s$taxe_40_50_approbation)] <<- '40_50'
s$categorie_cible[!is.na(s$taxe_50_70_approbation)] <<- '50_70'
s$categorie_cible[!is.na(s$taxe_70__approbation)] <<- '70_'
label(s$categorie_cible) <<- "categorie_cible: Catégorie de revenu du répondant (et de son ménage) taxe à recyclage ciblé - Catégories: percentile <20/20-30/30-40/40-50/50-70/>70, sachant que revenu_conjoint détermine la catégorie quand percentile de revenu > 70 (780/1140/1430/1670/2220)"
s$traite_cible <<- (s$cible==20)*(s$revenu<780) + (s$cible==30)*(s$revenu<1140) + (s$cible==40)*(s$revenu<1430) + (s$cible==50)*(s$revenu<1670)
s$traite_cible_conjoint <<- (s$nb_adultes > 1)* ((s$cible==20)*(s$revenu_conjoint<780) + (s$cible==30)*(s$revenu_conjoint<1140) + (s$cible==40)*(s$revenu_conjoint<1430) + (s$cible==50)*(s$revenu_conjoint<1670))
label(s$traite_cible) <<- "traite_cible: Indicatrice de transfert reçu par le répondant lors de la hausse de la taxe carbone avec compensation ciblée. Montants: 550/360/270/220 €/an/adulte pour cible à 20/30/40/50"
label(s$traite_cible_conjoint) <<- "traite_cible_conjoint: Indicatrice de transfert reçu par le conjoint du répondant lors de la hausse de la taxe carbone avec compensation ciblée. Montants: 550/360/270/220 €/an/adulte pour cible à 20/30/40/50"
s$versement_cible <<- (s$traite_cible + s$traite_cible_conjoint) * ((s$cible==20)*550 + (s$cible==30)*360 + (s$cible==40)*270 + (s$cible==50)*220)
s$versement_cible_sans_conjoint <<- (s$traite_cible) * ((s$cible==20)*550 + (s$cible==30)*360 + (s$cible==40)*270 + (s$cible==50)*220)
label(s$versement_cible) <<- "versement_cible: Versement annuel reçu par le ménage du répondant lors de la hausse de la taxe carbone avec compensation ciblée. Montants: 550/360/270/220 €/an/parent pour cible à 20/30/40/50"
label(s$versement_cible_sans_conjoint) <<- "versement_cible_sans_conjoint: Versement annuel reçu par le répondant lors de la hausse de la taxe carbone avec compensation ciblée. Montants: 550/360/270/220 €/an/adulte pour cible à 20/30/40/50"
s$versement <<- 110 * s$nb_adultes
label(s$versement) <<- "versement: Versement annuel reçu par le ménage suite à une hausse de la taxe carbone compensée (110 * nb_adultes)"
s$km[!is.na(s$km_0)] <<- s$km_0[!is.na(s$km_0)]
s$km[!is.na(s$km_1)] <<- s$km_1[!is.na(s$km_1)]
s$km[!is.na(s$km_2)] <<- s$km_2[!is.na(s$km_2)]
label(s$km) <<- "km: Nombre de kilomètres parcourus lors des 12 derniers mois en voiture ou moto (par le répondant pour nb_vehicules=0, par les véhicules sinon)"
s$conso[!is.na(s$conso_1)] <<- s$conso_1[!is.na(s$conso_1)]
s$conso[!is.na(s$conso_2)] <<- s$conso_2[!is.na(s$conso_2)]
s$conso[is.na(s$conso)] <<- (6.39 + 7.31) / 2
label(s$conso) <<- "conso:  Consommation moyenne du véhicule (en litres aux 100 km)"
s$gaz <<- grepl('gaz', s$chauffage, ignore.case = T)
s$fioul <<- grepl('fioul', s$chauffage, ignore.case = T)
s$hausse_chauffage <<- -55.507189 + s$gaz * 124.578484 + s$fioul * 221.145441 + s$surface * 0.652174
s$hausse_diesel[s$nb_vehicules == 0] <<- (0.5*(6.39/100) * s$km * 1.4 * (1 - 0.4) * 0.090922)[s$nb_vehicules == 0] # share_diesel * conso * km * price * (1-elasticite) * price_increase
s$hausse_diesel[s$nb_vehicules == 1] <<- ((s$fuel_1=='Diesel') * (s$conso/100) * s$km * 1.4 * (1 - 0.4) * 0.090922)[s$nb_vehicules == 1]
s$hausse_diesel[s$nb_vehicules == 2] <<- (((s$fuel_2_1=='Diesel')*2/3 + (s$fuel_2_2=='Diesel')/3) * (s$conso/100) * s$km * 1.4 * (1 - 0.4) * 0.090922)[s$nb_vehicules == 2]
s$hausse_essence[s$nb_vehicules == 0] <<- (0.5*(7.31/100) * s$km * 1.45 * (1 - 0.4) * 0.076128)[s$nb_vehicules == 0] # share_diesel * conso * km * price * (1-elasticite) * price_increase
s$hausse_essence[s$nb_vehicules == 1] <<- ((s$fuel_1!='Diesel') * (s$conso/100) * s$km * 1.45 * (1 - 0.4) * 0.076128)[s$nb_vehicules == 1]
=======
>>>>>>> Bayes
s$hausse_essence[s$nb_vehicules == 2] <<- (((s$fuel_2_1!='Diesel')*2/3 + (s$fuel_2_2!='Diesel')/3) * (s$conso/100) * s$km * 1.45 * (1 - 0.4) * 0.076128)[s$nb_vehicules == 2]
s$hausse_carburants <<- s$hausse_diesel + s$hausse_essence
label(s$hausse_carburants) <<- "hausse_carburant: Hausse des dépenses de carburants simulées pour le ménage, suite à la taxe (élasticité de 0.4) (hausse_diesel + hausse_essence)"
s$hausse_depenses <<- s$hausse_carburants + s$hausse_chauffage
s$diesel <<- (!is.na(s$fuel_1) & (s$fuel_1=='Diesel')) | (!is.na(s$fuel_2_2) & ((s$fuel_2_1=='Diesel') | (s$fuel_2_2=='Diesel')))
s$essence <<- (!is.na(s$fuel_1) & (s$fuel_1=='Essence')) | (!is.na(s$fuel_2_2) & ((s$fuel_2_1=='Essence') | (s$fuel_2_2=='Essence')))
label(s$diesel) <<- "diesel: Indicatrice de la possession d'un véhicule diesel par le ménage (fuel_1 ou fuel_2_1 ou fuel_2_2 = 'Diesel')"
label(s$essence) <<- "essence: Indicatrice de la possession d'un véhicule à essence par le ménage (fuel_1 ou fuel_2_1 ou fuel_2_2 = 'Essence')"
s$simule_gain <<- 16.1 + s$nb_adultes * 110 - s$hausse_depenses
s$simule_gain_repondant <<- 16.1 + 110 - s$hausse_depenses
label(s$simule_gain) <<- "simule_gain: Gain net annuel simulé pour le ménage du répondant suite à une hausse de taxe carbone compensée: 16.1 + nb_adultes * 110 - hausse_depenses"
label(s$simule_gain_repondant) <<- "simule_gain_repondant: Gain net annuel simulé pour le répondant (sans tenir compte du potentiel versement reçu par les autres adultes du ménage) suite à une hausse de taxe carbone compensée: 116.1 - hausse_depenses"
s$simule_gain_cible <<- s$versement_cible - s$hausse_depenses
s$simule_gain_cible_sans_conjoint <<- s$versement_cible - s$hausse_depenses
label(s$simule_gain_cible) <<- "simule_gain_cible: Gain net simulé pour le ménage du répondant suite à une hausse de taxe carbone avec compensation ciblée: versement_cible - hausse_depenses"
label(s$simule_gain_cible_sans_conjoint) <<- "simule_gain_cible_sans_conjoint: Gain net simulé pour le répondant (sans tenir compte du potentiel versement reçu par son conjoint) suite à une hausse de taxe carbone avec compensation ciblée: versement_cible - hausse_depenses"
s$simule_gagnant[is.na(s$simule_gagnant)] <<- 1*(s$simule_gain[is.na(s$simule_gagnant)] > 0)
s$progressivite[!is.na(s$progressivite_feedback_sans_info)] <<- s$progressivite_feedback_sans_info[!is.na(s$progressivite_feedback_sans_info)]
s$progressivite[!is.na(s$progressivite_feedback_avec_info)] <<- s$progressivite_feedback_avec_info[!is.na(s$progressivite_feedback_avec_info)]
s$progressivite[!is.na(s$progressivite_progressif)] <<- s$progressivite_progressif[!is.na(s$progressivite_progressif)]
label(s$progressivite) <<- "progressivite: ~ Une hausse de la taxe carbone compensée avantagerait les plus modestes (réunion des trois variante_progressivite: prog/fb_info/fb_no_info où seule fb_no_info est sans information préalable sur la progressivité) - Q206-208"
s$variante_progressivite[!is.na(s$progressivite_feedback_sans_info)] <<- "fb_no_info"
s$variante_progressivite[!is.na(s$progressivite_feedback_avec_info)] <<- "fb_info"
s$variante_progressivite[s$variante_taxe_info=='p'] <<- "prog" # !is.na(s$progressivite_progressif) |
s$variante_progressivite[s$variante_taxe_info=='f' & s$apres_modifs==FALSE] <<- 'fb_no_info'
label(s$variante_progressivite) <<- "variante_progressivite: prog/fb_info/fb_no_info Variante aléatoire du bloc de questions où figure 'progressivite'. prog: info sur la progressivité / fb: feedback sur le statut gagnant/perdant simulé, info/no_info: avec/sans info sur la progressivité de la mesure" # , seulement pour apres_modifs=T
s$info_progressivite <<- FALSE
s$info_progressivite[s$variante_taxe_info=='p' | s$variante_progressivite=='fb_info'] <<- T
label(s$info_progressivite) <<- "info_progressivite: Indicatrice qu'a été montrée l'information que la hausse de la taxe carbone compensée avantagerait les plus modestes"
s$variante_monetaire[is.na(s$variante_monetaire)] <<- 0 # concerne seulement une observation. Évite des complications inutiles.
s$age_18_24 <<- 1*(s$age == '18 à 24 ans')
s$age_25_34 <<- 1*(s$age == '25 à 34 ans')
s$age_35_49 <<- 1*(s$age == '35 à 49 ans')
s$age_50_64 <<- 1*(s$age == '50 à 64 ans')
s$age_65_plus <<- 1*(s$age == '65 ans ou plus')
s$score_ges <<- 1 * (s$ges_CO2 == TRUE) + 1*(s$ges_CH4 == TRUE) + 1*(s$ges_O2 == FALSE) + 1*(s$ges_pm == FALSE)
label(s$score_ges) <<- "score_ges: Somme des bonnes réponses au questionnaire gaz à effet de serre (ges_O2/CH4/pm/CO2)"
s$score_climate_call <<- 1*(s$ges_avion == TRUE) + 1*(s$ges_boeuf == TRUE) + 1*(s$ges_nucleaire == FALSE)
label(s$score_climate_call) <<- "score_climate_call: Somme des bonnes réponses au questionnaire Climate Call (avion-train / boeuf-pates / nucleaire-eolien) ges_avion/boeuf/nucleaire"
s$duree_info[s$info_CC==1 & s$info_PM==1] <<- s$duree_info_CC_PM[s$info_CC==1 & s$info_PM==1]
s$duree_info[s$info_CC==0 & s$info_PM==1] <<- s$duree_info_PM[s$info_CC==0 & s$info_PM==1]
s$duree_info[s$info_CC==1 & s$info_PM==0] <<- s$duree_info_CC[s$info_CC==1 & s$info_PM==0]
s$duree_info[s$info_CC==0 & s$info_PM==0] <<- s$duree_no_info[s$info_CC==0 & s$info_PM==0]
label(s$duree_info) <<- "duree_info: Temps de soumission - Ancrage (information procurée ou non au début sur changement climatique ou particules fines) (duree_info_CC/PM/CC_PM/no_info)"
for (v in c("autonomie", "priorite", "etats", "global", "trop")) {
s[[paste("aide_non", v, sep="_")]] <<- NA
s[[paste("aide_non", v, sep="_")]][!is.na(s$transferts_inter_info) & s$transferts_inter_info==T & s$aide_2p==T] <<- s[[paste("aide_non", v, "i", sep="_")]][!is.na(s$transferts_inter_info) & s$transferts_inter_info==T & s$aide_2p==T]
s[[paste("aide_non", v, sep="_")]][!is.na(s$transferts_inter_info) & s$transferts_inter_info==FALSE & s$aide_2p==T] <<- s[[paste("aide_non", v, "ni", sep="_")]][!is.na(s$transferts_inter_info) & s$transferts_inter_info==FALSE & s$aide_2p==T]
label(s[[paste("aide_non", v, sep="_")]]) <<- Label(s[[paste("aide_non", v, "i", sep="_")]])
}
tbl
}
#Find no. of vars (all; row; col) for use in subsequent code
n.row.vars <- length(row.vars)
n.col.vars <- length(col.vars)
n.vars <- n.row.vars + n.col.vars
#Check to make sure all user-supplied arguments have valid values
stopifnot(as.integer(dec.places) == dec.places, dec.places > -1)
#type: see next section of code
stopifnot(is.character(style))
stopifnot(is.logical(percentages))
stopifnot(is.logical(addmargins))
stopifnot(is.logical(subtotals))
stopifnot(n.vars>=1)
#Convert supplied table type(s) into full text string (e.g. "f" becomes "frequency")
#If invalid type supplied, failed match gives user automatic error message
types <- NULL
choices <- c("frequency", "row.pct", "column.pct", "joint.pct", "total.pct")
for (tp in type) types <- c(types, match.arg(tp, choices))
type <- types
#If no type supplied, default to 'frequency + total' for univariate tables and to
#'frequency' for multi-dimenstional tables
#For univariate table....
if (n.vars == 1) {
if (is.null(type)) {
# default = freq count + total.pct
type <- c("frequency", "total.pct")
#row.vars <- 1
} else {
#and any requests for row / col / joint.pct must be changed into requests for 'total.pct'
type <- ifelse(type == "frequency", "frequency", "total.pct")
}
weighting_s <- function(data, printWeights = T) { # cf. google sheet
d <- data
d$region[is.na(d$region)] <- 'autre'
d$taille_agglo <- as.numeric(d$taille_agglo)
# d$csp <- factor(d$csp)
# d$region <- factor(d$region)
# levels(d$csp) <- c(levels(d$csp),"missing")
# levels(d$region) <- c(levels(d$region),"missing")
# levels(d$taille_agglo) <- c(levels(d$taille_agglo),"missing")
# levels(d$sexe) <- c(levels(d$sexe),"missing")
# d$csp[is.na(d$csp) | d$csp=="" | d$csp=="NSP"] <- "missing"
# d$taille_agglo[is.na(d$taille_agglo)] <- "missing"
# d$sexe[d$sexe=="" | d$sexe=="Autre"] <- "missing"
unweigthed <- svydesign(ids=~1, data=d)
sexe <- data.frame(sexe = c("Féminin", "Masculin"), Freq=nrow(d)*c(0.516,0.484)) # http://www.insee.fr/fr/themes/detail.asp?ref_id=bilan-demo&reg_id=0&page=donnees-detaillees/bilan-demo/pop_age2.htm
csp <- data.frame(csp = c("Inactif", "Ouvrier", "Cadre", "Indépendant", "Intermédiaire", "Retraité", "Employé", "Agriculteur"),
Freq=nrow(d)*c(0.1244,0.1214,0.0943,0.0341,0.1364,0.3279,0.1535,0.008))
region <- data.frame(region = c("autre","ARA", "Est", "Nord", "IDF", "Ouest", "SO", "Occ", "Centre", "PACA"),
Freq=nrow(d)*c(0.001,0.124,0.129,0.093,0.189,0.103,0.093,0.091,0.099,0.078))
age <- data.frame(age = c("18-24", "25-34", "35-49", "50-64", "65+"),
Freq=nrow(d)*c(0.117,0.147,0.242,0.242,0.252)) # Données/estim-pop-reg-sexe...
taille_agglo <- data.frame(taille_agglo = c(1:5), Freq=nrow(d)*c(0.2166,0.1710,0.1408,0.3083,0.1633))
# revenu <- data.frame(revenu = c(), Freq=nrow(d)*c())
diplome4 <- data.frame(diplome4 = c("Aucun diplôme ou brevet", "CAP ou BEP", "Baccalauréat", "Supérieur"),  # http://webcache.googleusercontent.com/search?q=cache:rUvf6u0uCnEJ:www.insee.fr/fr/themes/tableau.asp%3Freg_id%3D0%26ref_id%3Dnattef07232+&cd=1&hl=fr&ct=clnk&gl=fr&lr=lang_en%7Clang_es%7Clang_fr
Freq=nrow(d)*c(0.301, 0.246, 0.168, 0.285))
if (length(which(is.na(d$taille_agglo)))>0) raked <- rake(design= unweigthed, sample.margins = list(~sexe,~diplome4,~region,~csp,~age),
population.margins = list(sexe,diplome4,region,csp,age))
else raked <- rake(design= unweigthed, sample.margins = list(~sexe,~diplome4,~taille_agglo,~region,~csp,~age),
population.margins = list(sexe,diplome4,taille_agglo,region,csp,age))
if (printWeights) {    print(summary(weights(raked))  )
print(sum( weights(raked) )^2/(length(weights(raked))*sum(weights(raked)^2)) ) # <0.5 : problématique
print( length(which(weights(raked)<0.25 | weights(raked)>4))/ length(weights(raked)))
}
#Check for integrity of requested analysis and adjust values of function arguments as required
if ((addmargins==FALSE) & (subtotals==FALSE)) {
warning("WARNING: Request to suppress subtotals (subtotals=FALSE) ignored because no margins requested (addmargins=FALSE)")
subtotals <- TRUE
}
if ((n.vars>1) & (length(type)>1) & (addmargins==TRUE)) {
warning("WARNING: Only row totals added when more than one table type requested")
#Code lower down selecting type of margin implements this...
}
decrit(s$mauvaise_qualite)
decrit(s$revenu)
head(s$revenu)
s <- s[is.na(s$exclu),]
s <- s[as.numeric(as.vector(s$duree)) > 540,]
prepare_s()
prepare_s(exclude_screened=FALSE, exclude_speeder=FALSE, only_finished=T) # TODO: let only_finished = FALSE
sa <- s
# prepare_s(exclude_screened=FALSE, exclude_speeder=FALSE)
# se <- s
# prepare_s(exclude_screened=FALSE)
# sp <- s
prepare_s()
write.csv(s, "survey_prepared.csv")
s$gagnant_feedback_pas_faux <- (s$simule_gagnant==1 & s$gagnant_feedback_categorie!='Perdant') | (s$simule_gagnant==0 & s$gagnant_feedback_categorie!='Gagnant')
s$gagnant_feedback_correct <- (s$simule_gagnant==1 & s$gagnant_feedback_categorie=='Gagnant') | (s$simule_gagnant==0 & s$gagnant_feedback_categorie=='Perdant')
decrit(s$gagnant_feedback_pas_faux)
decrit(s$gagnant_feedback_correct)
nb_bin <- 8
nb_bins <- length(levels(binning(s$simule_gain, bins=nb_bin, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
s$bins_simule_gain <- binning(s$simule_gain, bins=nb_bin, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
sigma_i <- feedback_pas_faux_i <- feedback_correct_i <- c()
for (i in 1:nb_bins) {
sigma_i <- c(sigma_i, sqrt(wtd.var(s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i], s$weight[s$variante_taxe_info=='f' & s$bins_simule_gain==i])))
feedback_pas_faux_i <- c(feedback_pas_faux_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_pas_faux==T & s$bins_simule_gain==i])/sum(s$weight[s$variante_taxe_info=='f' & s$bins_simule_gain==i]))
feedback_correct_i <- c(feedback_correct_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_correct==T & s$bins_simule_gain==i])/sum(s$weight[s$variante_taxe_info=='f' & s$bins_simule_gain==i]))
s$phi_g_sigma_gamma_large[s$variante_taxe_info=='f' & s$bins_simule_gain==i] <- (5/6)*pnorm(-s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i]*sigma_i[i])/feedback_pas_faux_i[i]
s$phi_g_sigma_gamma[s$variante_taxe_info=='f' & s$bins_simule_gain==i] <- (5/6)*pnorm(-s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i]*sigma_i[i])/feedback_correct_i[i]
}
s$non_bayesien_large <- s$phi_g_sigma_gamma_large < 0 | s$phi_g_sigma_gamma_large > 1
s$non_bayesien <- s$phi_g_sigma_gamma < 0 | s$phi_g_sigma_gamma > 1
s$sigma_gamma_large <- - qnorm(s$phi_g_sigma_gamma_large)/s$gain
s$sigma_gamma <- - qnorm(s$phi_g_sigma_gamma)/s$gain
decrit(s$non_bayesien_large, weights = s$weight)
decrit(s$non_bayesien, weights = s$weight)
feedback_pas_faux_i
feedback_correct_i
decrit(s$phi_g_sigma_gamma_large[s$non_bayesien_large==FALSE], weights = s$weight[s$non_bayesien_large==FALSE])
decrit(s$sigma_gamma[s$non_bayesien==FALSE], weights = s$weight[s$non_bayesien==FALSE])
decrit(s$sigma_gamma_large[s$non_bayesien_large==FALSE], weights = s$weight[s$non_bayesien_large==FALSE])
decrit(s$sigma_gamma_large[s$non_bayesien_large==FALSE & s$gain!=0], weights = s$weight[s$non_bayesien_large==FALSE & s$gain!=0])
decrit(s$sigma_gamma[s$non_bayesien==FALSE & s$gain!=0], weights = s$weight[s$non_bayesien==FALSE & s$gain!=0])
weighted.median(s$sigma_gamma[s$non_bayesien==FALSE & s$gain!=0], weights = s$weight[s$non_bayesien==FALSE & s$gain!=0])
wtd.median(s$sigma_gamma[s$non_bayesien==FALSE & s$gain!=0], weights = s$weight[s$non_bayesien==FALSE & s$gain!=0])
median(s$sigma_gamma[s$non_bayesien==FALSE & s$gain!=0])
median(s$sigma_gamma[s$non_bayesien==FALSE & s$gain!=0], na.rm=T)
decrit(s$phi_g_sigma_gamma_large[s$non_bayesien_large==FALSE & s$gain!=0], weights = s$weight[s$non_bayesien_large==FALSE & s$gain!=0])
decrit(s$phi_g_sigma_gamma_large[s$non_bayesien_large==FALSE], weights = s$weight[s$non_bayesien_large==FALSE])
decrit(s$phi_g_sigma_gamma[s$non_bayesien==FALSE], weights = s$weight[s$non_bayesien==FALSE])
sigma_i
feedback_pas_faux_i
decrit(s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i])
pnorm(2000)
pnorm(200, log=T)
pnorm(200, log.p=T)
pnorm(100)
pnorm(10)
pnorm(6)
pnorm(3)
pnorm(4)
pnorm(5)
pnorm(10, lower.tail=F)
pnorm(10, lower.tail=FALSE)
sigma_i <- feedback_pas_faux_i <- feedback_correct_i <- c()
for (i in 1:nb_bins) {
sigma_i <- c(sigma_i, sqrt(wtd.var(s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i], s$weight[s$variante_taxe_info=='f' & s$bins_simule_gain==i])))
feedback_pas_faux_i <- c(feedback_pas_faux_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_pas_faux==T & s$bins_simule_gain==i])/sum(s$weight[s$variante_taxe_info=='f' & s$bins_simule_gain==i]))
feedback_correct_i <- c(feedback_correct_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_correct==T & s$bins_simule_gain==i])/sum(s$weight[s$variante_taxe_info=='f' & s$bins_simule_gain==i]))
s$phi_g_sigma_gamma_large[s$variante_taxe_info=='f' & s$bins_simule_gain==i] <- (5/6)*(1-pnorm(-s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i]*sigma_i[i], lower.tail=FALSE))/feedback_pas_faux_i[i]
s$phi_g_sigma_gamma[s$variante_taxe_info=='f' & s$bins_simule_gain==i] <- (5/6)*(1-pnorm(-s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i]*sigma_i[i], lower.tail=FALSE))/feedback_correct_i[i]
}
s$non_bayesien_large <- s$phi_g_sigma_gamma_large < 0 | s$phi_g_sigma_gamma_large > 1
s$non_bayesien <- s$phi_g_sigma_gamma < 0 | s$phi_g_sigma_gamma > 1
s$sigma_gamma_large <- - qnorm(s$phi_g_sigma_gamma_large)/s$gain
s$sigma_gamma <- - qnorm(s$phi_g_sigma_gamma)/s$gain
decrit(s$non_bayesien_large, weights = s$weight)
decrit(s$non_bayesien, weights = s$weight)
decrit(s$phi_g_sigma_gamma_large[s$non_bayesien_large==FALSE], weights = s$weight[s$non_bayesien_large==FALSE])
decrit(s$phi_g_sigma_gamma[s$non_bayesien==FALSE], weights = s$weight[s$non_bayesien==FALSE])
decrit(s$sigma_gamma_large[s$non_bayesien_large==FALSE & s$gain!=0], weights = s$weight[s$non_bayesien_large==FALSE & s$gain!=0])
decrit(s$sigma_gamma[s$non_bayesien==FALSE & s$gain!=0], weights = s$weight[s$non_bayesien==FALSE & s$gain!=0])
sigma_i <- feedback_pas_faux_i <- feedback_correct_i <- c()
for (i in 1:nb_bins) {
sigma_i <- c(sigma_i, sqrt(wtd.var(s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i], s$weight[s$variante_taxe_info=='f' & s$bins_simule_gain==i])))
feedback_pas_faux_i <- c(feedback_pas_faux_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_pas_faux==T & s$bins_simule_gain==i])/sum(s$weight[s$variante_taxe_info=='f' & s$bins_simule_gain==i]))
feedback_correct_i <- c(feedback_correct_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_correct==T & s$bins_simule_gain==i])/sum(s$weight[s$variante_taxe_info=='f' & s$bins_simule_gain==i]))
s$phi_g_sigma_gamma_large[s$variante_taxe_info=='f' & s$bins_simule_gain==i] <- (5/6)*(1-pnorm(-s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i]/sigma_i[i], lower.tail=FALSE))/feedback_pas_faux_i[i]
s$phi_g_sigma_gamma[s$variante_taxe_info=='f' & s$bins_simule_gain==i] <- (5/6)*(1-pnorm(-s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i]/sigma_i[i], lower.tail=FALSE))/feedback_correct_i[i]
}
s$non_bayesien_large <- s$phi_g_sigma_gamma_large < 0 | s$phi_g_sigma_gamma_large > 1
s$non_bayesien <- s$phi_g_sigma_gamma < 0 | s$phi_g_sigma_gamma > 1
s$sigma_gamma_large <- - s$gain/qnorm(s$phi_g_sigma_gamma_large)
s$sigma_gamma <- - s$gain/qnorm(s$phi_g_sigma_gamma)
decrit(s$non_bayesien_large, weights = s$weight)
decrit(s$non_bayesien, weights = s$weight)
decrit(s$phi_g_sigma_gamma_large[s$non_bayesien_large==FALSE], weights = s$weight[s$non_bayesien_large==FALSE])
decrit(s$phi_g_sigma_gamma[s$non_bayesien==FALSE], weights = s$weight[s$non_bayesien==FALSE])
decrit(s$sigma_gamma_large[s$non_bayesien_large==FALSE & s$gain!=0], weights = s$weight[s$non_bayesien_large==FALSE & s$gain!=0])
decrit(s$sigma_gamma[s$non_bayesien==FALSE & s$gain!=0], weights = s$weight[s$non_bayesien==FALSE & s$gain!=0])
decrit(s$non_bayesien_large | s$sigma_gamma_large < 0, weights = s$weight)
decrit(s$non_bayesien | s$sigma_gamma < 0, weights = s$weight)
sigma_i
nb_bin <- 10
nb_bins <- length(levels(binning(s$simule_gain, bins=nb_bin, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
s$bins_simule_gain <- binning(s$simule_gain, bins=nb_bin, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
sigma_i <- feedback_pas_faux_i <- feedback_correct_i <- c()
for (i in 1:nb_bins) {
sigma_i <- c(sigma_i, sqrt(wtd.var(s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i], s$weight[s$variante_taxe_info=='f' & s$bins_simule_gain==i])))
feedback_pas_faux_i <- c(feedback_pas_faux_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_pas_faux==T & s$bins_simule_gain==i])/sum(s$weight[s$variante_taxe_info=='f' & s$bins_simule_gain==i]))
feedback_correct_i <- c(feedback_correct_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_correct==T & s$bins_simule_gain==i])/sum(s$weight[s$variante_taxe_info=='f' & s$bins_simule_gain==i]))
s$phi_g_sigma_gamma_large[s$variante_taxe_info=='f' & s$bins_simule_gain==i] <- (5/6)*(1-pnorm(-s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i]/sigma_i[i], lower.tail=FALSE))/feedback_pas_faux_i[i]
s$phi_g_sigma_gamma[s$variante_taxe_info=='f' & s$bins_simule_gain==i] <- (5/6)*(1-pnorm(-s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i]/sigma_i[i], lower.tail=FALSE))/feedback_correct_i[i]
}
s$non_bayesien_large <- s$phi_g_sigma_gamma_large < 0 | s$phi_g_sigma_gamma_large > 1
s$non_bayesien <- s$phi_g_sigma_gamma < 0 | s$phi_g_sigma_gamma > 1
s$sigma_gamma_large <- - s$gain/qnorm(s$phi_g_sigma_gamma_large)
s$sigma_gamma <- - s$gain/qnorm(s$phi_g_sigma_gamma)
decrit(s$non_bayesien_large, weights = s$weight)
decrit(s$non_bayesien, weights = s$weight)
sigma_i
decrit(sigma_i)
sigma_i <- feedback_pas_faux_i <- feedback_correct_i <- c()
for (i in 1:nb_bins) {
sigma_i <- c(sigma_i, sqrt(wtd.var(s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i], s$weight[s$variante_taxe_info=='f' & s$bins_simule_gain==i])))
feedback_pas_faux_i <- c(feedback_pas_faux_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_pas_faux==T & s$bins_simule_gain==i])/sum(s$weight[s$variante_taxe_info=='f' & s$bins_simule_gain==i]))
feedback_correct_i <- c(feedback_correct_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_correct==T & s$bins_simule_gain==i])/sum(s$weight[s$variante_taxe_info=='f' & s$bins_simule_gain==i]))
s$phi_g_sigma_gamma_large[s$variante_taxe_info=='f' & s$bins_simule_gain==i] <- (5/6)*(1-pnorm(-s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i]/sigma_i[i], lower.tail=FALSE))/feedback_pas_faux_i[i]
s$phi_g_sigma_gamma[s$variante_taxe_info=='f' & s$bins_simule_gain==i] <- (5/6)*(1-pnorm(-s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i]/sigma_i[i], lower.tail=FALSE))/feedback_correct_i[i]
print(mean(s$simule_gain[s$bins_simule_gain==i]))
}
decrit(s$simule_gain[s$variante_taxe_info=='f' & s$bins_simule_gain==3])
nb_bin <- 11
nb_bins <- length(levels(binning(s$simule_gain, bins=nb_bin, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
s$bins_simule_gain <- binning(s$simule_gain, bins=nb_bin, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
sigma_i <- feedback_pas_faux_i <- feedback_correct_i <- c()
for (i in 1:nb_bins) {
sigma_i <- c(sigma_i, sqrt(wtd.var(s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i], s$weight[s$variante_taxe_info=='f' & s$bins_simule_gain==i])))
feedback_pas_faux_i <- c(feedback_pas_faux_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_pas_faux==T & s$bins_simule_gain==i])/sum(s$weight[s$variante_taxe_info=='f' & s$bins_simule_gain==i]))
feedback_correct_i <- c(feedback_correct_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_correct==T & s$bins_simule_gain==i])/sum(s$weight[s$variante_taxe_info=='f' & s$bins_simule_gain==i]))
s$phi_g_sigma_gamma_large[s$variante_taxe_info=='f' & s$bins_simule_gain==i] <- (5/6)*(1-pnorm(-s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i]/sigma_i[i], lower.tail=FALSE))/feedback_pas_faux_i[i]
s$phi_g_sigma_gamma[s$variante_taxe_info=='f' & s$bins_simule_gain==i] <- (5/6)*(1-pnorm(-s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i]/sigma_i[i], lower.tail=FALSE))/feedback_correct_i[i]
print(mean(s$simule_gain[s$bins_simule_gain==i]))
}
decrit(s$simule_gain[s$variante_taxe_info=='f' & s$bins_simule_gain==3])
length(which(s$simule_gain==0))
nb_bin <- 11
nb_bins <- length(levels(binning(s$simule_gain, bins=nb_bin, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
s$bins_simule_gain <- binning(s$simule_gain, bins=nb_bin, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
sigma_i <- feedback_pas_faux_i <- feedback_correct_i <- c()
for (i in 1:nb_bins) { # TODO: make bins of same size (?)
if (i==3) { # bin that contains both positive and negative simule_gain
s$bins_simule_gain[s$simule_gain<0 & s$bins_simule_gain==i] <- 2
s$bins_simule_gain[s$simule_gain>0 & s$bins_simule_gain==i] <- 4
} else {
sigma_i <- c(sigma_i, sqrt(wtd.var(s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i], s$weight[s$variante_taxe_info=='f' & s$bins_simule_gain==i])))
feedback_pas_faux_i <- c(feedback_pas_faux_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_pas_faux==T & s$bins_simule_gain==i])/sum(s$weight[s$variante_taxe_info=='f' & s$bins_simule_gain==i]))
feedback_correct_i <- c(feedback_correct_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_correct==T & s$bins_simule_gain==i])/sum(s$weight[s$variante_taxe_info=='f' & s$bins_simule_gain==i]))
if (i<3) {
s$phi_g_sigma_gamma_large[s$variante_taxe_info=='f' & s$bins_simule_gain==i] <- 1-(5/6)*(1-pnorm(-s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i]/sigma_i[i], lower.tail=T))/feedback_pas_faux_i[i]
s$phi_g_sigma_gamma[s$variante_taxe_info=='f' & s$bins_simule_gain==i] <- 1-(5/6)*(1-pnorm(-s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i]/sigma_i[i], lower.tail=T))/feedback_correct_i[i]
} else {
s$phi_g_sigma_gamma_large[s$variante_taxe_info=='f' & s$bins_simule_gain==i] <- (5/6)*(pnorm(-s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i]/sigma_i[i], lower.tail=T))/feedback_pas_faux_i[i]
s$phi_g_sigma_gamma[s$variante_taxe_info=='f' & s$bins_simule_gain==i] <- (5/6)*(pnorm(-s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i]/sigma_i[i], lower.tail=T))/feedback_correct_i[i]
}
}
# print(mean(s$simule_gain[s$bins_simule_gain==i]))
}
s$non_bayesien_large <- s$phi_g_sigma_gamma_large < 0 | s$phi_g_sigma_gamma_large > 1
s$non_bayesien <- s$phi_g_sigma_gamma < 0 | s$phi_g_sigma_gamma > 1
s$sigma_gamma_large <- - s$gain/qnorm(s$phi_g_sigma_gamma_large)
s$sigma_gamma <- - s$gain/qnorm(s$phi_g_sigma_gamma)
decrit(s$non_bayesien_large, weights = s$weight)
decrit(s$non_bayesien, weights = s$weight)
decrit(s$phi_g_sigma_gamma_large[s$non_bayesien_large==FALSE], weights = s$weight[s$non_bayesien_large==FALSE])
decrit(s$phi_g_sigma_gamma[s$non_bayesien==FALSE], weights = s$weight[s$non_bayesien==FALSE])
decrit(s$sigma_gamma_large[s$non_bayesien_large==FALSE & s$gain!=0], weights = s$weight[s$non_bayesien_large==FALSE & s$gain!=0])
decrit(s$sigma_gamma[s$non_bayesien==FALSE & s$gain!=0], weights = s$weight[s$non_bayesien==FALSE & s$gain!=0])
decrit(s$bins_simule_gain)
283+430
713/3002
nb_bin <- 9
nb_bins <- length(levels(binning(s$simule_gain, bins=nb_bin, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
s$bins_simule_gain <- binning(s$simule_gain, bins=nb_bin, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
sigma_i <- feedback_pas_faux_i <- feedback_correct_i <- c()
for (i in 1:nb_bins) { # TODO: make bins of same size (?)
if (i==3) { # bin that contains both positive and negative simule_gain
s$bins_simule_gain[s$simule_gain<0 & s$bins_simule_gain==i] <- 2
s$bins_simule_gain[s$simule_gain>0 & s$bins_simule_gain==i] <- 4
} else {
sigma_i <- c(sigma_i, sqrt(wtd.var(s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i], s$weight[s$variante_taxe_info=='f' & s$bins_simule_gain==i])))
feedback_pas_faux_i <- c(feedback_pas_faux_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_pas_faux==T & s$bins_simule_gain==i])/sum(s$weight[s$variante_taxe_info=='f' & s$bins_simule_gain==i]))
feedback_correct_i <- c(feedback_correct_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_correct==T & s$bins_simule_gain==i])/sum(s$weight[s$variante_taxe_info=='f' & s$bins_simule_gain==i]))
if (i<3) {
s$phi_g_sigma_gamma_large[s$variante_taxe_info=='f' & s$bins_simule_gain==i] <- 1-(5/6)*(1-pnorm(-s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i]/sigma_i[i], lower.tail=T))/feedback_pas_faux_i[i]
s$phi_g_sigma_gamma[s$variante_taxe_info=='f' & s$bins_simule_gain==i] <- 1-(5/6)*(1-pnorm(-s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i]/sigma_i[i], lower.tail=T))/feedback_correct_i[i]
} else {
s$phi_g_sigma_gamma_large[s$variante_taxe_info=='f' & s$bins_simule_gain==i] <- (5/6)*(pnorm(-s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i]/sigma_i[i], lower.tail=T))/feedback_pas_faux_i[i]
s$phi_g_sigma_gamma[s$variante_taxe_info=='f' & s$bins_simule_gain==i] <- (5/6)*(pnorm(-s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i]/sigma_i[i], lower.tail=T))/feedback_correct_i[i]
}
}
print(mean(s$simule_gain[s$bins_simule_gain==i]))
}
s$non_bayesien_large <- s$phi_g_sigma_gamma_large < 0 | s$phi_g_sigma_gamma_large > 1
s$non_bayesien <- s$phi_g_sigma_gamma < 0 | s$phi_g_sigma_gamma > 1
s$sigma_gamma_large <- - s$gain/qnorm(s$phi_g_sigma_gamma_large)
s$sigma_gamma <- - s$gain/qnorm(s$phi_g_sigma_gamma)
decrit(s$bins_simule_gain)
nb_bin <- 8
nb_bins <- length(levels(binning(s$simule_gain, bins=nb_bin, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
s$bins_simule_gain <- binning(s$simule_gain, bins=nb_bin, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
sigma_i <- feedback_pas_faux_i <- feedback_correct_i <- c()
for (i in 1:nb_bins) { # TODO: make bins of same size (?)
if (i==3) { # bin that contains both positive and negative simule_gain
s$bins_simule_gain[s$simule_gain<0 & s$bins_simule_gain==i] <- 2
# s$bins_simule_gain[s$simule_gain>0 & s$bins_simule_gain==i] <- 4
} else {
sigma_i <- c(sigma_i, sqrt(wtd.var(s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i], s$weight[s$variante_taxe_info=='f' & s$bins_simule_gain==i])))
feedback_pas_faux_i <- c(feedback_pas_faux_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_pas_faux==T & s$bins_simule_gain==i])/sum(s$weight[s$variante_taxe_info=='f' & s$bins_simule_gain==i]))
feedback_correct_i <- c(feedback_correct_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_correct==T & s$bins_simule_gain==i])/sum(s$weight[s$variante_taxe_info=='f' & s$bins_simule_gain==i]))
if (i<3) {
s$phi_g_sigma_gamma_large[s$variante_taxe_info=='f' & s$bins_simule_gain==i] <- 1-(5/6)*(1-pnorm(-s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i]/sigma_i[i], lower.tail=T))/feedback_pas_faux_i[i]
s$phi_g_sigma_gamma[s$variante_taxe_info=='f' & s$bins_simule_gain==i] <- 1-(5/6)*(1-pnorm(-s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i]/sigma_i[i], lower.tail=T))/feedback_correct_i[i]
} else {
s$phi_g_sigma_gamma_large[s$variante_taxe_info=='f' & s$bins_simule_gain==i] <- (5/6)*(pnorm(-s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i]/sigma_i[i], lower.tail=T))/feedback_pas_faux_i[i]
s$phi_g_sigma_gamma[s$variante_taxe_info=='f' & s$bins_simule_gain==i] <- (5/6)*(pnorm(-s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i]/sigma_i[i], lower.tail=T))/feedback_correct_i[i]
}
}
print(mean(s$simule_gain[s$bins_simule_gain==i]))
}
s$non_bayesien_large <- s$phi_g_sigma_gamma_large < 0 | s$phi_g_sigma_gamma_large > 1
s$non_bayesien <- s$phi_g_sigma_gamma < 0 | s$phi_g_sigma_gamma > 1
s$sigma_gamma_large <- - s$gain/qnorm(s$phi_g_sigma_gamma_large)
s$sigma_gamma <- - s$gain/qnorm(s$phi_g_sigma_gamma)
decrit(s$bins_simule_gain)
decrit(sigma_i)
sort(sigma_i)
sigma_i
decrit(s$non_bayesien_large | s$sigma_gamma_large < 0, weights = s$weight)
decrit(s$non_bayesien | s$sigma_gamma < 0, weights = s$weight)
pnorm(2)
pnorm(2, lower.tail=T)
nb_bin <- 8
nb_bins <- length(levels(binning(s$simule_gain, bins=nb_bin, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
s$bins_simule_gain <- binning(s$simule_gain, bins=nb_bin, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
sigma_i <- feedback_pas_faux_i <- feedback_correct_i <- c()
for (i in 1:nb_bins) { # TODO: make bins of same size (?)
if (i==3) { # bin that contains both positive and negative simule_gain
# s$bins_simule_gain[s$simule_gain<0 & s$bins_simule_gain==i] <- 2
# s$bins_simule_gain[s$simule_gain>0 & s$bins_simule_gain==i] <- 4
} else {
sigma_i <- c(sigma_i, sqrt(wtd.var(s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i], s$weight[s$variante_taxe_info=='f' & s$bins_simule_gain==i])))
feedback_pas_faux_i <- c(feedback_pas_faux_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_pas_faux==T & s$bins_simule_gain==i])/sum(s$weight[s$variante_taxe_info=='f' & s$bins_simule_gain==i]))
feedback_correct_i <- c(feedback_correct_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_correct==T & s$bins_simule_gain==i])/sum(s$weight[s$variante_taxe_info=='f' & s$bins_simule_gain==i]))
# if (i<3) {
#   s$phi_g_sigma_gamma_large[s$variante_taxe_info=='f' & s$bins_simule_gain==i] <- 1-(5/6)*(1-pnorm(-s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i]/sigma_i[i], lower.tail=T))/feedback_pas_faux_i[i]
#   s$phi_g_sigma_gamma[s$variante_taxe_info=='f' & s$bins_simule_gain==i] <- 1-(5/6)*(1-pnorm(-s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i]/sigma_i[i], lower.tail=T))/feedback_correct_i[i]
# } else {
s$phi_g_sigma_gamma_large[s$variante_taxe_info=='f' & s$bins_simule_gain==i] <- (5/6)*(pnorm(-s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i]/sigma_i[i], lower.tail=T))/feedback_pas_faux_i[i]
s$phi_g_sigma_gamma[s$variante_taxe_info=='f' & s$bins_simule_gain==i] <- (5/6)*(pnorm(-s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i]/sigma_i[i], lower.tail=T))/feedback_correct_i[i]
# }
}
<<<<<<< refs/remotes/thomasdouenne/master
round(Crosstab(s[s$simule_gagnant==0,], row.vars="gagnant_categorie", col.vars="gagnant_feedback_categorie", type="r", dec.places = 0)$Crosstab)
round(Crosstab(s[s$simule_gagnant==1,], row.vars="gagnant_categorie", col.vars="gagnant_feedback_categorie", type="r", dec.places = 0)$Crosstab)
crosstab(s$gagnant_feedback_categorie, s$gagnant_categorie, weight = s$weight)
crosstab(s$gagnant_feedback_categorie, s$gagnant_categorie)
CrossTable(s$gagnant_feedback_categorie, s$gagnant_categorie)
CrossTable(s$gagnant_categorie, s$gagnant_feedback_categorie)
CrossTable(s$gagnant_categorie, s$gagnant_feedback_categorie, digits=0, prop.col=FALSE, prop.T=FALSE, prop.chisq = FALSE)
CrossTable(s$gagnant_categorie, s$gagnant_feedback_categorie, digits=2, prop.col=FALSE, prop.T=FALSE, prop.chisq = FALSE)
CrossTable(s$gagnant_categorie, s$gagnant_feedback_categorie, prop.col=FALSE, prop.T=FALSE, prop.chisq = FALSE)
CrossTable(s$gagnant_categorie, s$gagnant_feedback_categorie, digits=2, prop.c=FALSE, prop.t=FALSE, prop.chisq = FALSE)
CrossTable(s$gagnant_categorie, s$gagnant_feedback_categorie, cell.layout=FALSE, digits=2, prop.c=FALSE, prop.t=FALSE, prop.chisq = FALSE)
crosstab(s$gagnant_feedback_categorie, s$gagnant_categorie, s$weight)
crosstab(s$gagnant_feedback_categorie[s$variante_taxe_info=='f' & s$simule_gagnant==1], s$gagnant_categorie[s$variante_taxe_info=='f' & s$simule_gagnant==1], s$weight[s$variante_taxe_info=='f' & s$simule_gagnant==1])
decrit(s$gagnant_feedback_categorie[s$variante_taxe_info=='f' & s$simule_gagnant==1])
decrit(s$weight[s$variante_taxe_info=='f' & s$simule_gagnant==1])
decrit(s$gagnant_categorie[s$variante_taxe_info=='f' & s$simule_gagnant==1])
educ <- sample(c(1, 2), 200, replace = TRUE, prob = c(0.3, 0.7))
educ <- factor(educ, levels = c(1, 2), labels = c("Low", "High"))
opinion <- sample(c(1, 2, 9), 200, replace = TRUE,
prob = c(0.4, 0.55, 0.05))
opinion <- factor(opinion, levels = c(1, 2, 9),
labels = c("Disagree", "Agree", "Don't know"))
attr(educ, "label") <- "Education level"
attr(opinion, "label") <- "Opinion"
weight <- sample(c(10, 15, 19), 200, replace = TRUE)
crosstab(opinion, educ, xlab = "Education", ylab = "Opinion")
ct <- crosstab(opinion, educ, weight,
dnn = c("Opinion", "Education"),
user.missing.dep = "Don't know",
expected = TRUE, prop.c = TRUE, prop.r = TRUE,
plot = FALSE)
ct
package("descr")
rm(crosstab)
package("descr")
crosstab(s$gagnant_feedback_categorie, s$gagnant_categorie, s$weight)
crosstab(s$gagnant_feedback_categorie, s$gagnant_categorie, s$weight, dnn=c('gagnant_feedback_categorie', 'gagnant_categorie'))
crosstab(s$gagnant_feedback_categorie, s$gagnant_categorie, s$weight, dnn=c('gagnant_feedback_categorie', 'gagnant_categorie'), prop.r=T)
crosstab(s$gagnant_feedback_categorie[s$simule_gagnant==1], s$gagnant_categorie[s$simule_gagnant==1], s$weight[s$simule_gagnant==1], dnn=c('gagnant_feedback_categorie', 'gagnant_categorie'), prop.r=T)
crosstab(s$gagnant_feedback_categorie[s$simule_gagnant==1], s$gagnant_categorie[s$simule_gagnant==1], s$weight[s$simule_gagnant==1], dnn=c('gagnant_feedback_categorie', 'gagnant_categorie'), prop.c=T)
crosstab(s$gagnant_feedback_categorie[s$simule_gagnant==0], s$gagnant_categorie[s$simule_gagnant==0], s$weight[s$simule_gagnant==0], dnn=c('gagnant_feedback_categorie', 'gagnant_categorie'), prop.c=T)
ct_simule_gagnant <- crosstab(s$gagnant_feedback_categorie[s$simule_gagnant==1], s$gagnant_categorie[s$simule_gagnant==1], s$weight[s$simule_gagnant==1], dnn=c('gagnant_feedback_categorie', 'gagnant_categorie'), prop.c=T)
plot(ct_simule_gagnant, inv.y=T)
plot(ct_simule_gagnant, inv.x=T)
plot(ct_simule_gagnant, inv.axis=T)
plot(ct_simule_gagnant)
crosstab(s$gagnant_feedback_categorie[s$simule_gagnant==1], s$gagnant_categorie[s$simule_gagnant==1], s$weight[s$simule_gagnant==1], dnn=c('gagnant_feedback_categorie', 'gagnant_categorie'), prop.c=T, format="SAS")
crosstab(s$gagnant_feedback_categorie[s$simule_gagnant==1], s$gagnant_categorie[s$simule_gagnant==1], s$weight[s$simule_gagnant==1], dnn=c('gagnant_feedback_categorie', 'gagnant_categorie'), prop.c=T)
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1], s$weight[s$simule_gagnant==1], dnn=c('gagnant_feedback_categorie', 'gagnant_categorie'), prop.c=T)
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1], s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'), prop.c=T)
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1], s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'), prop.r=T)
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1], s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'), prop.r=T)
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1], s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'), prop.r=T)
crosstab(s$gagnant_feedback_categorie[s$simule_gagnant==0], s$gagnant_categorie[s$simule_gagnant==0], s$weight[s$simule_gagnant==0], dnn=c('gagnant_feedback_categorie', 'gagnant_categorie'), prop.c=T)
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1], s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'), prop.r=T)
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1], s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'), prop.r=T, dir=c("h", "v"))
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1], s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'), prop.r=T, dir=c("h", "v"), inv.x=T, inv.y=T)
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1], s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'), prop.r=T, dir=c("h", "v"), inv.x=T, inv.y=T, inv.col=T)
# weighted:
decrit(s$simule_gagnant, weights = s$weight)
decrit(s$gagnant_categorie[s$simule_gagnant==1], weights = s$weight[s$simule_gagnant==1])
decrit(s$gagnant_feedback_categorie[s$simule_gagnant==1], weights = s$weight[s$simule_gagnant==1])
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1], s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'), prop.r=T, dir=c("h", "v")) # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
View(data1)
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1], s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'), prop.r=T, prop.c=T, dir=c("h", "v")) # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, dir=c("h", "v"), sort=2:1) # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T) # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, dir=c("h", "v"), sort=2:1) # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, sort=2:1) # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, sort=2:1, sub='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, sort=2:1, main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, sort=2:1, main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, sort=2:1, xlab='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, sort=2:1, ylab='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1],# dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, sort=2:1, main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, sort=2:1, title='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, sort=2:1, main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1, main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
ct_simule_gagnant <- crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1, main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
plot(ct_simule_gagnant, main='Winning category, After')
plot(ct_simule_gagnant, sub='Winning category, After')
axes(3)
axis(3)
ct_simule_gagnant <- crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1, main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
plot(ct_simule_gagnant, sub='Winning category, After')
ct_simule_gagnant <- crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1, dir=c("h", "v"), main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
ct_simule_gagnant <- crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, sort=2:1, dir=c("v", "h"), main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
ct_simule_gagnant <- crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, sort=2:1, main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
ct_simule_gagnant <- crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1, main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
ct_simule_gagnant <- crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1, main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1, main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
ct_simule_gagnant <- crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1, main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
plot(ct_simule_gagnant, sub='Winning category, After')
ct_simule_gagnant <- crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, main='Winning category, After') # sort=2:1, , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
plot(ct_simule_gagnant, sub='Winning category, After')
plot(ct_simule_gagnant, sub='Winning category, After', dir=c("h", "v"))
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1, main='Winning category, After') # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
plot(ct_simule_gagnant, sub='Winning category, After', dir=c("h", "v"))
plot(ct_simule_gagnant, sub='Winning category, After', sort=2:1, dir=c("h", "v"))
plot(ct_simule_gagnant, sub='Winning category, After', sort=2:1)
ct_simule_gagnant <- crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1, main='Winning category, After') # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
plot(ct_simule_gagnant, sub='Winning category, After', sort=2:1)
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1, main='Winning category, After') # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
plot(ct_simule_gagnant, main='Winning category, After', sort=2:1)
axis(3, xlab='ct_simule_gagnant <- ')
plot(ct_simule_gagnant, sort=2:1)
axis(3, xlab='ct_simule_gagnant <- ')
axis(3, main='ct_simule_gagnant <- ')
axis(3, title='ct_simule_gagnant <- ')
plot(ct_simule_gagnant, sort=2:1)
mtext(3, "Explanatory Variable", line = 2)
mtext(side=3, "Explanatory Variable", line = 2)
axis(3, lwd=0)
plot(ct_simule_gagnant, sort=2:1)
axis(3, lwd=0, labels=NA)
mtext(side=3, "Explanatory Variable", line = 2)
plot(ct_simule_gagnant, sort=2:1, main='Winning category, After')
plot(ct_simule_gagnant, sort=2:1)
plot(ct_simule_gagnant, sort=2:1) #, main='Matrix transition among winners'
axis(3, lwd=0, labels=NA)
mtext(side=3, "Winning category, After", line = 2)
# weighted:
decrit(s$simule_gagnant, weights = s$weight)
decrit(s$gagnant_categorie[s$simule_gagnant==0], weights = s$weight[s$simule_gagnant==0])
decrit(s$gagnant_feedback_categorie[s$simule_gagnant==0], weights = s$weight[s$simule_gagnant==0])
crosstab(s$gagnant_feedback_categorie[s$simule_gagnant==0], s$gagnant_categorie[s$simule_gagnant==0], s$weight[s$simule_gagnant==0], dnn=c('gagnant_feedback_categorie', 'gagnant_categorie'), prop.r=T, dir=c("h", "v")) # , inv.x=T, inv.y=T
crosstab(s$gagnant_feedback_categorie[s$simule_gagnant==0], s$gagnant_categorie[s$simule_gagnant==0], s$weight[s$simule_gagnant==0], dnn=c('gagnant_feedback_categorie', 'gagnant_categorie'), prop.r=T, dir=c("h", "v")) # , inv.x=T, inv.y=T
crosstab( s$gagnant_categorie[s$simule_gagnant==0], s$gagnant_feedback_categorie[s$simule_gagnant==0],s$weight[s$simule_gagnant==0], dnn=c('Winning category, Before', 'Winning category, After'), prop.r=T, dir=c("h", "v")) # , inv.x=T, inv.y=T
>>>>>>> transition matrix
>>>>>>> transition matrix
=======
# print(mean(s$simule_gain[s$bins_simule_gain==i]))
}
# decrit(s$bins_simule_gain)
s$non_bayesien_large <- s$phi_g_sigma_gamma_large < 0 | s$phi_g_sigma_gamma_large > 1
s$non_bayesien <- s$phi_g_sigma_gamma < 0 | s$phi_g_sigma_gamma > 1
s$sigma_gamma_large <- - s$gain/qnorm(s$phi_g_sigma_gamma_large)
s$sigma_gamma <- - s$gain/qnorm(s$phi_g_sigma_gamma)
decrit(s$non_bayesien_large, weights = s$weight)
nb_bin <- 11
nb_bins <- length(levels(binning(s$simule_gain, bins=nb_bin, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
s$bins_simule_gain <- binning(s$simule_gain, bins=nb_bin, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
sigma_i <- feedback_pas_faux_i <- feedback_correct_i <- c()
for (i in 1:nb_bins) { # TODO: make bins of same size (?)
if (i==3) { # bin that contains both positive and negative simule_gain
s$bins_simule_gain[s$simule_gain<0 & s$bins_simule_gain==i] <- 2
s$bins_simule_gain[s$simule_gain>0 & s$bins_simule_gain==i] <- 4
} else {
sigma_i <- c(sigma_i, sqrt(wtd.var(s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i], s$weight[s$variante_taxe_info=='f' & s$bins_simule_gain==i])))
feedback_pas_faux_i <- c(feedback_pas_faux_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_pas_faux==T & s$bins_simule_gain==i])/sum(s$weight[s$variante_taxe_info=='f' & s$bins_simule_gain==i]))
feedback_correct_i <- c(feedback_correct_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_correct==T & s$bins_simule_gain==i])/sum(s$weight[s$variante_taxe_info=='f' & s$bins_simule_gain==i]))
s$phi_g_sigma_gamma_large[s$variante_taxe_info=='f' & s$bins_simule_gain==i] <- (5/6)*(1-pnorm(-s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i]/sigma_i[i], lower.tail=FALSE))/feedback_pas_faux_i[i]
s$phi_g_sigma_gamma[s$variante_taxe_info=='f' & s$bins_simule_gain==i] <- (5/6)*(1-pnorm(-s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i]/sigma_i[i], lower.tail=FALSE))/feedback_correct_i[i]
}
# print(mean(s$simule_gain[s$bins_simule_gain==i]))
}
s$non_bayesien_large <- s$phi_g_sigma_gamma_large < 0 | s$phi_g_sigma_gamma_large > 1
s$non_bayesien <- s$phi_g_sigma_gamma < 0 | s$phi_g_sigma_gamma > 1
s$sigma_gamma_large <- - s$gain/qnorm(s$phi_g_sigma_gamma_large)
s$sigma_gamma <- - s$gain/qnorm(s$phi_g_sigma_gamma)
decrit(s$non_bayesien_large, weights = s$weight)
decrit(s$non_bayesien, weights = s$weight)
nb_bin <- 8
nb_bins <- length(levels(binning(s$simule_gain, bins=nb_bin, method="wtd.quantile", ordered=FALSE, weights=s$weight)))
s$bins_simule_gain <- binning(s$simule_gain, bins=nb_bin, method="wtd.quantile", labels=c(1:nb_bins), ordered=FALSE, weights=s$weight)
sigma_i <- feedback_pas_faux_i <- feedback_correct_i <- c()
for (i in 1:nb_bins) { # TODO: make bins of same size (?)
if (i==3) { # bin that contains both positive and negative simule_gain
s$bins_simule_gain[s$simule_gain<0 & s$bins_simule_gain==i] <- 2
# s$bins_simule_gain[s$simule_gain>0 & s$bins_simule_gain==i] <- 4
}
sigma_i <- c(sigma_i, sqrt(wtd.var(s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i], s$weight[s$variante_taxe_info=='f' & s$bins_simule_gain==i])))
feedback_pas_faux_i <- c(feedback_pas_faux_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_pas_faux==T & s$bins_simule_gain==i])/sum(s$weight[s$variante_taxe_info=='f' & s$bins_simule_gain==i]))
feedback_correct_i <- c(feedback_correct_i, sum(s$weight[s$variante_taxe_info=='f' & s$gagnant_feedback_correct==T & s$bins_simule_gain==i])/sum(s$weight[s$variante_taxe_info=='f' & s$bins_simule_gain==i]))
if (i<3) {
s$phi_g_sigma_gamma_large[s$variante_taxe_info=='f' & s$bins_simule_gain==i] <- 1-(5/6)*(1-pnorm(-s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i]/sigma_i[i], lower.tail=T))/feedback_pas_faux_i[i]
s$phi_g_sigma_gamma[s$variante_taxe_info=='f' & s$bins_simule_gain==i] <- 1-(5/6)*(1-pnorm(-s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i]/sigma_i[i], lower.tail=T))/feedback_correct_i[i]
} else {
s$phi_g_sigma_gamma_large[s$variante_taxe_info=='f' & s$bins_simule_gain==i] <- (5/6)*(pnorm(-s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i]/sigma_i[i], lower.tail=T))/feedback_pas_faux_i[i]
s$phi_g_sigma_gamma[s$variante_taxe_info=='f' & s$bins_simule_gain==i] <- (5/6)*(pnorm(-s$gain[s$variante_taxe_info=='f' & s$bins_simule_gain==i]/sigma_i[i], lower.tail=T))/feedback_correct_i[i]
}
# print(mean(s$simule_gain[s$bins_simule_gain==i]))
}
# decrit(s$bins_simule_gain)
s$non_bayesien_large <- s$phi_g_sigma_gamma_large < 0 | s$phi_g_sigma_gamma_large > 1
s$non_bayesien <- s$phi_g_sigma_gamma < 0 | s$phi_g_sigma_gamma > 1
s$sigma_gamma_large <- - s$gain/qnorm(s$phi_g_sigma_gamma_large)
s$sigma_gamma <- - s$gain/qnorm(s$phi_g_sigma_gamma)
decrit(s$non_bayesien_large, weights = s$weight)
decrit(s$non_bayesien, weights = s$weight)
decrit(s$sigma_gamma_large[s$non_bayesien_large==FALSE], weights = s$weight[s$non_bayesien_large==FALSE])
decrit(s$sigma_gamma[s$non_bayesien==FALSE], weights = s$weight[s$non_bayesien==FALSE])
decrit(s$sigma_gamma_large[s$non_bayesien_large==FALSE & s$sigma_gamma_large > 0], weights = s$weight[s$non_bayesien_large==FALSE & s$sigma_gamma_large > 0])
decrit(s$sigma_gamma[s$non_bayesien==FALSE & s$sigma_gamma > 0], weights = s$weight[s$non_bayesien==FALSE & s$sigma_gamma > 0])
decrit(s$non_bayesien_large | s$sigma_gamma_large < 0, weights = s$weight)
decrit(s$non_bayesien | s$sigma_gamma < 0, weights = s$weight)
decrit(s$sigma_gamma_large[s$non_bayesien_large==FALSE], weights = s$weight[s$non_bayesien_large==FALSE])
decrit(s$sigma_gamma[s$non_bayesien==FALSE], weights = s$weight[s$non_bayesien==FALSE])
decrit((s$sigma_gamma_large<0)[s$non_bayesien_large==FALSE], weights = s$weight[s$non_bayesien_large==FALSE])
decrit((s$sigma_gamma<0)[s$non_bayesien==FALSE], weights = s$weight[s$non_bayesien==FALSE])
decrit(s$non_bayesien_large | s$sigma_gamma_large < 0, weights = s$weight)
decrit(s$non_bayesien | s$sigma_gamma < 0, weights = s$weight)
decrit((s$sigma_gamma_large<0)[s$non_bayesien_large==FALSE], weights = s$weight[s$non_bayesien_large==FALSE])
decrit((s$sigma_gamma<0)[s$non_bayesien==FALSE], weights = s$weight[s$non_bayesien==FALSE])
decrit(s$non_bayesien_large, weights = s$weight)
decrit(s$non_bayesien, weights = s$weight)
decrit(s$phi_g_sigma_gamma_large[s$non_bayesien_large==FALSE], weights = s$weight[s$non_bayesien_large==FALSE])
decrit(s$phi_g_sigma_gamma[s$non_bayesien==FALSE], weights = s$weight[s$non_bayesien==FALSE])
decrit(s$sigma_gamma_large[s$non_bayesien_large==FALSE], weights = s$weight[s$non_bayesien_large==FALSE])
decrit(s$sigma_gamma[s$non_bayesien==FALSE], weights = s$weight[s$non_bayesien==FALSE])
decrit(s$update_correct)
s$update_correct <- ((s$simule_gagnant==1 & s$gagnant_feedback_categorie=='Gagnant' & s$gagnant_categorie!='Gagnant')
+ (s$simule_gagnant==0 & s$gagnant_feedback_categorie=='Perdant' & s$gagnant_categorie!='Perdant')
- (s$simule_gagnant==1 & s$gagnant_feedback_categorie=='Perdant' & s$gagnant_categorie!='Perdant')
- (s$simule_gagnant==0 & s$gagnant_feedback_categorie=='Gagnant' & s$gagnant_categorie!='Gagnant'))
label(s$update_correct) <- "update_correct: Différence entre l'indicatrice de ne pas se penser gagnant/perdant et le penser après feedback infirmant, moins la même après feedback confirmant"
s$update_correct_large <- ((s$simule_gagnant==1 & ((s$gagnant_feedback_categorie=='Gagnant' & s$gagnant_categorie!='Gagnant') | (s$gagnant_feedback_categorie!='Perdant' & s$gagnant_categorie=='Perdant')))
+ (s$simule_gagnant==0 & ((s$gagnant_feedback_categorie=='Perdant' & s$gagnant_categorie!='Perdant') | (s$gagnant_feedback_categorie!='Gagnant' & s$gagnant_categorie=='Gagnant')))
- (s$simule_gagnant==1 & ((s$gagnant_feedback_categorie=='Perdant' & s$gagnant_categorie!='Perdant') | (s$gagnant_feedback_categorie!='Gagnant' & s$gagnant_categorie=='Gagnant')))
- (s$simule_gagnant==0 & ((s$gagnant_feedback_categorie=='Gagnant' & s$gagnant_categorie!='Gagnant') | (s$gagnant_feedback_categorie!='Perdant' & s$gagnant_categorie=='Perdant'))))
label(s$update_correct_large) <- "update_correct_large: Différence entre faire un update dans la bonne direction quand le feedback y conduit et faire un update dans la mauvaise direction"
decrit(s$update_correct)
decrit(s$update_correct_large) # TODO: in preparation
decrit(s$update_correct | s$gagnant_feedback_correct, weights = s$weight)
decrit(s$update_correct_large | s$gagnant_feedback_pas_faux, weights = s$weight)
decrit((s$non_bayesien_large | s$sigma_gamma_large < 0)[s$simule_gain<0], weights = s$weight[s$simule_gain<0]) # 46%
decrit(s$non_bayesien_large | s$sigma_gamma_large < 0, weights = s$weight) # 46%
decrit((s$non_bayesien_large | s$sigma_gamma_large < 0)[s$simule_gain<0], weights = s$weight[s$simule_gain<0]) # 46%
decrit((s$non_bayesien | s$sigma_gamma < 0)[s$simule_gain<0], weights = s$weight[s$simule_gain<0]) # 76%
decrit(s$non_bayesien_large | s$sigma_gamma_large < 0, weights = s$weight) # 46%
decrit(s$non_bayesien | s$sigma_gamma < 0, weights = s$weight) # 76%
decrit((s$non_bayesien_large | s$sigma_gamma_large < 0)[s$simule_gain>0], weights = s$weight[s$simule_gain>0]) # 2%
decrit((s$non_bayesien | s$sigma_gamma < 0)[s$simule_gain>0], weights = s$weight[s$simule_gain>0]) # 0%
decrit((s$non_bayesien_large | s$sigma_gamma_large < 0)[s$simule_gain<0], weights = s$weight[s$simule_gain<0]) # 59%
decrit((s$non_bayesien | s$sigma_gamma < 0)[s$simule_gain<0], weights = s$weight[s$simule_gain<0]) # 98%
decrit((s$non_bayesien)[s$simule_gain>0], weights = s$weight[s$simule_gain>0]) # 98%
decrit(s$non_bayesien_large[s$simule_gain>0], weights = s$weight[s$simule_gain>0]) # 59%
decrit(s$non_bayesien[s$simule_gain>0], weights = s$weight[s$simule_gain>0]) # 98%
decrit(s$non_bayesien_large[s$simule_gain<0], weights = s$weight[s$simule_gain<0]) # 2%
decrit(s$non_bayesien[s$simule_gain<0], weights = s$weight[s$simule_gain<0]) # 0%
sqrt(wtd.var(s$gain ,weights = s$weight))
<<<<<<< refs/remotes/thomasdouenne/master
>>>>>>> Bayes
=======
=======
# length(which(n(sid$duree) > 7*60))
# decrit(sid$test_qualite)
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1], s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'), prop.r=T, dir=c("h", "v")) # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
View(data1)
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1], s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'), prop.r=T, prop.c=T, dir=c("h", "v")) # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, dir=c("h", "v"), sort=2:1) # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T) # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, dir=c("h", "v"), sort=2:1) # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, sort=2:1) # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, sort=2:1, sub='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, sort=2:1, main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, sort=2:1, main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, sort=2:1, xlab='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, sort=2:1, ylab='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1],# dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, sort=2:1, main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, sort=2:1, title='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, sort=2:1, main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1, main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
ct_simule_gagnant <- crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1, main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
plot(ct_simule_gagnant, main='Winning category, After')
plot(ct_simule_gagnant, sub='Winning category, After')
axes(3)
axis(3)
ct_simule_gagnant <- crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1, main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
plot(ct_simule_gagnant, sub='Winning category, After')
ct_simule_gagnant <- crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1, dir=c("h", "v"), main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
ct_simule_gagnant <- crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, sort=2:1, dir=c("v", "h"), main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
ct_simule_gagnant <- crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', 'Winning category, After'),
prop.r=T, sort=2:1, main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
ct_simule_gagnant <- crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1, main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
ct_simule_gagnant <- crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1, main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1, main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
ct_simule_gagnant <- crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1, main='Winning category, After') # , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
plot(ct_simule_gagnant, sub='Winning category, After')
ct_simule_gagnant <- crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, main='Winning category, After') # sort=2:1, , inv.x=T, inv.y=T, color = FALSE # see mosaicplot
plot(ct_simule_gagnant, sub='Winning category, After')
plot(ct_simule_gagnant, sub='Winning category, After', dir=c("h", "v"))
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1, main='Winning category, After') # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
plot(ct_simule_gagnant, sub='Winning category, After', dir=c("h", "v"))
plot(ct_simule_gagnant, sub='Winning category, After', sort=2:1, dir=c("h", "v"))
plot(ct_simule_gagnant, sub='Winning category, After', sort=2:1)
ct_simule_gagnant <- crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1, main='Winning category, After') # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
plot(ct_simule_gagnant, sub='Winning category, After', sort=2:1)
crosstab(s$gagnant_categorie[s$simule_gagnant==1], s$gagnant_feedback_categorie[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1, main='Winning category, After') # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
plot(ct_simule_gagnant, main='Winning category, After', sort=2:1)
axis(3, xlab='ct_simule_gagnant <- ')
plot(ct_simule_gagnant, sort=2:1)
axis(3, xlab='ct_simule_gagnant <- ')
axis(3, main='ct_simule_gagnant <- ')
axis(3, title='ct_simule_gagnant <- ')
plot(ct_simule_gagnant, sort=2:1)
mtext(3, "Explanatory Variable", line = 2)
mtext(side=3, "Explanatory Variable", line = 2)
axis(3, lwd=0)
plot(ct_simule_gagnant, sort=2:1)
axis(3, lwd=0, labels=NA)
mtext(side=3, "Explanatory Variable", line = 2)
plot(ct_simule_gagnant, sort=2:1, main='Winning category, After')
plot(ct_simule_gagnant, sort=2:1)
plot(ct_simule_gagnant, sort=2:1) #, main='Matrix transition among winners'
axis(3, lwd=0, labels=NA)
mtext(side=3, "Winning category, After", line = 2)
# weighted:
s$winning_category <- s$gagnant_categorie
s$winning_feedback_category <- s$gagnant_feedback_categorie
s$winning_category <- relabel(s$winning_category, c("Gagnant"="Winner"))
levels(s$winning_category)
labels(s$winning_category)
# weighted:
s$winning_category <- as.factor(s$gagnant_categorie)
labels(s$winning_category)
levels(s$winning_category)
# weighted:
s$winning_category <- as.factor(s$gagnant_categorie)
s$winning_feedback_category <- as.factor(s$gagnant_feedback_categorie)
levels(s$winning_category) <- c('Winner', 'Unaffected', 'Loser')
levels(s$winning_feedback_category) <- c('Winner', 'Unaffected', 'Loser')
ct_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
ct_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab( s$winning_category[s$simule_gagnant==0], s$winning_feedback_category[s$simule_gagnant==0],s$weight[s$simule_gagnant==0], dnn=c('Winning category, Before', 'Winning category, After'), prop.r=T, dir=c("h", "v")) # , inv.x=T, inv.y=T
ct_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
plot(ct_simule_gagnant, sort=2:1) #, main='Matrix transition among winners'
axis(3, lwd=0, labels=NA)
mtext(side=3, "Winning category, After", line = 2)
ct_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
axis(3, lwd=0, labels=NA)
mtext(side=3, "Winning category, After", line = 2)
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before', ''),
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
# plot(ct_simule_gagnant, sort=2:1) #, main='Matrix transition among winners'
axis(3, lwd=0, labels=NA)
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, <b>Before</b> feedback', ''),
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), cex.axis=2,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), cex.axis=1.3,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), cex.axis=1.1,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), cex.axis=1,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), cex.axis=0.8,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), cex.axis=0.9,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), cex.axis=0.8,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), #cex.axis=0.8,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), cex.axis=0.8,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
par()
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), cex.axis=0.8, cex.lab=1.2,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), cex.axis=0.8, mar = c(0.1, 3.1, 3.1, 0.1),
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
par(mar = c(0.1, 3.1, 3.1, 0.1), cex.lab=1.2)
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), cex.axis=0.8,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
par(mar = c(0.1, 3.1, 3.1, -0.6), cex.lab=1.2)
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), cex.axis=0.8,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
par(mar = c(0.1, 3.1, 3.1, 0), cex.lab=1.2)
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), cex.axis=0.8,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), cex.axis=1,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), cex.axis=0.9,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
# plot(ct_simule_gagnant, sort=2:1) #, main='Matrix transition among winners'
axis(3, lwd=0, labels=NA)
mtext(side=3, "Winning category, After", line = 2)
# plot(ct_simule_gagnant, sort=2:1) #, main='Matrix transition among winners'
axis(3, lwd=0, labels=NA)
mtext(side=3, "Winning category, After")
mtext(side=3, "Winning category, After", line=1, cex = 1.2)
par(mar = c(0.1, 3.1, 2.1, 0), cex.lab=1.2)
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), cex.axis=0.9,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
# plot(ct_simule_gagnant, sort=2:1) #, main='Matrix transition among winners'
axis(3, lwd=0, labels=NA)
mtext(side=3, "Winning category, After", line=1, cex = 1.2)
mtext(side=3, "Winning category, After", line=0.8, cex = 1.2)
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), cex.axis=0.9,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
# plot(ct_simule_gagnant, sort=2:1) #, main='Matrix transition among winners'
axis(3, lwd=0, labels=NA)
mtext(side=3, "Winning category, After", line=0.8, cex = 1.2)
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c(expression('Winning category,', blod('Before'), 'feedback'), ''), cex.axis=0.9,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c(expression('Winning category,', bold('Before'), 'feedback'), ''), cex.axis=0.9,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
mtext(side=3, expression('Winning category,', bold('Before'), line=0.8, cex = 1.2)
# plot(ct_simule_gagnant, sort=2:1) #, main='Matrix transition among winners'
axis(3, lwd=0, labels=NA)
# plot(ct_simule_gagnant, sort=2:1) #, main='Matrix transition among winners'
axis(3, lwd=0, labels=NA)
mtext(side=3, expression('Winning category,', bold('Before'), 'feedback'), line=0.8, cex = 1.2)
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c('Winning category, Before feedback', ''), cex.axis=0.9,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
# plot(ct_simule_gagnant, sort=2:1) #, main='Matrix transition among winners'
axis(3, lwd=0, labels=NA)
mtext(side=3, expression('Winning category,', bold('Before'), 'feedback'), line=0.8, cex = 1.2)
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c(paste('Winning category,', expression(bold('Before')), 'feedback'), ''), cex.axis=0.9,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
mtext(side=3, paste('Winning category,', expression(bold('Before')), 'feedback'), line=0.8, cex = 1.2)
plot(1:2, 1:2, main=paste('Winning category,', expression(bold('Before')), 'feedback'))
plot(1:2, 1:2, ylab=paste('Winning category,', expression(bold('Before')), 'feedback'))
par(mar = c(3.1, 3.1, 2.1, 0), cex.lab=1.2)
plot(1:2, 1:2, xlab=paste('Winning category,', expression(bold('Before')), 'feedback'))
par(mar = c(8.1, 3.1, 2.1, 0), cex.lab=1.2)
plot(1:2, 1:2, xlab=paste('Winning category,', expression(bold('Before')), 'feedback'))
par(mar = c(0.1, 3.1, 2.1, 0), cex.lab=1.2)
par(mar = c(8.1, 3.1, 2.1, 0), cex.lab=1.2)
plot(1:2, 1:2, xlab=paste('Winning category,', expression(bold(Before)), 'feedback'))
plot(1:2, 1:2, xlab=expression(bold(Before)~feedback))
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c(expression('Winning category,'~bold(Before)~feedback), ''), cex.axis=0.9,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
par(mar = c(0.1, 3.1, 2.1, 0), cex.lab=1.2)
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c(expression('Winning category,'~bold(Before)~feedback), ''), cex.axis=0.9,
prop.r=T, sort=2:1) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
# plot(ct_simule_gagnant, sort=2:1) #, main='Matrix transition among winners'
# axis(3, lwd=0, labels=NA)
mtext(side=3, expression('Winning category,'~bold(After)~feedback), line=0.8, cex = 1.2)
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], #dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
# plot(ct_simule_gagnant, sort=2:1) #, main='Matrix transition among winners'
# axis(3, lwd=0, labels=NA)
mtext(side=3, expression('Winning category,'~bold(After)~feedback), line=0.8, cex = 1.2)
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab_simule_gagnant
plot(crosstab_simule_gagnant, ylab = expression('Winning category,'~bold(Before)~feedback), xlab=NA)
mtext(side=3, expression('Winning category,'~bold(After)~feedback), line=0.8, cex = 1.2)
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab_simule_gagnant
plot(crosstab_simule_gagnant, sort=2:1, cex.axis=0.9, ylab = expression('Winning category,'~bold(Before)~feedback), xlab=NA)
mtext(side=3, expression('Winning category,'~bold(After)~feedback), line=0.8, cex = 1.2)
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9, labelling_cells=T) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab_simule_gagnant
plot(crosstab_simule_gagnant, sort=2:1, cex.axis=0.9, labelling_cells=T, ylab = expression('Winning category,'~bold(Before)~feedback), xlab=NA)
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
labelling_cells()
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9, labeling_cells=T) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab_simule_gagnant
plot(crosstab_simule_gagnant, sort=2:1, cex.axis=0.9, labeling_cells=T, ylab = expression('Winning category,'~bold(Before)~feedback), xlab=NA)
labeling_cells()
?labeling_cells
package("graphics")
labeling_cells()
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9, labeling=1:9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
plot(crosstab_simule_gagnant, sort=2:1, cex.axis=0.9, labeling=1:9, ylab = expression('Winning category,'~bold(Before)~feedback), xlab=NA)
mosaicplot(crosstab_simule_gagnant, sort=2:1, cex.axis=0.9, ylab = expression('Winning category,'~bold(Before)~feedback), xlab=NA)
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab_simule_gagnant
labeling_cells()
plot(crosstab_simule_gagnant, sort=2:1, cex.axis=0.9, ylab = expression('Winning category,'~bold(Before)~feedback), xlab=NA)
mtext(side=3, expression('Winning category,'~bold(After)~feedback), line=0.8, cex = 1.2)
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==0], s$winning_feedback_category[s$simule_gagnant==0],
s$weight[s$simule_gagnant==0], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
crosstab_simule_gagnant
plot(crosstab_simule_gagnant, sort=2:1, cex.axis=0.9, ylab = expression('Winning category,'~bold(Before)~feedback), xlab=NA)
mtext(side=3, expression('Winning category,'~bold(After)~feedback), line=0.8, cex = 1.2)
mosaic(crosstab_simule_gagnant)
package('vcd')
mosaic(crosstab_simule_gagnant)
mosaicplot(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9)
mosaicplot(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, cex.axis=0.9)
mosaic(crosstab_simule_gagnant$tab)
mosaic(crosstab_simule_gagnant$tab, labeling=1:9)
?mosaic
mosaic(crosstab_simule_gagnant$tab)
labeling_cells()
labeling_cells(text = crosstab_simule_gagnant$tab, margin = 0)(crosstab_simule_gagnant$tab)
labeling_cells(text = as.table(crosstab_simule_gagnant$tab), margin = 0)(as.table(crosstab_simule_gagnant$tab))
mosaic(crosstab_simule_gagnant$tab)
labeling_cells(text = as.table(crosstab_simule_gagnant$tab), margin = 0)(as.table(crosstab_simule_gagnant$tab))
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
mosaic(crosstab_simule_gagnant$tab)
labeling_cells(text = as.table(crosstab_simule_gagnant$tab), margin = 0)(as.table(crosstab_simule_gagnant$tab))
labeling_cells(text = 1:9, margin = 0)(as.table(crosstab_simule_gagnant$tab))
labeling_cells(text = 1:9, margin = 0)(1:9)
as.table(crosstab_simule_gagnant$tab)
labeling_cells(text = as.table(crosstab_simule_gagnant$tab), margin = 0) #(as.table(crosstab_simule_gagnant$tab))
labeling_cells(text = as.table(crosstab_simule_gagnant$tab), margin = 0)(as.table(crosstab_simule_gagnant$tab))
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
labeling_cells(text = prop.table(crosstab_simule_gagnant$tab), margin = 0)(as.table(crosstab_simule_gagnant$tab))
labeling_cells(text = round(100*prop.table(crosstab_simule_gagnant$tab)), margin = 0)(as.table(crosstab_simule_gagnant$tab))
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
labeling_cells(text = round(100*prop.table(crosstab_simule_gagnant$tab)), margin = 0)(as.table(crosstab_simule_gagnant$tab))
crosstab_simule_gagnant$tab
crosstab_simule_gagnant$prop.r
labeling_cells(text = round(100*prop.table(crosstab_simule_gagnant$prop.r)), margin = 0)(as.table(crosstab_simule_gagnant$tab))
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
labeling_cells(text = round(100*prop.table(crosstab_simule_gagnant$prop.r)), margin = 0)(as.table(crosstab_simule_gagnant$tab))
mosaicplot(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9)
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
labeling_cells(text = round(100*prop.table(crosstab_simule_gagnant$prop.r)), margin = 0)(as.table(crosstab_simule_gagnant$tab))
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
mosaic(crosstab_simule_gagnant$tab)
labeling_cells(text = round(100*prop.table(crosstab_simule_gagnant$prop.r)), margin = 0)(as.table(crosstab_simule_gagnant$tab))
mosaicplot(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9)
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
labeling_cells(text = round(100*prop.table(crosstab_simule_gagnant$prop.r)), margin = 0)(as.table(crosstab_simule_gagnant$tab))
mosaicplot(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9)
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
labeling_cells(text = round(100*prop.table(crosstab_simule_gagnant$prop.r)), margin = 0)(as.table(crosstab_simule_gagnant$tab))
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
labeling_cells(text = round(100*prop.table(crosstab_simule_gagnant$prop.r)), margin = 0)(as.table(crosstab_simule_gagnant$tab))
mosaic(crosstab_simule_gagnant$tab)
labeling_cells(text = round(100*prop.table(crosstab_simule_gagnant$prop.r)), margin = 0)(as.table(crosstab_simule_gagnant$tab))
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
labeling_cells(text = round(100*prop.table(crosstab_simule_gagnant$prop.r)), margin = 0)(as.table(crosstab_simule_gagnant$tab))
labeling_cells(text = round(100*prop.table(crosstab_simule_gagnant$prop.r)), margin = 0)(as.table(crosstab_simule_gagnant$prop.r))
round(100*prop.table(crosstab_simule_gagnant$prop.r)
)
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
round(100*prop.table(crosstab_simule_gagnant$prop.r))
round(100*crosstab_simule_gagnant$prop.r)
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
labeling_cells(text = round(100*crosstab_simule_gagnant$prop.r), margin = 0)(as.table(crosstab_simule_gagnant$prop.r))
labeling_cells(text = round(100*crosstab_simule_gagnant$prop.r)+'%', margin = 0)(as.table(crosstab_simule_gagnant$prop.r))
labeling_cells(text = paste(round(100*crosstab_simule_gagnant$prop.r),'%',sep=''), margin = 0)(as.table(crosstab_simule_gagnant$prop.r))
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
labeling_cells(text = paste(round(100*crosstab_simule_gagnant$prop.r),'%',sep=''), margin = 0)(as.table(crosstab_simule_gagnant$prop.r))
labeling_cells(text = round(100*prop.table(crosstab_simule_gagnant$prop.r)), margin = 0)(as.table(crosstab_simule_gagnant$prop.r))
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
labeling_cells(text = round(100*prop.table(crosstab_simule_gagnant$prop.r)), margin = 0)(as.table(crosstab_simule_gagnant$prop.r))
prop.table(crosstab_simule_gagnant$prop.r)
prop.table(crosstab_simule_gagnant$tab)
prop.r.table(crosstab_simule_gagnant$tab)
round(100*crosstab_simule_gagnant$prop.r)
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
labeling_cells(text = round(100*crosstab_simule_gagnant$prop.r), margin = 0)(as.table(crosstab_simule_gagnant$prop.r))
mosaicplot(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9, labeling=c(1:9))
mosaicplot(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9)
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9, labeling=c(1:9)) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
labeling_cells(text = round(100*crosstab_simule_gagnant$prop.r), margin = 0)(as.table(crosstab_simule_gagnant$prop.r))
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
labeling_cells(text = round(100*crosstab_simule_gagnant$prop.r), margin = 0)(as.table(crosstab_simule_gagnant$prop.r))
# mosaicplot(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
#          s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
#          prop.r=T, sort=2:1, cex.axis=0.9)
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
# mosaicplot(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
#          s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
#          prop.r=T, sort=2:1, cex.axis=0.9)
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9), ylab = expression('Winning category,'~bold(Before)~feedback), xlab=NA)
mtext(side=3, expression('Winning category,'~bold(After)~feedback), line=0.8, cex = 1.2)
# mosaicplot(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
#          s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
#          prop.r=T, sort=2:1, cex.axis=0.9)
mosaic(crosstab_simule_gagnant$tab, ylab = expression('Winning category,'~bold(Before)~feedback), xlab=NA, labeling=c(1:9))
mtext(side=3, expression('Winning category,'~bold(After)~feedback), line=0.8, cex = 1.2)
# mosaicplot(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
#          s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
#          prop.r=T, sort=2:1, cex.axis=0.9)
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
mtext(side=3, expression('Winning category,'~bold(After)~feedback), ylab = expression('Winning category,'~bold(Before)~feedback), xlab=NA, line=0.8, cex = 1.2)
mtext(side=3, expression('Winning category,'~bold(After)~feedback), line=0.8, cex = 1.2)
# mosaicplot(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
#          s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
#          prop.r=T, sort=2:1, cex.axis=0.9)
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
mtext(side=3, expression('Winning category,'~bold(After)~feedback), line=0.8, cex = 1.2)
labeling_cells(text = round(100*crosstab_simule_gagnant$prop.r), margin = 0)(as.table(crosstab_simule_gagnant$prop.r))
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
# mosaicplot(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
#          s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
#          prop.r=T, sort=2:1, cex.axis=0.9)
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
mtext(side=3, expression('Winning category,'~bold(After)~feedback), line=0.8, cex = 1.2)
labeling_cells(text = round(100*crosstab_simule_gagnant$prop.r), margin = 0)(as.table(crosstab_simule_gagnant$prop.r))
crosstab_simule_gagnant <- crosstab(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9) # sort=2:1, dir=c("h", "v"), inv.x=T, inv.y=T, color = FALSE # see mosaicplot
# mosaicplot(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
#          s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
#          prop.r=T, sort=2:1, cex.axis=0.9)
mosaic(crosstab_simule_gagnant$tab, labeling=c(1:9))
labeling_cells(text = round(100*crosstab_simule_gagnant$prop.r), margin = 0)(as.table(crosstab_simule_gagnant$prop.r))
mtext(side=3, expression('Winning category,'~bold(After)~feedback), line=0.8, cex = 1.2)
# mosaicplot(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
#          s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
#          prop.r=T, sort=2:1, cex.axis=0.9)
mosaic(crosstab_simule_gagnant$tab, shade=T, labeling=c(1:9))
mosaicplot(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9)
mosaicplot(s$winning_category[s$simule_gagnant==1], s$winning_feedback_category[s$simule_gagnant==1],
s$weight[s$simule_gagnant==1], # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9)
mosaicplot(crosstab_simule_gagnant$tab, # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9)
labeling_cells(text = round(100*crosstab_simule_gagnant$prop.r), margin = 0)(as.table(crosstab_simule_gagnant$prop.r))
mosaicplot(crosstab_simule_gagnant$tab, # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
prop.r=T, sort=2:1, cex.axis=0.9, labeling=c(1:9))
labeling_cells(text = round(100*crosstab_simule_gagnant$prop.r), margin = 0)(as.table(crosstab_simule_gagnant$prop.r))
mosaicplot(crosstab_simule_gagnant$tab, # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
sort=2:1, cex.axis=0.9, labeling=c(1:9))
labeling_cells(text = round(100*crosstab_simule_gagnant$prop.r), margin = 0)(as.table(crosstab_simule_gagnant$prop.r))
mosaic(crosstab_simule_gagnant$tab, shade=T, labeling=c(1:9))
labeling_cells(text = round(100*crosstab_simule_gagnant$prop.r), margin = 0)(as.table(crosstab_simule_gagnant$prop.r))
mosaic(crosstab_simule_gagnant$tab, shade=FALSE, labeling=c(1:9))
mosaicplot(crosstab_simule_gagnant$tab, # dnn=c(expression('Winning category,'~bold(Before)~feedback), ''),
sort=2:1, cex.axis=0.9, labeling=c(1:9))
>>>>>>> transition matrix
>>>>>>> transition matrix
