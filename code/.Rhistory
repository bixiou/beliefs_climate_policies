label(s$gain_fuel) <<- "gain_fuel: Catégorie de gain-perte de pouvoir d'achat par UC, suite à hausse taxe carburants compensée, dans [-6;5] (seuils: -160/-110/-70/-40/-15/0/10/20/30/40)"
s$gain_chauffage[s$gagnant_categorie_chauffage=='Non affecté' & s$variante_partielle=='c'] <<- 0
s$gain_chauffage[s$gagnant_categorie_chauffage=='Gagnant' & s$variante_partielle=='c'] <<- 1 + as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$gain_taxe_chauffage_hausse[s$gagnant_categorie_chauffage=='Gagnant' & s$variante_partielle=='c']))))/25
s$gain_chauffage[s$gagnant_categorie_chauffage=='Perdant' & s$variante_partielle=='c'] <<- - 1 - as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$gain_taxe_chauffage_baisse[s$gagnant_categorie_chauffage=='Perdant' & s$variante_partielle=='c']))))/25
label(s$gain_chauffage) <<- "gain_fuel: Catégorie de gain-perte de pouvoir d'achat par UC, suite à hausse taxe chauffage compensée, dans [-6;5] (seuils: -160/-110/-70/-40/-15/0/10/20/30/40)"
s$gagnant_partielle_categorie[s$variante_partielle=='c'] <<- s$gagnant_categorie_chauffage[s$variante_partielle=='c']
s$gagnant_partielle_categorie[s$variante_partielle=='f'] <<- s$gagnant_categorie_fuel[s$variante_partielle=='f']
label(s$gagnant_partielle_categorie) <<- "gagnant_partielle_categorie: Ménage Gagnant/Non affecté/Perdant par hausse taxe partielle (chauffage ou fuel) compensée, dans [-6;5] (seuils: -160/-110/-70/-40/-15/0/10/20/30/40) (gagnant_categorie_fuel/chauffage)"
s$gain_partielle[s$variante_partielle=='c'] <<- s$gain_chauffage[s$variante_partielle=='c']
s$gain_partielle[s$variante_partielle=='f'] <<- s$gain_fuel[s$variante_partielle=='f']
label(s$gain_partielle) <<- "gain_partielle: Catégorie de gain-perte de pouvoir d'achat par UC, suite à hausse taxe partielle (chauffage ou fuel) compensée, dans [-6;5] (seuils: -160/-110/-70/-40/-15/0/10/20/30/40) (gain_fuel/chauffage)"
s$gain[s$gagnant_categorie=='Non affecté' & s$variante_partielle!='NA'] <<- 0
s$gain[s$gagnant_categorie=='Gagnant' & s$variante_partielle!='NA'] <<- 1 + as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$gain_taxe_hausse[s$gagnant_categorie=='Gagnant' & s$variante_partielle!='NA']))))/50
s$gain[s$gagnant_categorie=='Perdant' & s$variante_partielle!='NA'] <<- - 1 - as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$gain_taxe_baisse[s$gagnant_categorie=='Perdant' & s$variante_partielle!='NA']))))/50
label(s$gain) <<- "gain: Catégorie de gain-perte de pouvoir d'achat par UC, suite à hausse taxe carbone compensée, dans [-6;5] (seuils: -280/-190/-120/-70/-30/0/20/40/60/80)"
s$gain_echelle <<- s$gain
s$gain_fuel_echelle <<- s$gain_fuel
s$gain_chauffage_echelle <<- s$gain_chauffage
label(s$gain) <<- "gain: Catégorie de gain-perte de pouvoir d'achat par UC, suite à hausse taxe carbone compensée, dans [-6;5] (seuils: -280/-190/-120/-70/-30/0/20/40/60/80)"
label(s$gain_chauffage_echelle) <<- "gain_chauffage_echelle: Catégorie de gain-perte de pouvoir d'achat par UC, suite à hausse taxe chauffage compensée, dans [-6;5] (seuils: -160/-110/-70/-40/-15/0/10/20/30/40)"
label(s$gain_fuel_echelle) <<- "gain_fuel_echelle: Catégorie de gain-perte de pouvoir d'achat par UC, suite à hausse taxe carburants compensée, dans [-6;5] (seuils: -160/-110/-70/-40/-15/0/10/20/30/40)"
# cf. consistency_belief_losses.py pour les imputations
temp <- -405.55*(s$gain==-6) - 224.25*(s$gain==-5) - 147.91*(s$gain==-4) - 92.83*(s$gain==-3) - 48.28*(s$gain==-2) - 13.72*(s$gain==-1) + 10.39*(s$gain==1) + 30.36*(s$gain==2) + 49.96*(s$gain==3) + 69.72*(s$gain==4) + 106.89*(s$gain==5) #  - 1.66*(s$gain==0)
s$gain <<- as.item(temp, labels = structure(c(-405.55, -224.25, -147.91, -92.83, -48.28, -13.72, 0, 10.39, 30.36, 49.96, 69.72, 106.89), names = c("<-280", "-280_-190", "-190_-120", "-120_-70", "-70_-30", "-30_0", "0", "0_20", "20_40", "40_60", "60_80", ">80")), annotation=Label(s$gain))
temp <- NA
temp[!is.na(s$gain_fuel)] <- (-248.76*(s$gain_fuel==-6) - 131.21*(s$gain_fuel==-5) - 87.36*(s$gain_fuel==-4) - 53.27*(s$gain_fuel==-3) - 25.49*(s$gain_fuel==-2) - 7.51*(s$gain_fuel==-1) + 5.17*(s$gain_fuel==1) + 14.73*(s$gain_fuel==2) + 24.85*(s$gain_fuel==3) + 34.89*(s$gain_fuel==4) + 57.42*(s$gain_fuel==5))[!is.na(s$gain_fuel)] #  - 1.17*(s$gain_fuel==0)
s$gain_fuel <<- as.item(temp, labels = structure(c(-248.76, -131.21, -87.36, -53.27, -25.49, -7.51, 0, 5.17, 14.73, 24.85, 34.89, 57.42), names = c("<-160", "-160_-110", "-110_-70", "-70_-40", "-40_-15", "-15_0", "0", "0_10", "10_20", "20_30", "30_40", ">40")), annotation=Label(s$gain_fuel))
temp <- NA
temp[!is.na(s$gain_chauffage)] <- (-262.07*(s$gain_chauffage==-6) - 132.69*(s$gain_chauffage==-5) - 87.05*(s$gain_chauffage==-4) - 53.65*(s$gain_chauffage==-3) - 26.57*(s$gain_chauffage==-2) - 7.20*(s$gain_chauffage==-1) + 4.53*(s$gain_chauffage==1) + 15.44*(s$gain_chauffage==2) + 25.26*(s$gain_chauffage==3) + 35.66*(s$gain_chauffage==4) + 54.67*(s$gain_chauffage==5))[!is.na(s$gain_chauffage)] #  - 1.34*(s$gain_chauffage==0)
s$gain_chauffage <<- as.item(temp, labels = structure(c(-262.07, -132.69, -87.05, -53.65, -26.57, -7.20, 0, 4.53, 15.44, 25.26, 35.66, 54.67), names = c("<-160", "-160_-110", "-110_-70", "-70_-40", "-40_-15", "-15_0", "0", "0_10", "10_20", "20_30", "30_40", ">40")), annotation=Label(s$gain_chauffage))
s$Elasticite_chauffage <<- as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$elasticite_chauffage))))
s$Elasticite_chauffage <<- (s$Elasticite_chauffage==0)*1.5 + (s$Elasticite_chauffage==3)*6.5 + (s$Elasticite_chauffage>3)*(s$Elasticite_chauffage + 5) # Take the average of thresholds, take 40% for >30%
s$Elasticite_chauffage <<- - round(s$Elasticite_chauffage / 30, 2) # converts into elasticity
label(s$Elasticite_chauffage) <<- "Elasticite_chauffage: Élasticité-prix des dépenses de chauffage des Français, calculée en prenant la valeur moyenne des intervalles proposées (seuils à 0/3/10/20/30% pour une hausse de 30%)"
s$Elasticite_chauffage_perso <<- as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$elasticite_chauffage_perso))))
s$Elasticite_chauffage_perso <<- (s$Elasticite_chauffage_perso==0)*1.5 + (s$Elasticite_chauffage_perso==3)*6.5 + (s$Elasticite_chauffage_perso>3)*(s$Elasticite_chauffage_perso + 5) # Take the average of thresholds, take 40% for >30%
s$Elasticite_chauffage_perso <<- - round(s$Elasticite_chauffage_perso / 30, 2) # converts into elasticity
label(s$Elasticite_chauffage_perso) <<- "Elasticite_chauffage_perso: Élasticité-prix des dépenses de chauffage du ménage, calculée en prenant la valeur moyenne des intervalles proposées (seuils à 0/3/10/20/30% pour une hausse de 30%)"
s$Elasticite_fuel <<- as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$elasticite_fuel))))
s$Elasticite_fuel <<- (s$Elasticite_fuel==0)*1.5 + (s$Elasticite_fuel==3)*6.5 + (s$Elasticite_fuel>3)*(s$Elasticite_fuel + 5) # Take the average of thresholds, take 40% for >30%
s$Elasticite_fuel <<- - round(s$Elasticite_fuel / 30, 2) # converts into elasticity
label(s$Elasticite_fuel) <<- "Elasticite_fuel: Élasticité-prix des dépenses de carburants des Français, calculée en prenant la valeur moyenne des intervalles proposées (seuils à 0/3/10/20/30% pour une hausse de 0.5€/L)"
s$Elasticite_fuel_perso <<- as.numeric(gsub("\\D*", "", sub("\\sà.*", "", sub("\\D*", "", s$elasticite_fuel_perso))))
s$Elasticite_fuel_perso <<- (s$Elasticite_fuel_perso==0)*1.5 + (s$Elasticite_fuel_perso==3)*6.5 + (s$Elasticite_fuel_perso>3)*(s$Elasticite_fuel_perso + 5) # Take the average of thresholds, take 40% for >30%
s$Elasticite_fuel_perso <<- - round(s$Elasticite_fuel_perso / 30, 2) # converts into elasticity
label(s$Elasticite_fuel_perso) <<- "Elasticite_fuel_perso: Élasticité-prix des dépenses de carburants du ménage, calculée en prenant la valeur moyenne des intervalles proposées (seuils à 0/3/10/20/30% pour une hausse de 0.5€/L)"
s$variante_taxe_info <<- "p"
s$variante_taxe_info[s$gagnant_feedback_categorie!=""] <<- "f"
label(s$variante_taxe_info) <<- "variante_taxe_info: (f/p) Variante aléatoire entre f: feedback (=simulation, 2/3) et p: progressivité (1/3), dans l'information donnée sur la taxe compensée avant de demander à nouveau le gain et l'approbation, ainsi que les bénéfices et problèmes"
for (v in c('CC', 'sante', 'circulation', 'revenu', 'pauvres', 'independance', 'enjeu', 'aucun', 'autre_choix', 'autre')) {
s[[paste('taxe_benefices_', v, sep="")]] <<- s[paste('taxe_benefices_', v, '_p', sep="")][[1]]
s[[paste('taxe_benefices_', v, sep="")]][s$variante_taxe_info=='f'] <<- s[paste('taxe_benefices_', v, '_f', sep="")][[1]][s$variante_taxe_info=='f']
label(s[[paste('taxe_benefices_', v, sep="")]]) <<- sub("_f: \\* ", ": ", label(s[paste('taxe_benefices_', v, '_f', sep="")][[1]]))
}
for (v in c('inefficace', 'alternatives', 'ruraux', 'revenu', 'pauvres', 'economie', 'pretexte', 'aucun', 'autre_choix', 'autre')) {
s[[paste('taxe_problemes_', v, sep="")]] <<- s[paste('taxe_problemes_', v, '_p', sep="")][[1]]
s[[paste('taxe_problemes_', v, sep="")]][s$variante_taxe_info=='f'] <<- s[paste('taxe_problemes_', v, '_f', sep="")][[1]][s$variante_taxe_info=='f']
label(s[[paste('taxe_problemes_', v, sep="")]]) <<- sub("_f: \\* ", ": ", label(s[paste('taxe_problemes_', v, '_f', sep="")][[1]]))
}
s$cible[s$cible20==1] <<- '20'
s$cible[s$cible30==1] <<- '30'
s$cible[s$cible40==1] <<- '40'
s$cible[s$cible50==1] <<- '50'
s$cible <<- relevel(as.factor(s$cible), '50')
label(s$cible) <<- "cible: Ciblage du recyclage de la hausse de la taxe carbone, attribué en fonction du revenu du répondant et de son ménage (20/30/40/50% les plus modestes)"
# TODO: manage to use tidyverse without erasing observations
# s <<- merge(s, s %>% gather(key = temp, value = gain_cible, c(gagnant_categorie__20, gagnant_categorie_20_30, gagnant_categorie_30_40, gagnant_categorie_40_50, gagnant_categorie_50_70, gagnant_categorie_70_)) %>% filter(gain_cible != "") %>% select(-temp), sort=FALSE) # Warning: attributes are not identical across measure variables; they will be dropped
# label(s$gain_cible) <<- "gain_cible: Ménage Gagnant/Non affecté/Perdant avec hausse taxe carbone à recyclage ciblé (cible: 20/30/40/50% les plus modestes)"
# s <<- merge(s, s %>% gather(key = temp, value = taxe_cible_approbation, c(taxe__20_approbation, taxe_20_30_approbation, taxe_30_40_approbation, taxe_40_50_approbation, taxe_50_70_approbation, taxe_70__approbation)) %>% filter(taxe_cible_approbation != "") %>% select(-temp), sort=FALSE)
# label(s$taxe_cible_approbation) <<- "taxe_cible_approbation: Approbation d'une hausse de la taxe carbone compensée par recyclage ciblé (cible: 20/30/40/50% les plus modestes)"
#
#   # s <<- s %>% gather(key = temp, value = km, c(km_0, km_1, km_2)) %>% filter(km != "") %>% select(-temp) # erases km_0, km_1, km_2
# s <<- merge(s, s %>% gather(key = temp, value = km, c(km_0, km_1, km_2)) %>% filter(km != "") %>% select(-temp), sort=FALSE) # Warning: attributes are not identical across measure variables; they will be dropped
# label(s$km) <<- "km: Nombre de kilomètres parcourus lors des 12 derniers mois en voiture ou moto (par le répondant pour nb_vehicules=0, par les véhicules sinon)"
#
# s <<- merge(s, s %>% gather(key = temp, value = conso, c(conso_1, conso_2)) %>% filter(conso != "") %>% select(-temp), sort=FALSE)
# label(s$conso) <<- "conso:  Consommation moyenne du véhicule (en litres aux 100 km)"
s$gagnant_cible_categorie[!is.na(s$gagnant_categorie__20)] <<- s$gagnant_categorie__20[!is.na(s$gagnant_categorie__20)]
s$gagnant_cible_categorie[!is.na(s$gagnant_categorie_20_30)] <<- s$gagnant_categorie_20_30[!is.na(s$gagnant_categorie_20_30)]
s$gagnant_cible_categorie[!is.na(s$gagnant_categorie_30_40)] <<- s$gagnant_categorie_30_40[!is.na(s$gagnant_categorie_30_40)]
s$gagnant_cible_categorie[!is.na(s$gagnant_categorie_40_50)] <<- s$gagnant_categorie_40_50[!is.na(s$gagnant_categorie_40_50)]
s$gagnant_cible_categorie[!is.na(s$gagnant_categorie_50_70)] <<- s$gagnant_categorie_50_70[!is.na(s$gagnant_categorie_50_70)]
s$gagnant_cible_categorie[!is.na(s$gagnant_categorie_70_)] <<- s$gagnant_categorie_70_[!is.na(s$gagnant_categorie_70_)]
label(s$gagnant_cible_categorie) <<- "gagnant_cible_categorie: Ménage Gagnant/Non affecté/Perdant avec hausse taxe carbone à recyclage ciblé (cible: 20/30/40/50% les plus modestes)"
s$taxe_cible_approbation[!is.na(s$taxe__20_approbation)] <<- s$taxe__20_approbation[!is.na(s$taxe__20_approbation)]
s$taxe_cible_approbation[!is.na(s$taxe_20_30_approbation)] <<- s$taxe_20_30_approbation[!is.na(s$taxe_20_30_approbation)]
s$taxe_cible_approbation[!is.na(s$taxe_30_40_approbation)] <<- s$taxe_30_40_approbation[!is.na(s$taxe_30_40_approbation)]
s$taxe_cible_approbation[!is.na(s$taxe_40_50_approbation)] <<- s$taxe_40_50_approbation[!is.na(s$taxe_40_50_approbation)]
s$taxe_cible_approbation[!is.na(s$taxe_50_70_approbation)] <<- s$taxe_50_70_approbation[!is.na(s$taxe_50_70_approbation)]
s$taxe_cible_approbation[!is.na(s$taxe_70__approbation)] <<- s$taxe_70__approbation[!is.na(s$taxe_70__approbation)]
label(s$taxe_cible_approbation) <<- "taxe_cible_approbation: Approbation d'une hausse de la taxe carbone compensée par recyclage ciblé (cible: 20/30/40/50% les plus modestes)"
s$categorie_cible[!is.na(s$taxe__20_approbation)] <<- '_20'
s$categorie_cible[!is.na(s$taxe_20_30_approbation)] <<- '20_30'
s$categorie_cible[!is.na(s$taxe_30_40_approbation)] <<- '30_40'
s$categorie_cible[!is.na(s$taxe_40_50_approbation)] <<- '40_50'
s$categorie_cible[!is.na(s$taxe_50_70_approbation)] <<- '50_70'
s$categorie_cible[!is.na(s$taxe_70__approbation)] <<- '70_'
label(s$categorie_cible) <<- "categorie_cible: Catégorie de revenu du répondant (et de son ménage) taxe à recyclage ciblé - Catégories: percentile <20/20-30/30-40/40-50/50-70/>70, sachant que revenu_conjoint détermine la catégorie quand percentile de revenu > 70 (780/1140/1430/1670/2220)"
s$traite_cible <<- (s$cible==20)*(s$revenu<780) + (s$cible==30)*(s$revenu<1140) + (s$cible==40)*(s$revenu<1430) + (s$cible==50)*(s$revenu<1670)
s$traite_cible_conjoint <<- (s$nb_adultes > 1)* ((s$cible==20)*(s$revenu_conjoint<780) + (s$cible==30)*(s$revenu_conjoint<1140) + (s$cible==40)*(s$revenu_conjoint<1430) + (s$cible==50)*(s$revenu_conjoint<1670))
label(s$traite_cible) <<- "traite_cible: Indicatrice de transfert reçu par le répondant lors de la hausse de la taxe carbone avec compensation ciblée. Montants: 550/360/270/220 €/an/adulte pour cible à 20/30/40/50"
label(s$traite_cible_conjoint) <<- "traite_cible_conjoint: Indicatrice de transfert reçu par le conjoint du répondant lors de la hausse de la taxe carbone avec compensation ciblée. Montants: 550/360/270/220 €/an/adulte pour cible à 20/30/40/50"
s$versement_cible <<- (s$traite_cible + s$traite_cible_conjoint) * ((s$cible==20)*550 + (s$cible==30)*360 + (s$cible==40)*270 + (s$cible==50)*220)
s$versement_cible_sans_conjoint <<- (s$traite_cible) * ((s$cible==20)*550 + (s$cible==30)*360 + (s$cible==40)*270 + (s$cible==50)*220)
label(s$versement_cible) <<- "versement_cible: Versement annuel reçu par le ménage du répondant lors de la hausse de la taxe carbone avec compensation ciblée. Montants: 550/360/270/220 €/an/parent pour cible à 20/30/40/50"
label(s$versement_cible_sans_conjoint) <<- "versement_cible_sans_conjoint: Versement annuel reçu par le répondant lors de la hausse de la taxe carbone avec compensation ciblée. Montants: 550/360/270/220 €/an/adulte pour cible à 20/30/40/50"
s$versement <<- 110 * s$nb_adultes
label(s$versement) <<- "versement: Versement annuel reçu par le ménage suite à une hausse de la taxe carbone compensée (110 * nb_adultes)"
s$km[!is.na(s$km_0)] <<- s$km_0[!is.na(s$km_0)]
s$km[!is.na(s$km_1)] <<- s$km_1[!is.na(s$km_1)]
s$km[!is.na(s$km_2)] <<- s$km_2[!is.na(s$km_2)]
label(s$km) <<- "km: Nombre de kilomètres parcourus lors des 12 derniers mois en voiture ou moto (par le répondant pour nb_vehicules=0, par les véhicules sinon)"
s$conso[!is.na(s$conso_1)] <<- s$conso_1[!is.na(s$conso_1)]
s$conso[!is.na(s$conso_2)] <<- s$conso_2[!is.na(s$conso_2)]
label(s$conso) <<- "conso:  Consommation moyenne du véhicule (en litres aux 100 km)"
s$gaz <<- grepl('gaz', s$chauffage, ignore.case = T)
s$fioul <<- grepl('fioul', s$chauffage, ignore.case = T)
s$hausse_chauffage <<- -55.507189 + s$gaz * 124.578484 + s$fioul * 221.145441 + s$surface * 0.652174
s$hausse_diesel[s$nb_vehicules == 0] <<- (0.5*(6.39/100) * s$km * 1.4 * (1 - 0.4) * 0.090922)[s$nb_vehicules == 0] # share_diesel * conso * km * price * (1-elasticite) * price_increase
s$hausse_diesel[s$nb_vehicules == 1] <<- ((s$fuel_1=='Diesel') * (s$conso/100) * s$km * 1.4 * (1 - 0.4) * 0.090922)[s$nb_vehicules == 1]
s$hausse_diesel[s$nb_vehicules == 2] <<- (((s$fuel_2_1=='Diesel')*2/3 + (s$fuel_2_2=='Diesel')/3) * (s$conso/100) * s$km * 1.4 * (1 - 0.4) * 0.090922)[s$nb_vehicules == 2]
s$hausse_essence[s$nb_vehicules == 0] <<- (0.5*(7.31/100) * s$km * 1.45 * (1 - 0.4) * 0.076128)[s$nb_vehicules == 0] # share_diesel * conso * km * price * (1-elasticite) * price_increase
s$hausse_essence[s$nb_vehicules == 1] <<- ((s$fuel_1!='Diesel') * (s$conso/100) * s$km * 1.45 * (1 - 0.4) * 0.076128)[s$nb_vehicules == 1]
s$hausse_essence[s$nb_vehicules == 2] <<- (((s$fuel_2_1!='Diesel')*2/3 + (s$fuel_2_2!='Diesel')/3) * (s$conso/100) * s$km * 1.45 * (1 - 0.4) * 0.076128)[s$nb_vehicules == 2]
s$hausse_carburants <<- s$hausse_diesel + s$hausse_essence
label(s$hausse_carburants) <<- "hausse_carburant: Hausse des dépenses de carburants simulées pour le ménage, suite à la taxe (élasticité de 0.4) (hausse_diesel + hausse_essence)"
s$hausse_depenses <<- s$hausse_carburants + s$hausse_chauffage
s$diesel <<- (!is.na(s$fuel_1) & (s$fuel_1=='Diesel')) | (!is.na(s$fuel_2_2) & ((s$fuel_2_1=='Diesel') | (s$fuel_2_2=='Diesel')))
s$essence <<- (!is.na(s$fuel_1) & (s$fuel_1=='Essence')) | (!is.na(s$fuel_2_2) & ((s$fuel_2_1=='Essence') | (s$fuel_2_2=='Essence')))
label(s$diesel) <<- "diesel: Indicatrice de la possession d'un véhicule diesel par le ménage (fuel_1 ou fuel_2_1 ou fuel_2_2 = 'Diesel')"
label(s$essence) <<- "essence: Indicatrice de la possession d'un véhicule à essence par le ménage (fuel_1 ou fuel_2_1 ou fuel_2_2 = 'Essence')"
s$simule_gain <<- 16.1 + s$nb_adultes * 110 - s$hausse_depenses
s$simule_gain_repondant <<- 16.1 + 110 - s$hausse_depenses
label(s$simule_gain) <<- "simule_gain: Gain net annuel simulé pour le ménage du répondant suite à une hausse de taxe carbone compensée: 16.1 + nb_adultes * 110 - hausse_depenses"
label(s$simule_gain_repondant) <<- "simule_gain_repondant: Gain net annuel simulé pour le répondant (sans tenir compte du potentiel versement reçu par les autres adultes du ménage) suite à une hausse de taxe carbone compensée: 116.1 - hausse_depenses"
s$simule_gain_cible <<- s$versement_cible - s$hausse_depenses
s$simule_gain_cible_sans_conjoint <<- s$versement_cible - s$hausse_depenses
label(s$simule_gain_cible) <<- "simule_gain_cible: Gain net simulé pour le ménage du répondant suite à une hausse de taxe carbone avec compensation ciblée: versement_cible - hausse_depenses"
label(s$simule_gain_cible_sans_conjoint) <<- "simule_gain_cible_sans_conjoint: Gain net simulé pour le répondant (sans tenir compte du potentiel versement reçu par son conjoint) suite à une hausse de taxe carbone avec compensation ciblée: versement_cible - hausse_depenses"
s$progressivite[!is.na(s$progressivite_feedback_sans_info)] <<- s$progressivite_feedback_sans_info[!is.na(s$progressivite_feedback_sans_info)]
s$progressivite[!is.na(s$progressivite_feedback_avec_info)] <<- s$progressivite_feedback_avec_info[!is.na(s$progressivite_feedback_avec_info)]
s$progressivite[!is.na(s$progressivite_progressif)] <<- s$progressivite_progressif[!is.na(s$progressivite_progressif)]
label(s$progressivite) <<- "progressivite: ~ Une hausse de la taxe carbone compensée avantagerait les plus modestes (réunion des trois variante_progressivite: prog/fb_info/fb_no_info où seule fb_no_info est sans information préalable sur la progressivité) - Q206-208"
s$variante_progressivite[!is.na(s$progressivite_feedback_sans_info)] <<- "fb_no_info"
s$variante_progressivite[!is.na(s$progressivite_feedback_avec_info)] <<- "fb_info"
s$variante_progressivite[!is.na(s$progressivite_progressif)] <<- "prog"
label(s$variante_progressivite) <<- "variante_progressivite: prog/fb_info/fb_no_info Variante aléatoire du bloc de questions où figure 'progressivite', seulement pour apres_modifs=T. prog: info sur la progressivité / fb: feedback sur le statut gagnant/perdant simulé, info/no_info: avec/sans info sur la progressivité de la mesure"
s$info_progressivite <<- FALSE
s$info_progressivite[s$variante_taxe_info=='p' | s$variante_progressivite=='fb_info'] <<- T
label(s$info_progressivite) <<- "info_progressivite: Indicatrice qu'a été montrée l'information que la hausse de la taxe carbone compensée avantagerait les plus modestes"
s$age_18_24 <<- 1*(s$age == '18 à 24 ans')
s$age_25_34 <<- 1*(s$age == '25 à 34 ans')
s$age_35_49 <<- 1*(s$age == '35 à 49 ans')
s$age_50_64 <<- 1*(s$age == '50 à 64 ans')
s$age_65_plus <<- 1*(s$age == '65 ans ou plus')
s$score_ges <<- 1 * (s$ges_CO2 == TRUE) + 1*(s$ges_CH4 == TRUE) + 1*(s$ges_O2 == FALSE) + 1*(s$ges_pm == FALSE)
label(s$score_ges) <<- "score_ges: Somme des bonnes réponses au questionnaire gaz à effet de serre (ges_O2/CH4/pm/CO2)"
s$score_climate_call <<- 1*(s$ges_avion == TRUE) + 1*(s$ges_boeuf == TRUE) + 1*(s$ges_nucleaire == FALSE)
label(s$score_climate_call) <<- "score_climate_call: Somme des bonnes réponses au questionnaire Climate Call (avion-train / boeuf-pates / nucleaire-eolien) ges_avion/boeuf/nucleaire"
s$duree_info[s$info_CC==1 & s$info_PM==1] <<- s$duree_info_CC_PM[s$info_CC==1 & s$info_PM==1]
s$duree_info[s$info_CC==0 & s$info_PM==1] <<- s$duree_info_PM[s$info_CC==0 & s$info_PM==1]
s$duree_info[s$info_CC==1 & s$info_PM==0] <<- s$duree_info_CC[s$info_CC==1 & s$info_PM==0]
s$duree_info[s$info_CC==0 & s$info_PM==0] <<- s$duree_no_info[s$info_CC==0 & s$info_PM==0]
label(s$duree_info) <<- "duree_info: Temps de soumission - Ancrage (information procurée ou non au début sur changement climatique ou particules fines) (duree_info_CC/PM/CC_PM/no_info)"
for (v in c("autonomie", "priorite", "etats", "global", "trop")) {
s[[paste("aide_non", v, sep="_")]] <<- NA
s[[paste("aide_non", v, sep="_")]][!is.na(s$transferts_inter_info) & s$transferts_inter_info==T & s$aide_2p==T] <<- s[[paste("aide_non", v, "i", sep="_")]]
s[[paste("aide_non", v, sep="_")]][!is.na(s$transferts_inter_info) & s$transferts_inter_info==FALSE & s$aide_2p==T] <<- s[[paste("aide_non", v, "ni", sep="_")]]
label(s[[paste("aide_non", v, sep="_")]]) <<- Label(s[[paste("aide_non", v, "i", sep="_")]])
}
for (i in 0:10) s[[paste('dep', i, 'en_position', sep='_')]] <<- NA
for (i in 0:10) {
for (o in 1:nrow(s)) {
j <- s[[paste('en_position', i, sep='_')]][o]
if (!is.na(j)) s[[paste('dep', j, 'en_position', sep='_')]][o] <<- i
}
}
# TODO: remove useless colonnes, such as _f/_p
# TODO: qualité, connaissances CC, opinions CC, gilets jaunes, duree_info, perte_relative_tva/fuel, si_/non_, gaz-fioul -> T/F, transferts_inter/variante, enfant
}
# convert_s()
# prepare_s(exclude_screened=FALSE, exclude_speeder=FALSE, only_finished=FALSE)
# sa <- s
# prepare_s()
weighting_s <- function(data, printWeights = T) { # cf. google sheet
d <- data
d$region[is.na(d$region)] <- 'autre'
d$taille_agglo <- as.numeric(d$taille_agglo)
# d$csp <- factor(d$csp)
# d$region <- factor(d$region)
# levels(d$csp) <- c(levels(d$csp),"missing")
# levels(d$region) <- c(levels(d$region),"missing")
# levels(d$taille_agglo) <- c(levels(d$taille_agglo),"missing")
# levels(d$sexe) <- c(levels(d$sexe),"missing")
# d$csp[is.na(d$csp) | d$csp=="" | d$csp=="NSP"] <- "missing"
# d$taille_agglo[is.na(d$taille_agglo)] <- "missing"
# d$sexe[d$sexe=="" | d$sexe=="Autre"] <- "missing"
unweigthed <- svydesign(ids=~1, data=d)
sexe <- data.frame(sexe = c("Féminin", "Masculin"), Freq=nrow(d)*c(0.516,0.484)) # http://www.insee.fr/fr/themes/detail.asp?ref_id=bilan-demo&reg_id=0&page=donnees-detaillees/bilan-demo/pop_age2.htm
csp <- data.frame(csp = c("Inactif", "Ouvrier", "Cadre", "Indépendant", "Intermédiaire", "Retraité", "Employé", "Agriculteur"),
Freq=nrow(d)*c(0.1244,0.1214,0.0943,0.0341,0.1364,0.3279,0.1535,0.008))
region <- data.frame(region = c("autre","ARA", "Est", "Nord", "IDF", "Ouest", "SO", "Occ", "Centre", "PACA"),
Freq=nrow(d)*c(0.001,0.124,0.129,0.093,0.189,0.103,0.093,0.091,0.099,0.078))
age <- data.frame(age = c("18-24", "25-34", "35-49", "50-64", "65+"),
Freq=nrow(d)*c(0.117,0.147,0.242,0.242,0.252)) # Données/estim-pop-reg-sexe...
taille_agglo <- data.frame(taille_agglo = c(1:5), Freq=nrow(d)*c(0.2166,0.1710,0.1408,0.3083,0.1633))
# revenu <- data.frame(revenu = c(), Freq=nrow(d)*c())
diplome4 <- data.frame(diplome4 = c("Aucun diplôme ou brevet", "CAP ou BEP", "Baccalauréat", "Supérieur"),  # http://webcache.googleusercontent.com/search?q=cache:rUvf6u0uCnEJ:www.insee.fr/fr/themes/tableau.asp%3Freg_id%3D0%26ref_id%3Dnattef07232+&cd=1&hl=fr&ct=clnk&gl=fr&lr=lang_en%7Clang_es%7Clang_fr
Freq=nrow(d)*c(0.301, 0.246, 0.168, 0.285))
if (length(which(d$taille_agglo==""))>0) raked <- rake(design= unweigthed, sample.margins = list(~sexe,~diplome4,~region,~csp,~age),
population.margins = list(sexe,diplome4,region,csp,age))
else raked <- rake(design= unweigthed, sample.margins = list(~sexe,~diplome4,~taille_agglo,~region,~csp,~age),
population.margins = list(sexe,diplome4,taille_agglo,region,csp,age))
if (printWeights) {    print(summary(weights(raked))  )
print(sum( weights(raked) )^2/(length(weights(raked))*sum(weights(raked)^2)) ) # <0.5 : problématique
print( length(which(weights(raked)<0.25 | weights(raked)>4))/ length(weights(raked)))
}
return(weights(trimWeights(raked, lower=0.25, upper=4, strict=TRUE)))
}
prepare_s <- function(exclude_speeder=TRUE, exclude_screened=TRUE, only_finished=TRUE) { # , exclude_quotas_full=TRUE
# setwd("/home/adrien/Google Drive/Economie/Travail/enquete/codes")
# setwd("C:/Users/a.fabre/Google Drive/Economie/Travail/enquete/codes")
# pes <<- read.csv("fin.csv", sep=";")
# s <<- read.delim("politique.tsv", fileEncoding="UTF-16")
# f_data <- read.delim("fin.tsv", fileEncoding="UTF-16")
s <<- read_csv("survey.csv")
for (i in 1:length(s)) { label(s[[i]]) <<- toString(s[i][[1]][1]) } # Use the first line to create variable names labels then remove it - to run only once
s <<- s[-c(1,2),c(1:91,94:115,117:235,241,247:310,313:319,92,93,116,311,312,236:240,242:246)]
# if (exclude_screened) { s <<- s[s$Q_TerminateFlag=="",] } # remove Screened
# if (exclude_speeder) { s <<- s[n(s$`Duration (in seconds)`) > 540,] } # remove speedest
# if (exclude_quotas_full) { s <<- s[s[101][[1]] %in% c(1:5),]  } # remove those with a problem for the taille d'agglo
# if (exclude_quotas_full) { s <<- s[s$Q_TerminateFlag=="",]  } # remove those with a problem for the taille d'agglo
# if (only_finished) { s <<- s[as.vector(s$Finished)=="True",] }
relabel_and_rename_s()
print(paste(length(which(s$exclu=="QuotaMet")), "QuotaMet"))
s$fini[s$exclu=="QuotaMet" | is.na(s$revenu)] <<- "False" # To check the number of QuotaMet that shouldn't have incremented the quota, comment this line and: decrit(s$each_strate[s$exclu=="QuotaMet" & s$csp=="Employé" & !grepl("2019-03-04 07", s$date)])
if (exclude_screened) { s <<- s[is.na(s$exclu),] } # remove Screened
if (exclude_speeder) { s <<- s[as.numeric(as.vector(s$duree)) > 420,] } # remove speedest /!\ was 540 before 22-02-11:00 (EST Coast time)
# if (exclude_quotas_full) { s <<- s[s[101][[1]] %in% c(1:5),]  } # remove those with a problem for the taille d'agglo
# if (exclude_quotas_full) { s <<- s[s$Q_TerminateFlag=="",]  } # remove those with a problem for the taille d'agglo
if (only_finished) { s <<- s[s$fini=="True",] }
print(paste(length(which(is.na(s$taille_agglo))), "tailles d'agglo sont manquantes"))
s <<- s[!is.na(s$taille_agglo),]
convert_s() # TODO: check the Warnings
s$sample <<- "a"
s$sample[s$fini=="True"] <<- "e"
s$sample[s$fini=="True" & n(s$duree) > 540] <<- "p"
s$sample[s$fini=="True" & n(s$duree) > 540 & s$test_qualite=='Un peu'] <<- "f" # "q"? excluded because out of quotas
s$sample[s$fini=="True" & n(s$duree) > 540 & s$exclu==""] <<- "r"
# s <<- s[-which(is.element(s$id, s$id[duplicated(s$id)]) & !duplicated(s$id)),] # TODO: check duplicates
s$weight <<- weighting_s(s)
}
prepare_s(exclude_screened=FALSE, exclude_speeder=FALSE, only_finished=T) # TODO: let only_finished = FALSE
sa <- s
# prepare_s(exclude_screened=FALSE, exclude_speeder=FALSE)
# se <- s
# prepare_s(exclude_screened=FALSE)
# sp <- s
prepare_s()
write.csv(s, "survey_prepared.csv")
decrit(s$gain_chauffage_echelle)
s$update_correct <- (s$simule_gagnant==1 & s$gagnant_feedback_categorie=='Gagnant' & s$gagnant_categorie!='Gagnant')
+ (s$simule_gagnant==0 & s$gagnant_feedback_categorie=='Perdant' & s$gagnant_categorie!='Perdant')
- (s$simule_gagnant==1 & s$gagnant_feedback_categorie=='Perdant' & s$gagnant_categorie!='Perdant')
- (s$simule_gagnant==0 & s$gagnant_feedback_categorie=='Gagnant' & s$gagnant_categorie!='Gagnant')
s$update_correct_large <- (s$simule_gagnant==1 & ((s$gagnant_feedback_categorie=='Gagnant' & s$gagnant_categorie!='Gagnant') | (s$gagnant_feedback_categorie!='Perdant' & s$gagnant_categorie=='Perdant')))
+ (s$simule_gagnant==0 & ((s$gagnant_feedback_categorie=='Perdant' & s$gagnant_categorie!='Perdant') | (s$gagnant_feedback_categorie!='Gagnant' & s$gagnant_categorie=='Gagnant')))
- (s$simule_gagnant==1 & ((s$gagnant_feedback_categorie=='Perdant' & s$gagnant_categorie!='Perdant') | (s$gagnant_feedback_categorie!='Gagnant' & s$gagnant_categorie=='Gagnant')))
- (s$simule_gagnant==0 & ((s$gagnant_feedback_categorie=='Gagnant' & s$gagnant_categorie!='Gagnant') | (s$gagnant_feedback_categorie!='Perdant' & s$gagnant_categorie=='Perdant')))
s$update_correct <- ((s$simule_gagnant==1 & s$gagnant_feedback_categorie=='Gagnant' & s$gagnant_categorie!='Gagnant')
+ (s$simule_gagnant==0 & s$gagnant_feedback_categorie=='Perdant' & s$gagnant_categorie!='Perdant')
- (s$simule_gagnant==1 & s$gagnant_feedback_categorie=='Perdant' & s$gagnant_categorie!='Perdant')
- (s$simule_gagnant==0 & s$gagnant_feedback_categorie=='Gagnant' & s$gagnant_categorie!='Gagnant'))
s$update_correct_large <- ((s$simule_gagnant==1 & ((s$gagnant_feedback_categorie=='Gagnant' & s$gagnant_categorie!='Gagnant') | (s$gagnant_feedback_categorie!='Perdant' & s$gagnant_categorie=='Perdant')))
+ (s$simule_gagnant==0 & ((s$gagnant_feedback_categorie=='Perdant' & s$gagnant_categorie!='Perdant') | (s$gagnant_feedback_categorie!='Gagnant' & s$gagnant_categorie=='Gagnant')))
- (s$simule_gagnant==1 & ((s$gagnant_feedback_categorie=='Perdant' & s$gagnant_categorie!='Perdant') | (s$gagnant_feedback_categorie!='Gagnant' & s$gagnant_categorie=='Gagnant')))
- (s$simule_gagnant==0 & ((s$gagnant_feedback_categorie=='Gagnant' & s$gagnant_categorie!='Gagnant') | (s$gagnant_feedback_categorie!='Perdant' & s$gagnant_categorie=='Perdant'))))
decrit(s$update_correct)
decrit(s$update_correct_large)
0.62*0.12*0.77+0.23*0.21*0.77+0.07*0.85*0.23+0.17*0.40*0.23
summary(lm(update_correct_large ~ I(simule_gain - gain)*as.factor(gain), data=s, weights = s$weight))
proba_simule_gagnant_quand_cru_gagnant <- sum(s$weight[s$simule_gagnant==1 & s$gagnant_categorie=='Gagnant'])/sum(s$weight[s$gagnant_categorie=='Gagnant'])
proba_simule_gagnant_quand_cru_gagnant
decrit(s$simule_gagnant)
proba_simule_gagnant_quand_cru_gagnant <- sum(s$weight[s$simule_gagnant==1 & s$gagnant_categorie=='Gagnant' & s$variante_taxe_info=='f'])/sum(s$weight[s$gagnant_categorie=='Gagnant' & s$variante_taxe_info=='f'])
proba_simule_gagnant_quand_cru_gagnant
proba_simule_gagnant_quand_cru_gagnant <- (sum(s$weight[s$simule_gagnant==1 & s$gagnant_categorie=='Gagnant' & s$variante_taxe_info=='f']) # 0.88
/sum(s$weight[s$gagnant_categorie=='Gagnant' & s$variante_taxe_info=='f']))
proba_simule_perdant_quand_cru_perdant <- (sum(s$weight[s$simule_gagnant==0 & s$gagnant_categorie=='Perdant' & s$variante_taxe_info=='f']) # 0.88
/sum(s$weight[s$gagnant_categorie=='Perdant' & s$variante_taxe_info=='f']))
proba_simule_perdant_quand_cru_perdant
proba_simule_gagnan <- sum(s$weight[s$simule_gagnant==1 & s$variante_taxe_info=='f'])/sum(s$weight[s$variante_taxe_info=='f'])
proba_simule_gagnan
proba_simule_perdant <- sum(s$weight[s$simule_gagnant==0 & s$variante_taxe_info=='f'])/sum(s$weight[s$variante_taxe_info=='f']) # 0.77
proba_simule_perdant
proba_cru_gagnant <- sum(s$weight[s$gagnant_categorie=='Gagnant' & s$variante_taxe_info=='f'])/sum(s$weight[s$variante_taxe_info=='f'])
proba_cru_gagnant
proba_cru_perdant <- sum(s$weight[s$gagnant_categorie=='Perdant' & s$variante_taxe_info=='f'])/sum(s$weight[s$variante_taxe_info=='f']) # 0.13
proba_cru_perdant
proba_cru_gagnant_quand_simule_gagnant <- (sum(s$weight[s$simule_gagnant==1 & s$gagnant_categorie=='Gagnant' & s$variante_taxe_info=='f']) # 0.88
/sum(s$weight[s$simule_gagnant==1 & s$variante_taxe_info=='f']))
proba_cru_perdant_quand_simule_perdant <- (sum(s$weight[s$simule_gagnant==0 & s$gagnant_categorie=='Perdant' & s$variante_taxe_info=='f']) # 0.28
/sum(s$weight[s$simule_gagnant==0 & s$variante_taxe_info=='f']))
proba_cru_gagnant_quand_simule_gagnant
proba_cru_perdant_quand_simule_perdant
proba_gagnant_coherente_Bayes <- proba_cru_gagnant_quand_simule_gagnant*proba_simule_gagnant/proba_simule_gagnant_quand_cru_gagnant
proba_gagner <- 0.70
proba_perdre <- 0.30
proba_simule_gagnant <- sum(s$weight[s$simule_gagnant==1 & s$variante_taxe_info=='f'])/sum(s$weight[s$variante_taxe_info=='f']) # 0.77
proba_simule_perdant <- sum(s$weight[s$simule_gagnant==0 & s$variante_taxe_info=='f'])/sum(s$weight[s$variante_taxe_info=='f']) # 0.23
proba_simule_gagnant_quand_cru_gagnant <- (sum(s$weight[s$simule_gagnant==1 & s$gagnant_categorie=='Gagnant' & s$variante_taxe_info=='f']) # 0.88
/sum(s$weight[s$gagnant_categorie=='Gagnant' & s$variante_taxe_info=='f']))
proba_simule_perdant_quand_cru_perdant <- (sum(s$weight[s$simule_gagnant==0 & s$gagnant_categorie=='Perdant' & s$variante_taxe_info=='f']) # 0.28
/sum(s$weight[s$gagnant_categorie=='Perdant' & s$variante_taxe_info=='f']))
proba_cru_gagnant_quand_simule_gagnant <- (sum(s$weight[s$simule_gagnant==1 & s$gagnant_categorie=='Gagnant' & s$variante_taxe_info=='f']) # 0.15
/sum(s$weight[s$simule_gagnant==1 & s$variante_taxe_info=='f']))
proba_cru_perdant_quand_simule_perdant <- (sum(s$weight[s$simule_gagnant==0 & s$gagnant_categorie=='Perdant' & s$variante_taxe_info=='f']) # 0.78
/sum(s$weight[s$simule_gagnant==0 & s$variante_taxe_info=='f']))
proba_cru_gagnant <- sum(s$weight[s$gagnant_categorie=='Gagnant' & s$variante_taxe_info=='f'])/sum(s$weight[s$variante_taxe_info=='f']) # 0.13
proba_cru_perdant <- sum(s$weight[s$gagnant_categorie=='Perdant' & s$variante_taxe_info=='f'])/sum(s$weight[s$variante_taxe_info=='f']) # 0.65
proba_gagnant_coherente_Bayes <- proba_cru_gagnant_quand_simule_gagnant*proba_simule_gagnant/proba_simule_gagnant_quand_cru_gagnant
proba_gagnant_coherente_Bayes
proba_perdant_coherente_Bayes <- proba_cru_perdant_quand_simule_perdant*proba_simule_perdant/proba_simule_perdant_quand_cru_perdant # 0.13
proba_perdant_coherente_Bayes
proba_gagnant_coherente_Bayes <- (5/6)*proba_simule_gagnant/proba_simule_gagnant_quand_cru_gagnant # 0.13
proba_perdant_coherente_Bayes <- (5/6)*proba_simule_perdant/proba_simule_perdant_quand_cru_perdant # 0.65
proba_gagnant_coherente_Bayes
proba_perdant_coherente_Bayes
proba_simule_gagnant
proba_simule_perdant
proba_simule_gagnant_quand_cru_gagnant
proba_simule_perdant_quand_cru_perdant
proba_simule_non_perdant_quand_cru_non_perdant <- (sum(s$weight[s$simule_gagnant==0 & s$gagnant_categorie!='Gagnant' & s$variante_taxe_info=='f']) # 0.28
/sum(s$weight[s$gagnant_categorie!='Gagnant' & s$variante_taxe_info=='f']))
proba_simule_non_perdant_quand_cru_non_perdant
proba_simule_non_gagnant_quand_cru_non_gagnant <- (sum(s$weight[s$simule_gagnant==1 & s$gagnant_categorie!='Gagnant' & s$variante_taxe_info=='f']) # 0.88
/sum(s$weight[s$gagnant_categorie!='Gagnant' & s$variante_taxe_info=='f']))
proba_simule_non_gagnant_quand_cru_non_gagnant
proba_simule_non_perdant_quand_cru_non_perdant <- (sum(s$weight[s$simule_gagnant==0 & s$gagnant_categorie!='Perdant' & s$variante_taxe_info=='f']) # 0.25
/sum(s$weight[s$gagnant_categorie!='Perdant' & s$variante_taxe_info=='f']))
proba_simule_non_perdant_quand_cru_non_perdant
proba_non_gagnant_coherente_Bayes <- (5/6)*proba_simule_perdant/proba_simule_non_gagnant_quand_cru_non_gagnant # 0.72
proba_non_gagnant_coherente_Bayes
proba_gagnant_coherente_Bayes+proba_non_gagnant_coherente_Bayes
proba_non_perdant_coherente_Bayes <- (5/6)*proba_simule_perdant/proba_simule_non_perdant_quand_cru_non_perdant # 0.70
proba_non_perdant_coherente_Bayes
proba_simule_non_gagnant_quand_cru_non_gagnant <- (sum(s$weight[s$simule_gagnant==0 & s$gagnant_categorie!='Gagnant' & s$variante_taxe_info=='f']) # 0.74
/sum(s$weight[s$gagnant_categorie!='Gagnant' & s$variante_taxe_info=='f']))
proba_simule_non_perdant_quand_cru_non_perdant <- (sum(s$weight[s$simule_gagnant==1 & s$gagnant_categorie!='Perdant' & s$variante_taxe_info=='f']) # 0.15
/sum(s$weight[s$gagnant_categorie!='Perdant' & s$variante_taxe_info=='f']))
proba_non_gagnant_coherente_Bayes <- (5/6)*proba_simule_perdant/proba_simule_non_gagnant_quand_cru_non_gagnant # 0.26
proba_non_perdant_coherente_Bayes <- (5/6)*proba_simule_perdant/proba_simule_non_perdant_quand_cru_non_perdant # 0.70
proba_non_gagnant_coherente_Bayes
proba_non_perdant_coherente_Bayes <- (5/6)*proba_simule_perdant/proba_simule_non_perdant_quand_cru_non_perdant # 0.70
proba_non_perdant_coherente_Bayes
proba_perdant_coherente_Bayes
proba_non_perdant_coherente_Bayes
proba_simule_non_perdant_quand_cru_non_perdant
proba_simule_non_gagnant_quand_cru_non_gagnant <- (sum(s$weight[s$simule_gagnant==0 & s$gagnant_categorie!='Gagnant' & s$variante_taxe_info=='f']) # 0.74
/sum(s$weight[s$gagnant_categorie!='Gagnant' & s$variante_taxe_info=='f']))
proba_simule_non_gagnant_quand_cru_non_gagnant
proba_non_perdant_coherente_Bayes
proba_non_perdant_coherente_Bayes <- (5/6)*proba_simule_perdant/proba_simule_non_perdant_quand_cru_non_perdant # 0.23
proba_non_perdant_coherente_Bayes
proba_perdant_coherente_Bayes <- (5/6)*proba_simule_perdant/proba_simule_perdant_quand_cru_perdant # 0.70
proba_perdant_coherente_Bayes
probas <- c()
for (cru in c('Perdant', 'Gagnant')) {
probas[paste('cru', cru, sep='_')] <- length(which(s$gagnant_categorie==cru & s$variante_taxe_info=='f'))/length(which(s$variante_taxe_info=='f'))
probas[paste('cru_non', cru, sep='_')] <- length(which(s$gagnant_categorie!=cru & s$variante_taxe_info=='f'))/length(which(s$variante_taxe_info=='f'))
for (sim in c(0, 1)) {
sim_nom <- 'perdant'
if (sim==1) sim_nom <- 'gagnant'
probas[paste('simule', sim_nom, sep='_')] <- length(which(s$simule_gagnant==sim & s$variante_taxe_info=='f'))/length(which(s$variante_taxe_info=='f'))
probas[paste('simule', sim_nom, 'quand_cru', cru, sep='_')] <- (length(which(s$variante_taxe_info=='f' & s$gagnant_categorie==cru & s$simule_gagnant==sim))/
length(which(s$variante_taxe_info=='f' & s$gagnant_categorie==cru)))
probas[paste('cru', cru, 'quand_simule', sim_nom, sep='_')] <- (length(which(s$variante_taxe_info=='f' & s$gagnant_categorie==cru & s$simule_gagnant==sim))/
length(which(s$variante_taxe_info=='f' & s$simule_gagnant==sim)))
}
}
probas['simule_perdant_quand_cru_perdant']
probas
lower('A')
tolower('A')
probas <- c()
for (cru in c('Perdant', 'Gagnant')) {
probas[paste('cru', tolower(cru), sep='_')] <- length(which(s$gagnant_categorie==cru & s$variante_taxe_info=='f'))/length(which(s$variante_taxe_info=='f'))
probas[paste('cru_non', tolower(cru), sep='_')] <- length(which(s$gagnant_categorie!=cru & s$variante_taxe_info=='f'))/length(which(s$variante_taxe_info=='f'))
for (sim in c(0, 1)) {
sim_nom <- 'perdant'
if (sim==1) sim_nom <- 'gagnant'
probas[paste('simule', sim_nom, sep='_')] <- length(which(s$simule_gagnant==sim & s$variante_taxe_info=='f'))/length(which(s$variante_taxe_info=='f'))
probas[paste('simule', sim_nom, 'quand_cru', tolower(cru), sep='_')] <- (length(which(s$variante_taxe_info=='f' & s$gagnant_categorie==cru & s$simule_gagnant==sim))/
length(which(s$variante_taxe_info=='f' & s$gagnant_categorie==cru)))
probas[paste('cru', tolower(cru), 'quand_simule', sim_nom, sep='_')] <- (length(which(s$variante_taxe_info=='f' & s$gagnant_categorie==cru & s$simule_gagnant==sim))/
length(which(s$variante_taxe_info=='f' & s$simule_gagnant==sim)))
}
}
probas['simule_perdant_quand_cru_perdant']
probas['gagnant_coherente_Bayes'] <- (5/6)*probas['simule_gagnant']/probas['simule_gagnant_quand_cru_gagnant'] # 0.72
probas['gagnant_coherente_Bayes'] <- (5/6)*probas['simule_gagnant']/probas['simule_gagnant_quand_cru_gagnant'] # 0.72
probas_gagnant_coherente_Bayes <- (5/6)*probas['simule_gagnant']/probas['simule_gagnant_quand_cru_gagnant'] # 0.72
probas_gagnant_coherente_Bayes
proba_non_gagnant_coherente_Bayes <- (5/6)*probas['simule_perdant']/probas['simule_non_gagnant_quand_cru_non_gagnant'] # 0.77
proba_non_gagnant_coherente_Bayes
as.formula(paste(s$simule_gagnant, '==', 1))
as.formula(paste(simule_gagnant, '==', 1))
probas <- c()
for (cru in c('Perdant', 'Gagnant')) {
probas[paste('cru', tolower(cru), sep='_')] <- length(which(s$gagnant_categorie==cru & s$variante_taxe_info=='f'))/length(which(s$variante_taxe_info=='f'))
probas[paste('cru_non', tolower(cru), sep='_')] <- length(which(s$gagnant_categorie!=cru & s$variante_taxe_info=='f'))/length(which(s$variante_taxe_info=='f'))
for (sim in c(0, 1)) {
sim_nom <- 'perdant'
if (sim==1) sim_nom <- 'gagnant'
for (i in c('', 'non')) {
for (j in c('', '_non')) {
probas[gsub('__', '_', paste('simule', i, sim_nom, sep='_'))] <- (length(which((j=='non' | s$simule_gagnant==sim) & (j=='' | s$simule_gagnant!=sim) &
s$variante_taxe_info=='f'))/length(which(s$variante_taxe_info=='f')))
probas[gsub('__', '_', paste('simule', i, sim_nom, 'quand_cru', j, tolower(cru), sep='_'))] <- (length(which(s$variante_taxe_info=='f' &
(i=='non' | s$gagnant_categorie==cru) & (j=='non' | s$simule_gagnant==sim) & (i=='' | s$gagnant_categorie!=cru) & (j=='' | s$simule_gagnant!=sim)))/
length(which(s$variante_taxe_info=='f' & (i=='non' | s$gagnant_categorie==cru) & (i=='' | s$gagnant_categorie!=cru))))
probas[gsub('__', '_', paste('cru', i, tolower(cru), 'quand_simule', j, sim_nom, sep='_'))] <- (length(which(s$variante_taxe_info=='f' &
(i=='non' | s$gagnant_categorie==cru) & (j=='non' | s$simule_gagnant==sim) & (i=='' | s$gagnant_categorie!=cru) & (j=='' | s$simule_gagnant!=sim)))/
length(which(s$variante_taxe_info=='f' & (j=='non' | s$simule_gagnant==sim) & (j=='' | s$simule_gagnant!=sim))))
}
}
}
}
# Hypothèses: ils nous croient sur le 5/6, connaissent la proba de (simulés) gagnants et la proba conditionnelle de simulés gagnants lorsque subjectivement
probas
probas['cru_gagnant']
probas['cru_non_gagnant']
probas['simule_non_gagnant']
probas['simule_gagnant']
proba_simule_gagnant
probas['cru_gagnant_quand_simule_gagnant']
proba_cru_gagnant_quand_simule_gagnant
proba_simule_gagnant_quand_cru_gagnant
probas['simule_gagnant_quand_cru_gagnant']
probas <- c()
for (cru in c('Perdant', 'Gagnant')) {
probas[paste('cru', tolower(cru), sep='_')] <- length(which(s$gagnant_categorie==cru & s$variante_taxe_info=='f'))/length(which(s$variante_taxe_info=='f'))
probas[paste('cru_non', tolower(cru), sep='_')] <- length(which(s$gagnant_categorie!=cru & s$variante_taxe_info=='f'))/length(which(s$variante_taxe_info=='f'))
for (sim in c(0, 1)) {
sim_nom <- 'perdant'
if (sim==1) sim_nom <- 'gagnant'
for (i in c('', 'non')) {
for (j in c('', '_non')) {
probas[gsub('__', '_', paste('simule', j, sim_nom, sep='_'))] <- (length(which((j=='non' | s$simule_gagnant==sim) & (j=='' | s$simule_gagnant!=sim) &
s$variante_taxe_info=='f'))/length(which(s$variante_taxe_info=='f'))) # TODO
probas[gsub('__', '_', paste('simule', i, sim_nom, 'quand_cru', j, tolower(cru), sep='_'))] <- (length(which(s$variante_taxe_info=='f' &
(i=='non' | s$gagnant_categorie==cru) & (j=='non' | s$simule_gagnant==sim) & (i=='' | s$gagnant_categorie!=cru) & (j=='' | s$simule_gagnant!=sim)))/
length(which(s$variante_taxe_info=='f' & (i=='non' | s$gagnant_categorie==cru) & (i=='' | s$gagnant_categorie!=cru))))
probas[gsub('__', '_', paste('cru', i, tolower(cru), 'quand_simule', j, sim_nom, sep='_'))] <- (length(which(s$variante_taxe_info=='f' &
(i=='non' | s$gagnant_categorie==cru) & (j=='non' | s$simule_gagnant==sim) & (i=='' | s$gagnant_categorie!=cru) & (j=='' | s$simule_gagnant!=sim)))/
length(which(s$variante_taxe_info=='f' & (j=='non' | s$simule_gagnant==sim) & (j=='' | s$simule_gagnant!=sim))))
}
}
}
}
probas['simule_gagnant']
probas
probas['cru_perdant_quand_simule_perdant']
probas['simule_perdant_quand_cru_perdant']
proba_simule_perdant <- sum(s$weight[s$simule_gagnant==0 & s$variante_taxe_info=='f'])/sum(s$weight[s$variante_taxe_info=='f']) # 0.23
proba_cru_perdant
probas['cru_perdant']
probas <- c()
for (cru in c('Perdant', 'Gagnant')) {
probas[paste('cru', tolower(cru), sep='_')] <- length(which(s$gagnant_categorie==cru & s$variante_taxe_info=='f'))/length(which(s$variante_taxe_info=='f'))
probas[paste('cru_non', tolower(cru), sep='_')] <- length(which(s$gagnant_categorie!=cru & s$variante_taxe_info=='f'))/length(which(s$variante_taxe_info=='f'))
for (sim in c(0, 1)) {
sim_nom <- 'perdant'
if (sim==1) sim_nom <- 'gagnant'
for (i in c('', 'non')) {
for (j in c('', 'non')) {
probas[gsub('__', '_', paste('simule', j, sim_nom, sep='_'))] <- (length(which((j=='non' | s$simule_gagnant==sim) & (j=='' | s$simule_gagnant!=sim) &
s$variante_taxe_info=='f'))/length(which(s$variante_taxe_info=='f'))) # TODO
probas[gsub('__', '_', paste('simule', i, sim_nom, 'quand_cru', j, tolower(cru), sep='_'))] <- (length(which(s$variante_taxe_info=='f' &
(i=='non' | s$gagnant_categorie==cru) & (j=='non' | s$simule_gagnant==sim) & (i=='' | s$gagnant_categorie!=cru) & (j=='' | s$simule_gagnant!=sim)))/
length(which(s$variante_taxe_info=='f' & (i=='non' | s$gagnant_categorie==cru) & (i=='' | s$gagnant_categorie!=cru))))
probas[gsub('__', '_', paste('cru', i, tolower(cru), 'quand_simule', j, sim_nom, sep='_'))] <- (length(which(s$variante_taxe_info=='f' &
(i=='non' | s$gagnant_categorie==cru) & (j=='non' | s$simule_gagnant==sim) & (i=='' | s$gagnant_categorie!=cru) & (j=='' | s$simule_gagnant!=sim)))/
length(which(s$variante_taxe_info=='f' & (j=='non' | s$simule_gagnant==sim) & (j=='' | s$simule_gagnant!=sim))))
}
}
}
}
probas
probas['cru_perdant_quand_simule_perdant']
probas['cru_perdant']
probas['simule_perdant_quand_cru_perdant']
probas['simule_perdant']
proba_gagnant_coherente_Bayes <- (5/6)*probas['simule_gagnant']/probas['simule_gagnant_quand_cru_gagnant'] # 0.72
proba_non_gagnant_coherente_Bayes <- (5/6)*probas['simule_perdant']/probas['simule_non_gagnant_quand_cru_non_gagnant'] # 0.77
proba_gagnant_coherente_Bayes
proba_non_gagnant_coherente_Bayes
proba_non_gagnant_coherente_Bayes <- (5/6)*probas['simule_non_gagnant']/probas['simule_non_gagnant_quand_cru_non_gagnant'] # 0.77
proba_non_gagnant_coherente_Bayes
proba_non_perdant_coherente_Bayes <- (5/6)*probas['simule_non_perdant']/probas['simule_non_perdant_quand_cru_non_perdant'] # 0.23
proba_non_perdant_coherente_Bayes
proba_gagnant_coherente_Bayes
probas['cru_gagnant_quand_simule_gagnant']
probas['simule_gagnant']/probas['simule_gagnant_quand_cru_gagnant']
probas['simule_gagnant']/probas['cru_gagnant_quand_simule_gagnant']
probas['cru_gagnant_quand_simule_gagnant']
proba_non_perdant_coherente_Bayes <- (5/6)*probas['simule_non_perdant']/probas['simule_non_perdant_quand_cru_non_perdant'] # 0.76
probas['simule_gagnant']-proba_non_perdant_coherente_Bayes
probas['simule_gagnant']
probas['cru_non_perdant']
proba_gagnant_coherente_Bayes
proba_non_perdant_coherente_Bayes
