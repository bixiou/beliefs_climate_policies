# -*- coding: utf-8 -*-

# Compute households additional taxes after the policy (+50€/tCO2 on all energies except electricity)
# This will then be used to compute the revenue generated by the policy and find associated transfers

from __future__ import division


from sc_2_1_compute_adjusted_expenditures import adjusted_expenditures


# Set parameters
vat = 0.2
diesel_ticpe = 0.594 # €/l dans le code des douanes (art 265) en 2018
gasoline_ticpe = 0.6829 # €/l dans le code des douanes (art 265) en 2018
domestic_fuel_ticpe = 0.1562 # €/l dans le code des douanes (art 265) en 2018

additional_carbon_price = 50 # in euro per tCO2
diesel_carbon_intensity = 0.00265 # in tCO2 per liter (deduced from code des douanes art 265)
gasoline_carbon_intensity = 0.00229 # in tCO2 per liter (deduced from code des douanes art 265)
domestic_fuel_carbon_intensity = 0.00265 # in tCO2 per liter (deduced from code des douanes art 265)

diesel_additional_tax = additional_carbon_price * diesel_carbon_intensity
gasoline_additional_tax = additional_carbon_price * gasoline_carbon_intensity
domestic_fuel_additional_tax = additional_carbon_price * domestic_fuel_carbon_intensity

diesel_initial_price = 1.45 # in euro per liter
gasoline_initial_price = 1.5 # in euro per liter
domestic_fuel_initial_price = 0.95 # in euro per liter

diesel_price_elas = -0.45
gasoline_price_elas = -0.45
domestic_fuel_price_elas = -0.2


def adjusted_quantities():
    # load dataset
    df_hh = adjusted_expenditures()

    # Compute adjusted quantities :
    df_hh['diesel_quantity_adjusted'] = df_hh['diesel_quantity'] * (
        1 + diesel_price_elas * (diesel_additional_tax / diesel_initial_price)
        )
    df_hh['gasoline_quantity_adjusted'] = df_hh['gasoline_quantity'] * (
        1 + gasoline_price_elas * (gasoline_additional_tax / gasoline_initial_price)
        )
    df_hh['domestic_fuel_quantity_adjusted'] = df_hh['domestic_fuel_quantity'] * (
        1 + domestic_fuel_price_elas * (domestic_fuel_additional_tax / domestic_fuel_initial_price)
        )

    return df_hh


def adjusted_taxes():

    # load dataset
    df_hh = adjusted_quantities()
    
    # Compute for each household the cost of the policy
    df_hh['diesel_taxes_adjsuted'] = (
        diesel_ticpe * (1 + vat) * (df_hh['diesel_quantity'] - df_hh['diesel_quantity_adjusted'])
        + diesel_additional_tax * (1 + vat) * df_hh['diesel_quantity_adjusted']
        )
    df_hh['gasoline_taxes_adjsuted'] = (
        gasoline_ticpe * (1 + vat) * (df_hh['gasoline_quantity'] - df_hh['gasoline_quantity_adjusted'])
        + gasoline_additional_tax * (1 + vat) * df_hh['gasoline_quantity_adjusted']
        )
    df_hh['domestic_fuel_taxes_adjsuted'] = (
        domestic_fuel_ticpe * (1 + vat) * (df_hh['domestic_fuel_quantity'] - df_hh['domestic_fuel_quantity_adjusted'])
        + domestic_fuel_additional_tax * (1 + vat) * df_hh['domestic_fuel_quantity_adjusted']
        )
    df_hh['total_taxes_adjusted'] = (
        df_hh['diesel_taxes_adjsuted']
        + df_hh['gasoline_taxes_adjsuted']
        + df_hh['domestic_fuel_taxes_adjsuted']
        )

    return df_hh


if __name__ == "__main__":
    df_hh = adjusted_taxes()

    print "quantities after tax / before tax :"
    print df_hh['diesel_quantity_adjusted'].mean(), "/", df_hh['diesel_quantity'].mean()
    print df_hh['gasoline_quantity_adjusted'].mean(), '/', df_hh['gasoline_quantity'].mean()
    print df_hh['domestic_fuel_quantity_adjusted'].mean(), '/', df_hh['domestic_fuel_quantity'].mean()

    print df_hh['diesel_taxes_adjsuted'].mean()
    print df_hh['gasoline_taxes_adjsuted'].mean()
    print df_hh['domestic_fuel_taxes_adjsuted'].mean()
    print df_hh['total_taxes_adjusted'].mean()
